; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -ogsm_stm32f103\stm32f1xx_hal_dma.o --asm_dir=..\..\list\ --list_dir=..\..\list\ --depend=gsm_stm32f103\stm32f1xx_hal_dma.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I..\Hardware\SSD1306 -I..\Hardware\delay -I..\Hardware\GSM_LIB\GENERAL -I..\Hardware\GSM_LIB\USART -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM3 -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS -IE:\MC\2.STM32\STMProjects\GSM\M590\Project\Keil\gsm_stm32f103\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=gsm_stm32f103\stm32f1xx_hal_dma.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c]
                          THUMB

                          AREA ||i.DMA_SetConfig||, CODE, READONLY, ALIGN=1

                  DMA_SetConfig PROC
;;;863      */
;;;864    static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b530              PUSH     {r4,r5,lr}
;;;865    {
;;;866      /* Clear all flags */
;;;867      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
000002  f8905040          LDRB     r5,[r0,#0x40]
000006  2401              MOVS     r4,#1
000008  40ac              LSLS     r4,r4,r5
00000a  6bc5              LDR      r5,[r0,#0x3c]
00000c  606c              STR      r4,[r5,#4]
;;;868    
;;;869      /* Configure DMA Channel data length */
;;;870      hdma->Instance->CNDTR = DataLength;
00000e  6804              LDR      r4,[r0,#0]
000010  6063              STR      r3,[r4,#4]
;;;871    
;;;872      /* Memory to Peripheral */
;;;873      if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
000012  6843              LDR      r3,[r0,#4]
000014  2b10              CMP      r3,#0x10
000016  d004              BEQ      |L1.34|
;;;874      {
;;;875        /* Configure DMA Channel destination address */
;;;876        hdma->Instance->CPAR = DstAddress;
;;;877    
;;;878        /* Configure DMA Channel source address */
;;;879        hdma->Instance->CMAR = SrcAddress;
;;;880      }
;;;881      /* Peripheral to Memory */
;;;882      else
;;;883      {
;;;884        /* Configure DMA Channel source address */
;;;885        hdma->Instance->CPAR = SrcAddress;
000018  6803              LDR      r3,[r0,#0]
00001a  6099              STR      r1,[r3,#8]
;;;886    
;;;887        /* Configure DMA Channel destination address */
;;;888        hdma->Instance->CMAR = DstAddress;
00001c  6800              LDR      r0,[r0,#0]
00001e  60c2              STR      r2,[r0,#0xc]
;;;889      }
;;;890    }
000020  bd30              POP      {r4,r5,pc}
                  |L1.34|
000022  6803              LDR      r3,[r0,#0]            ;876
000024  609a              STR      r2,[r3,#8]            ;876
000026  6800              LDR      r0,[r0,#0]            ;879
000028  60c1              STR      r1,[r0,#0xc]          ;879
00002a  bd30              POP      {r4,r5,pc}
;;;891    
                          ENDP


                          AREA ||i.HAL_DMA_Abort||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Abort PROC
;;;434      */
;;;435    HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
000000  6801              LDR      r1,[r0,#0]
;;;436    {
;;;437      HAL_StatusTypeDef status = HAL_OK;
;;;438    
;;;439      /* Disable DMA IT */
;;;440      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
000002  680a              LDR      r2,[r1,#0]
000004  f022020e          BIC      r2,r2,#0xe
000008  600a              STR      r2,[r1,#0]
;;;441        
;;;442      /* Disable the channel */
;;;443      __HAL_DMA_DISABLE(hdma);
00000a  6801              LDR      r1,[r0,#0]
00000c  680a              LDR      r2,[r1,#0]
00000e  f0220201          BIC      r2,r2,#1
000012  600a              STR      r2,[r1,#0]
;;;444        
;;;445      /* Clear all flags */
;;;446      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
000014  f8902040          LDRB     r2,[r0,#0x40]
000018  2301              MOVS     r3,#1
00001a  fa03f102          LSL      r1,r3,r2
00001e  6bc2              LDR      r2,[r0,#0x3c]
000020  6051              STR      r1,[r2,#4]
;;;447    
;;;448      /* Change the DMA state */
;;;449      hdma->State = HAL_DMA_STATE_READY;
000022  f8803021          STRB     r3,[r0,#0x21]
;;;450    
;;;451      /* Process Unlocked */
;;;452      __HAL_UNLOCK(hdma);      
000026  2100              MOVS     r1,#0
000028  f8801020          STRB     r1,[r0,#0x20]
;;;453      
;;;454      return status; 
00002c  4608              MOV      r0,r1
;;;455    }
00002e  4770              BX       lr
;;;456    
                          ENDP


                          AREA ||i.HAL_DMA_Abort_IT||, CODE, READONLY, ALIGN=2

                  HAL_DMA_Abort_IT PROC
;;;462      */
;;;463    HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;464    {  
;;;465      HAL_StatusTypeDef status = HAL_OK;
000002  2400              MOVS     r4,#0
;;;466      
;;;467      if(HAL_DMA_STATE_BUSY != hdma->State)
000004  f8901021          LDRB     r1,[r0,#0x21]
000008  2902              CMP      r1,#2
00000a  d003              BEQ      |L3.20|
;;;468      {
;;;469        /* no transfer ongoing */
;;;470        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
00000c  2104              MOVS     r1,#4
00000e  6381              STR      r1,[r0,#0x38]
;;;471            
;;;472        status = HAL_ERROR;
000010  2401              MOVS     r4,#1
000012  e03d              B        |L3.144|
                  |L3.20|
;;;473      }
;;;474      else
;;;475      { 
;;;476        /* Disable DMA IT */
;;;477        __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
000014  6801              LDR      r1,[r0,#0]
000016  680a              LDR      r2,[r1,#0]
000018  f022020e          BIC      r2,r2,#0xe
00001c  600a              STR      r2,[r1,#0]
;;;478    
;;;479        /* Disable the channel */
;;;480        __HAL_DMA_DISABLE(hdma);
00001e  6801              LDR      r1,[r0,#0]
000020  680a              LDR      r2,[r1,#0]
000022  f0220201          BIC      r2,r2,#1
000026  600a              STR      r2,[r1,#0]
;;;481    
;;;482        /* Clear all flags */
;;;483        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
000028  4a1a              LDR      r2,|L3.148|
00002a  6801              LDR      r1,[r0,#0]
00002c  4291              CMP      r1,r2
00002e  d101              BNE      |L3.52|
000030  2101              MOVS     r1,#1
000032  e021              B        |L3.120|
                  |L3.52|
000034  4a17              LDR      r2,|L3.148|
000036  3214              ADDS     r2,r2,#0x14
000038  4291              CMP      r1,r2
00003a  d101              BNE      |L3.64|
00003c  2110              MOVS     r1,#0x10
00003e  e01b              B        |L3.120|
                  |L3.64|
000040  4a14              LDR      r2,|L3.148|
000042  3228              ADDS     r2,r2,#0x28
000044  4291              CMP      r1,r2
000046  d101              BNE      |L3.76|
000048  1589              ASRS     r1,r1,#22
00004a  e015              B        |L3.120|
                  |L3.76|
00004c  4a11              LDR      r2,|L3.148|
00004e  323c              ADDS     r2,r2,#0x3c
000050  4291              CMP      r1,r2
000052  d101              BNE      |L3.88|
000054  1489              ASRS     r1,r1,#18
000056  e00f              B        |L3.120|
                  |L3.88|
000058  4a0e              LDR      r2,|L3.148|
00005a  3250              ADDS     r2,r2,#0x50
00005c  4291              CMP      r1,r2
00005e  d102              BNE      |L3.102|
000060  f44f3180          MOV      r1,#0x10000
000064  e008              B        |L3.120|
                  |L3.102|
000066  4a0b              LDR      r2,|L3.148|
000068  3264              ADDS     r2,r2,#0x64
00006a  4291              CMP      r1,r2
00006c  d102              BNE      |L3.116|
00006e  f44f1180          MOV      r1,#0x100000
000072  e001              B        |L3.120|
                  |L3.116|
000074  f04f7180          MOV      r1,#0x1000000
                  |L3.120|
000078  4a06              LDR      r2,|L3.148|
00007a  3a08              SUBS     r2,r2,#8
00007c  6051              STR      r1,[r2,#4]
;;;484    
;;;485        /* Change the DMA state */
;;;486        hdma->State = HAL_DMA_STATE_READY;
00007e  2101              MOVS     r1,#1
000080  f8801021          STRB     r1,[r0,#0x21]
;;;487    
;;;488        /* Process Unlocked */
;;;489        __HAL_UNLOCK(hdma);
000084  2100              MOVS     r1,#0
000086  f8801020          STRB     r1,[r0,#0x20]
;;;490    
;;;491        /* Call User Abort callback */
;;;492        if(hdma->XferAbortCallback != NULL)
00008a  6b41              LDR      r1,[r0,#0x34]
00008c  b101              CBZ      r1,|L3.144|
;;;493        {
;;;494          hdma->XferAbortCallback(hdma);
00008e  4788              BLX      r1
                  |L3.144|
;;;495        } 
;;;496      }
;;;497      return status;
000090  4620              MOV      r0,r4
;;;498    }
000092  bd10              POP      {r4,pc}
;;;499    
                          ENDP

                  |L3.148|
                          DCD      0x40020008

                          AREA ||i.HAL_DMA_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_DMA_DeInit PROC
;;;244      */
;;;245    HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;246    {
;;;247      /* Check the DMA handle allocation */
;;;248      if(hdma == NULL)
000002  2800              CMP      r0,#0
000004  d021              BEQ      |L4.74|
;;;249      {
;;;250        return HAL_ERROR;
;;;251      }
;;;252    
;;;253      /* Check the parameters */
;;;254      assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
;;;255    
;;;256      /* Disable the selected DMA Channelx */
;;;257      __HAL_DMA_DISABLE(hdma);
000006  6801              LDR      r1,[r0,#0]
000008  680a              LDR      r2,[r1,#0]
00000a  f0220201          BIC      r2,r2,#1
00000e  600a              STR      r2,[r1,#0]
;;;258    
;;;259      /* Reset DMA Channel control register */
;;;260      hdma->Instance->CCR  = 0U;
000010  6802              LDR      r2,[r0,#0]
000012  2100              MOVS     r1,#0
000014  6011              STR      r1,[r2,#0]
;;;261    
;;;262      /* Reset DMA Channel Number of Data to Transfer register */
;;;263      hdma->Instance->CNDTR = 0U;
000016  6802              LDR      r2,[r0,#0]
000018  6051              STR      r1,[r2,#4]
;;;264    
;;;265      /* Reset DMA Channel peripheral address register */
;;;266      hdma->Instance->CPAR  = 0U;
00001a  6802              LDR      r2,[r0,#0]
00001c  6091              STR      r1,[r2,#8]
;;;267    
;;;268      /* Reset DMA Channel memory address register */
;;;269      hdma->Instance->CMAR = 0U;
00001e  6802              LDR      r2,[r0,#0]
000020  60d1              STR      r1,[r2,#0xc]
;;;270    
;;;271    #if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
;;;272      /* calculation of the channel index */
;;;273      if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
;;;274      {
;;;275        /* DMA1 */
;;;276        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
;;;277        hdma->DmaBaseAddress = DMA1;
;;;278      }
;;;279      else 
;;;280      {
;;;281        /* DMA2 */
;;;282        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
;;;283        hdma->DmaBaseAddress = DMA2;
;;;284      }
;;;285    #else
;;;286      /* DMA1 */
;;;287      hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
000022  4b0b              LDR      r3,|L4.80|
000024  6802              LDR      r2,[r0,#0]
000026  441a              ADD      r2,r2,r3
000028  2314              MOVS     r3,#0x14
00002a  fbb2f2f3          UDIV     r2,r2,r3
00002e  0092              LSLS     r2,r2,#2
000030  6402              STR      r2,[r0,#0x40]
;;;288      hdma->DmaBaseAddress = DMA1;
000032  4b08              LDR      r3,|L4.84|
000034  63c3              STR      r3,[r0,#0x3c]
;;;289    #endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */
;;;290    
;;;291      /* Clear all flags */
;;;292      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
000036  2401              MOVS     r4,#1
000038  4094              LSLS     r4,r4,r2
00003a  605c              STR      r4,[r3,#4]
;;;293    
;;;294      /* Initialize the error code */
;;;295      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
00003c  6381              STR      r1,[r0,#0x38]
;;;296    
;;;297      /* Initialize the DMA state */
;;;298      hdma->State = HAL_DMA_STATE_RESET;
00003e  f8801021          STRB     r1,[r0,#0x21]
;;;299    
;;;300      /* Release Lock */
;;;301      __HAL_UNLOCK(hdma);
000042  f8801020          STRB     r1,[r0,#0x20]
;;;302    
;;;303      return HAL_OK;
000046  2000              MOVS     r0,#0
;;;304    }
000048  bd10              POP      {r4,pc}
                  |L4.74|
00004a  2001              MOVS     r0,#1                 ;250
00004c  bd10              POP      {r4,pc}
;;;305    
                          ENDP

00004e  0000              DCW      0x0000
                  |L4.80|
                          DCD      0xbffdfff8
                  |L4.84|
                          DCD      0x40020000

                          AREA ||i.HAL_DMA_GetError||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetError PROC
;;;837      */
;;;838    uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
000000  6b80              LDR      r0,[r0,#0x38]
;;;839    {
;;;840      return hdma->ErrorCode;
;;;841    }
000002  4770              BX       lr
;;;842    
                          ENDP


                          AREA ||i.HAL_DMA_GetState||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetState PROC
;;;825      */
;;;826    HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
000000  f8900021          LDRB     r0,[r0,#0x21]
;;;827    {
;;;828      /* Return DMA handle state */
;;;829      return hdma->State;
;;;830    }
000004  4770              BX       lr
;;;831    
                          ENDP


                          AREA ||i.HAL_DMA_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_DMA_IRQHandler PROC
;;;608      */
;;;609    void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;610    {
;;;611      uint32_t flag_it = hdma->DmaBaseAddress->ISR;
000004  6bc1              LDR      r1,[r0,#0x3c]
000006  680a              LDR      r2,[r1,#0]
;;;612      uint32_t source_it = hdma->Instance->CCR;
000008  6801              LDR      r1,[r0,#0]
00000a  680b              LDR      r3,[r1,#0]
;;;613      
;;;614      /* Half Transfer Complete Interrupt management ******************************/
;;;615      if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
00000c  6c04              LDR      r4,[r0,#0x40]
00000e  f04f0a04          MOV      r10,#4
000012  fa0afa04          LSL      r10,r10,r4
;;;616      {
;;;617        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
;;;618        if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
;;;619        {
;;;620          /* Disable the half transfer interrupt */
;;;621          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
;;;622        }
;;;623        /* Clear the half transfer complete flag */
;;;624        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
000016  4d4e              LDR      r5,|L7.336|
000018  4e4e              LDR      r6,|L7.340|
00001a  4f4f              LDR      r7,|L7.344|
00001c  f8dfc13c          LDR      r12,|L7.348|
000020  f8df813c          LDR      r8,|L7.352|
000024  f8df913c          LDR      r9,|L7.356|
000028  ea1a0f02          TST      r10,r2                ;615
00002c  d031              BEQ      |L7.146|
00002e  ea5f7a43          LSLS     r10,r3,#29            ;615
000032  d52e              BPL      |L7.146|
000034  680a              LDR      r2,[r1,#0]            ;618
000036  0692              LSLS     r2,r2,#26             ;618
000038  d403              BMI      |L7.66|
00003a  680a              LDR      r2,[r1,#0]            ;621
00003c  f0220204          BIC      r2,r2,#4              ;621
000040  600a              STR      r2,[r1,#0]            ;621
                  |L7.66|
000042  6801              LDR      r1,[r0,#0]
000044  42a9              CMP      r1,r5
000046  d101              BNE      |L7.76|
000048  2104              MOVS     r1,#4
00004a  e019              B        |L7.128|
                  |L7.76|
00004c  42b1              CMP      r1,r6
00004e  d101              BNE      |L7.84|
000050  2140              MOVS     r1,#0x40
000052  e015              B        |L7.128|
                  |L7.84|
000054  42b9              CMP      r1,r7
000056  d102              BNE      |L7.94|
000058  f44f6180          MOV      r1,#0x400
00005c  e010              B        |L7.128|
                  |L7.94|
00005e  4561              CMP      r1,r12
000060  d102              BNE      |L7.104|
000062  f44f4180          MOV      r1,#0x4000
000066  e00b              B        |L7.128|
                  |L7.104|
000068  4541              CMP      r1,r8
00006a  d102              BNE      |L7.114|
00006c  f44f2180          MOV      r1,#0x40000
000070  e006              B        |L7.128|
                  |L7.114|
000072  4549              CMP      r1,r9
000074  d102              BNE      |L7.124|
000076  f44f0180          MOV      r1,#0x400000
00007a  e001              B        |L7.128|
                  |L7.124|
00007c  f04f6180          MOV      r1,#0x4000000
                  |L7.128|
000080  4a33              LDR      r2,|L7.336|
000082  3a08              SUBS     r2,r2,#8
000084  6051              STR      r1,[r2,#4]
;;;625    
;;;626        /* DMA peripheral state is not updated in Half Transfer */
;;;627        /* but in Transfer Complete case */
;;;628    
;;;629        if(hdma->XferHalfCpltCallback != NULL)
000086  6ac1              LDR      r1,[r0,#0x2c]
000088  2900              CMP      r1,#0
00008a  d05f              BEQ      |L7.332|
;;;630        {
;;;631          /* Half transfer callback */
;;;632          hdma->XferHalfCpltCallback(hdma);
00008c  e8bd5ff0          POP      {r4-r12,lr}
000090  4708              BX       r1
                  |L7.146|
;;;633        }
;;;634      }
;;;635    
;;;636      /* Transfer Complete Interrupt management ***********************************/
;;;637      else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
000092  f04f0e02          MOV      lr,#2
000096  fa0efe04          LSL      lr,lr,r4
00009a  ea1e0f02          TST      lr,r2
00009e  f04f0a00          MOV      r10,#0
;;;638      {
;;;639        if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
;;;640        {
;;;641          /* Disable the transfer complete and error interrupt */
;;;642          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
;;;643    
;;;644          /* Change the DMA state */
;;;645          hdma->State = HAL_DMA_STATE_READY;
0000a2  f04f0b01          MOV      r11,#1
0000a6  d035              BEQ      |L7.276|
0000a8  ea5f7e83          LSLS     lr,r3,#30             ;637
0000ac  d532              BPL      |L7.276|
0000ae  680a              LDR      r2,[r1,#0]            ;639
0000b0  0692              LSLS     r2,r2,#26             ;639
0000b2  d405              BMI      |L7.192|
0000b4  680a              LDR      r2,[r1,#0]            ;642
0000b6  f022020a          BIC      r2,r2,#0xa            ;642
0000ba  600a              STR      r2,[r1,#0]            ;642
0000bc  f880b021          STRB     r11,[r0,#0x21]
                  |L7.192|
;;;646        }
;;;647        /* Clear the transfer complete flag */
;;;648          __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
0000c0  6801              LDR      r1,[r0,#0]
0000c2  42a9              CMP      r1,r5
0000c4  d101              BNE      |L7.202|
0000c6  2102              MOVS     r1,#2
0000c8  e019              B        |L7.254|
                  |L7.202|
0000ca  42b1              CMP      r1,r6
0000cc  d101              BNE      |L7.210|
0000ce  2120              MOVS     r1,#0x20
0000d0  e015              B        |L7.254|
                  |L7.210|
0000d2  42b9              CMP      r1,r7
0000d4  d102              BNE      |L7.220|
0000d6  f44f7100          MOV      r1,#0x200
0000da  e010              B        |L7.254|
                  |L7.220|
0000dc  4561              CMP      r1,r12
0000de  d102              BNE      |L7.230|
0000e0  f44f5100          MOV      r1,#0x2000
0000e4  e00b              B        |L7.254|
                  |L7.230|
0000e6  4541              CMP      r1,r8
0000e8  d102              BNE      |L7.240|
0000ea  f44f3100          MOV      r1,#0x20000
0000ee  e006              B        |L7.254|
                  |L7.240|
0000f0  4549              CMP      r1,r9
0000f2  d102              BNE      |L7.250|
0000f4  f44f1100          MOV      r1,#0x200000
0000f8  e001              B        |L7.254|
                  |L7.250|
0000fa  f04f7100          MOV      r1,#0x2000000
                  |L7.254|
0000fe  4a14              LDR      r2,|L7.336|
000100  3a08              SUBS     r2,r2,#8
000102  6051              STR      r1,[r2,#4]
;;;649    
;;;650        /* Process Unlocked */
;;;651        __HAL_UNLOCK(hdma);
000104  f880a020          STRB     r10,[r0,#0x20]
;;;652    
;;;653        if(hdma->XferCpltCallback != NULL)
000108  6a81              LDR      r1,[r0,#0x28]
00010a  2900              CMP      r1,#0
00010c  d01e              BEQ      |L7.332|
;;;654        {
;;;655          /* Transfer complete callback */
;;;656          hdma->XferCpltCallback(hdma);
00010e  e8bd5ff0          POP      {r4-r12,lr}
000112  4708              BX       r1
                  |L7.276|
;;;657        }
;;;658      }
;;;659    
;;;660      /* Transfer Error Interrupt management **************************************/
;;;661      else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
000114  2508              MOVS     r5,#8
000116  40a5              LSLS     r5,r5,r4
000118  4215              TST      r5,r2
00011a  d017              BEQ      |L7.332|
00011c  071a              LSLS     r2,r3,#28
00011e  d515              BPL      |L7.332|
;;;662      {
;;;663        /* When a DMA transfer error occurs */
;;;664        /* A hardware clear of its EN bits is performed */
;;;665        /* Disable ALL DMA IT */
;;;666        __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
000120  680a              LDR      r2,[r1,#0]
000122  f022020e          BIC      r2,r2,#0xe
000126  600a              STR      r2,[r1,#0]
;;;667    
;;;668        /* Clear all flags */
;;;669        hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
000128  f8901040          LDRB     r1,[r0,#0x40]
00012c  6bc2              LDR      r2,[r0,#0x3c]
00012e  fa0bf101          LSL      r1,r11,r1
000132  6051              STR      r1,[r2,#4]
;;;670    
;;;671        /* Update error code */
;;;672        hdma->ErrorCode = HAL_DMA_ERROR_TE;
000134  f8c0b038          STR      r11,[r0,#0x38]
;;;673    
;;;674        /* Change the DMA state */
;;;675        hdma->State = HAL_DMA_STATE_READY;
000138  f880b021          STRB     r11,[r0,#0x21]
;;;676    
;;;677        /* Process Unlocked */
;;;678        __HAL_UNLOCK(hdma);
00013c  f880a020          STRB     r10,[r0,#0x20]
;;;679    
;;;680        if (hdma->XferErrorCallback != NULL)
000140  6b01              LDR      r1,[r0,#0x30]
000142  2900              CMP      r1,#0
000144  d002              BEQ      |L7.332|
;;;681        {
;;;682          /* Transfer error callback */
;;;683          hdma->XferErrorCallback(hdma);
000146  e8bd5ff0          POP      {r4-r12,lr}
00014a  4708              BX       r1
                  |L7.332|
;;;684        }
;;;685      }
;;;686      return;
;;;687    }
00014c  e8bd9ff0          POP      {r4-r12,pc}
;;;688    
                          ENDP

                  |L7.336|
                          DCD      0x40020008
                  |L7.340|
                          DCD      0x4002001c
                  |L7.344|
                          DCD      0x40020030
                  |L7.348|
                          DCD      0x40020044
                  |L7.352|
                          DCD      0x40020058
                  |L7.356|
                          DCD      0x4002006c

                          AREA ||i.HAL_DMA_Init||, CODE, READONLY, ALIGN=2

                  HAL_DMA_Init PROC
;;;160      */
;;;161    HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
000000  b530              PUSH     {r4,r5,lr}
;;;162    {
;;;163      uint32_t tmp = 0U;
;;;164    
;;;165      /* Check the DMA handle allocation */
;;;166      if(hdma == NULL)
000002  2800              CMP      r0,#0
000004  d02b              BEQ      |L8.94|
;;;167      {
;;;168        return HAL_ERROR;
;;;169      }
;;;170    
;;;171      /* Check the parameters */
;;;172      assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
;;;173      assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
;;;174      assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
;;;175      assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
;;;176      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
;;;177      assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
;;;178      assert_param(IS_DMA_MODE(hdma->Init.Mode));
;;;179      assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
;;;180    
;;;181    #if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
;;;182      /* calculation of the channel index */
;;;183      if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
;;;184      {
;;;185        /* DMA1 */
;;;186        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
;;;187        hdma->DmaBaseAddress = DMA1;
;;;188      }
;;;189      else 
;;;190      {
;;;191        /* DMA2 */
;;;192        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
;;;193        hdma->DmaBaseAddress = DMA2;
;;;194      }
;;;195    #else
;;;196      /* DMA1 */
;;;197      hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
000006  1d00              ADDS     r0,r0,#4
000008  4a16              LDR      r2,|L8.100|
00000a  f8501c04          LDR      r1,[r0,#-4]
00000e  2314              MOVS     r3,#0x14
000010  440a              ADD      r2,r2,r1
000012  fbb2f2f3          UDIV     r2,r2,r3
000016  0092              LSLS     r2,r2,#2
000018  63c2              STR      r2,[r0,#0x3c]
;;;198      hdma->DmaBaseAddress = DMA1;
00001a  4a13              LDR      r2,|L8.104|
00001c  6382              STR      r2,[r0,#0x38]
;;;199    #endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */
;;;200    
;;;201      /* Change DMA peripheral state */
;;;202      hdma->State = HAL_DMA_STATE_BUSY;
00001e  2202              MOVS     r2,#2
000020  7742              STRB     r2,[r0,#0x1d]
;;;203    
;;;204      /* Get the CR register value */
;;;205      tmp = hdma->Instance->CCR;
000022  680a              LDR      r2,[r1,#0]
;;;206    
;;;207      /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;208      tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
000024  f64373f0          MOV      r3,#0x3ff0
000028  439a              BICS     r2,r2,r3
;;;209                          DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
;;;210                          DMA_CCR_DIR));
;;;211    
;;;212      /* Prepare the DMA Channel configuration */
;;;213      tmp |=  hdma->Init.Direction        |
00002a  e9d03400          LDRD     r3,r4,[r0,#0]
00002e  4323              ORRS     r3,r3,r4
000030  e9d04502          LDRD     r4,r5,[r0,#8]
000034  432c              ORRS     r4,r4,r5
000036  4323              ORRS     r3,r3,r4
000038  6904              LDR      r4,[r0,#0x10]
00003a  4323              ORRS     r3,r3,r4
00003c  6944              LDR      r4,[r0,#0x14]
00003e  4323              ORRS     r3,r3,r4
000040  6984              LDR      r4,[r0,#0x18]
000042  4323              ORRS     r3,r3,r4
000044  4313              ORRS     r3,r3,r2
;;;214              hdma->Init.PeriphInc           | hdma->Init.MemInc           |
;;;215              hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
;;;216              hdma->Init.Mode                | hdma->Init.Priority;
;;;217    
;;;218      /* Write to DMA Channel CR register */
;;;219      hdma->Instance->CCR = tmp;
000046  600b              STR      r3,[r1,#0]
;;;220    
;;;221    
;;;222      /* Clean callbacks */
;;;223      hdma->XferCpltCallback = NULL;
000048  2100              MOVS     r1,#0
00004a  6241              STR      r1,[r0,#0x24]
;;;224      hdma->XferHalfCpltCallback = NULL;
00004c  6281              STR      r1,[r0,#0x28]
;;;225      hdma->XferErrorCallback = NULL;
00004e  62c1              STR      r1,[r0,#0x2c]
;;;226      hdma->XferAbortCallback = NULL;
000050  6301              STR      r1,[r0,#0x30]
;;;227    
;;;228      /* Initialise the error code */
;;;229      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
000052  6341              STR      r1,[r0,#0x34]
;;;230    
;;;231      /* Initialize the DMA state*/
;;;232      hdma->State = HAL_DMA_STATE_READY;
000054  2201              MOVS     r2,#1
000056  7742              STRB     r2,[r0,#0x1d]
;;;233      /* Allocate lock resource and initialize it */
;;;234      hdma->Lock = HAL_UNLOCKED;
000058  7701              STRB     r1,[r0,#0x1c]
;;;235      
;;;236      return HAL_OK;
00005a  2000              MOVS     r0,#0
;;;237    }
00005c  bd30              POP      {r4,r5,pc}
                  |L8.94|
00005e  2001              MOVS     r0,#1                 ;168
000060  bd30              POP      {r4,r5,pc}
;;;238    
                          ENDP

000062  0000              DCW      0x0000
                  |L8.100|
                          DCD      0xbffdfff8
                  |L8.104|
                          DCD      0x40020000

                          AREA ||i.HAL_DMA_PollForTransfer||, CODE, READONLY, ALIGN=2

                  HAL_DMA_PollForTransfer PROC
;;;507      */
;;;508    HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;509    {
000004  b082              SUB      sp,sp,#8
000006  4604              MOV      r4,r0
000008  4615              MOV      r5,r2
;;;510      uint32_t temp;
;;;511      uint32_t tickstart = 0U;
;;;512    
;;;513      if(HAL_DMA_STATE_BUSY != hdma->State)
00000a  f8940021          LDRB     r0,[r4,#0x21]
00000e  2802              CMP      r0,#2
000010  d008              BEQ      |L9.36|
;;;514      {
;;;515        /* no transfer ongoing */
;;;516        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
000012  2004              MOVS     r0,#4
000014  63a0              STR      r0,[r4,#0x38]
;;;517        __HAL_UNLOCK(hdma);
000016  2000              MOVS     r0,#0
000018  f8840020          STRB     r0,[r4,#0x20]
;;;518        return HAL_ERROR;
00001c  2001              MOVS     r0,#1
                  |L9.30|
;;;519      }
;;;520    
;;;521      /* Polling mode not supported in circular mode */
;;;522      if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
;;;523      {
;;;524        hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
;;;525        return HAL_ERROR;
;;;526      }
;;;527      
;;;528      /* Get the level transfer complete flag */
;;;529      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;530      {
;;;531        /* Transfer Complete flag */
;;;532        temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
;;;533      }
;;;534      else
;;;535      {
;;;536        /* Half Transfer Complete flag */
;;;537        temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
;;;538      }
;;;539    
;;;540      /* Get tick */
;;;541      tickstart = HAL_GetTick();
;;;542    
;;;543      while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
;;;544      {
;;;545        if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
;;;546        {
;;;547          /* When a DMA transfer error occurs */
;;;548          /* A hardware clear of its EN bits is performed */
;;;549          /* Clear all flags */
;;;550          hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
;;;551    
;;;552          /* Update error code */
;;;553          SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
;;;554    
;;;555          /* Change the DMA state */
;;;556          hdma->State= HAL_DMA_STATE_READY;
;;;557    
;;;558          /* Process Unlocked */
;;;559          __HAL_UNLOCK(hdma);
;;;560    
;;;561          return HAL_ERROR;
;;;562        }
;;;563        /* Check for the Timeout */
;;;564        if(Timeout != HAL_MAX_DELAY)
;;;565        {
;;;566          if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
;;;567          {
;;;568            /* Update error code */
;;;569            SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
;;;570    
;;;571            /* Change the DMA state */
;;;572            hdma->State = HAL_DMA_STATE_READY;
;;;573    
;;;574            /* Process Unlocked */
;;;575            __HAL_UNLOCK(hdma);
;;;576    
;;;577            return HAL_ERROR;
;;;578          }
;;;579        }
;;;580      }
;;;581    
;;;582      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;583      {
;;;584        /* Clear the transfer complete flag */
;;;585        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
;;;586    
;;;587        /* The selected Channelx EN bit is cleared (DMA is disabled and
;;;588        all transfers are complete) */
;;;589        hdma->State = HAL_DMA_STATE_READY;
;;;590      }
;;;591      else
;;;592      {
;;;593        /* Clear the half transfer complete flag */
;;;594        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
;;;595      }
;;;596      
;;;597      /* Process unlocked */
;;;598      __HAL_UNLOCK(hdma);
;;;599    
;;;600      return HAL_OK;
;;;601    }
00001e  b005              ADD      sp,sp,#0x14
000020  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.36|
000024  6820              LDR      r0,[r4,#0]            ;522
000026  6801              LDR      r1,[r0,#0]            ;522
000028  0689              LSLS     r1,r1,#26             ;522
00002a  d504              BPL      |L9.54|
00002c  f44f7080          MOV      r0,#0x100             ;524
000030  63a0              STR      r0,[r4,#0x38]         ;524
000032  2001              MOVS     r0,#1                 ;525
000034  e7f3              B        |L9.30|
                  |L9.54|
000036  f8df81f0          LDR      r8,|L9.552|
00003a  f8df91ec          LDR      r9,|L9.552|
00003e  f8dfa1e8          LDR      r10,|L9.552|
000042  f8dfb1e4          LDR      r11,|L9.552|
000046  4f78              LDR      r7,|L9.552|
000048  9903              LDR      r1,[sp,#0xc]          ;529
00004a  f1080814          ADD      r8,r8,#0x14           ;532
00004e  f1090928          ADD      r9,r9,#0x28           ;532
000052  f10a0a3c          ADD      r10,r10,#0x3c         ;532
000056  f10b0b50          ADD      r11,r11,#0x50         ;532
00005a  b129              CBZ      r1,|L9.104|
00005c  4972              LDR      r1,|L9.552|
00005e  3914              SUBS     r1,r1,#0x14           ;537
000060  4288              CMP      r0,r1                 ;537
000062  d122              BNE      |L9.170|
000064  2604              MOVS     r6,#4                 ;537
000066  e03a              B        |L9.222|
                  |L9.104|
000068  496f              LDR      r1,|L9.552|
00006a  3914              SUBS     r1,r1,#0x14           ;532
00006c  4288              CMP      r0,r1                 ;532
00006e  d101              BNE      |L9.116|
000070  2602              MOVS     r6,#2                 ;532
000072  e034              B        |L9.222|
                  |L9.116|
000074  42b8              CMP      r0,r7                 ;532
000076  d101              BNE      |L9.124|
000078  2620              MOVS     r6,#0x20              ;532
00007a  e030              B        |L9.222|
                  |L9.124|
00007c  4540              CMP      r0,r8                 ;532
00007e  d102              BNE      |L9.134|
000080  f44f7600          MOV      r6,#0x200             ;532
000084  e02b              B        |L9.222|
                  |L9.134|
000086  4548              CMP      r0,r9                 ;532
000088  d102              BNE      |L9.144|
00008a  f44f5600          MOV      r6,#0x2000            ;532
00008e  e026              B        |L9.222|
                  |L9.144|
000090  4550              CMP      r0,r10                ;532
000092  d102              BNE      |L9.154|
000094  f44f3600          MOV      r6,#0x20000           ;532
000098  e021              B        |L9.222|
                  |L9.154|
00009a  4558              CMP      r0,r11                ;532
00009c  d102              BNE      |L9.164|
00009e  f44f1600          MOV      r6,#0x200000          ;532
0000a2  e01c              B        |L9.222|
                  |L9.164|
0000a4  f04f7600          MOV      r6,#0x2000000         ;532
0000a8  e019              B        |L9.222|
                  |L9.170|
0000aa  42b8              CMP      r0,r7                 ;537
0000ac  d101              BNE      |L9.178|
0000ae  2640              MOVS     r6,#0x40              ;537
0000b0  e015              B        |L9.222|
                  |L9.178|
0000b2  4540              CMP      r0,r8                 ;537
0000b4  d102              BNE      |L9.188|
0000b6  f44f6680          MOV      r6,#0x400             ;537
0000ba  e010              B        |L9.222|
                  |L9.188|
0000bc  4548              CMP      r0,r9                 ;537
0000be  d102              BNE      |L9.198|
0000c0  f44f4680          MOV      r6,#0x4000            ;537
0000c4  e00b              B        |L9.222|
                  |L9.198|
0000c6  4550              CMP      r0,r10                ;537
0000c8  d102              BNE      |L9.208|
0000ca  f44f2680          MOV      r6,#0x40000           ;537
0000ce  e006              B        |L9.222|
                  |L9.208|
0000d0  4558              CMP      r0,r11                ;537
0000d2  d102              BNE      |L9.218|
0000d4  f44f0680          MOV      r6,#0x400000          ;537
0000d8  e001              B        |L9.222|
                  |L9.218|
0000da  f04f6680          MOV      r6,#0x4000000         ;537
                  |L9.222|
0000de  f7fffffe          BL       HAL_GetTick
0000e2  9001              STR      r0,[sp,#4]            ;541
0000e4  e048              B        |L9.376|
                  |L9.230|
0000e6  6809              LDR      r1,[r1,#0]            ;545
0000e8  4a4f              LDR      r2,|L9.552|
0000ea  6820              LDR      r0,[r4,#0]            ;545
0000ec  3a14              SUBS     r2,r2,#0x14           ;545
0000ee  4290              CMP      r0,r2                 ;545
0000f0  d101              BNE      |L9.246|
0000f2  2008              MOVS     r0,#8                 ;545
0000f4  e019              B        |L9.298|
                  |L9.246|
0000f6  42b8              CMP      r0,r7                 ;545
0000f8  d101              BNE      |L9.254|
0000fa  2080              MOVS     r0,#0x80              ;545
0000fc  e015              B        |L9.298|
                  |L9.254|
0000fe  4540              CMP      r0,r8                 ;545
000100  d102              BNE      |L9.264|
000102  f44f6000          MOV      r0,#0x800             ;545
000106  e010              B        |L9.298|
                  |L9.264|
000108  4548              CMP      r0,r9                 ;545
00010a  d102              BNE      |L9.274|
00010c  f44f4000          MOV      r0,#0x8000            ;545
000110  e00b              B        |L9.298|
                  |L9.274|
000112  4550              CMP      r0,r10                ;545
000114  d102              BNE      |L9.284|
000116  f44f2000          MOV      r0,#0x80000           ;545
00011a  e006              B        |L9.298|
                  |L9.284|
00011c  4558              CMP      r0,r11                ;545
00011e  d102              BNE      |L9.294|
000120  f44f0000          MOV      r0,#0x800000          ;545
000124  e001              B        |L9.298|
                  |L9.294|
000126  f04f6000          MOV      r0,#0x8000000         ;545
                  |L9.298|
00012a  4201              TST      r1,r0                 ;545
00012c  d010              BEQ      |L9.336|
00012e  3420              ADDS     r4,r4,#0x20           ;550
000130  2201              MOVS     r2,#1                 ;550
000132  f8941020          LDRB     r1,[r4,#0x20]         ;550
000136  fa02f001          LSL      r0,r2,r1              ;550
00013a  69e1              LDR      r1,[r4,#0x1c]         ;550
00013c  6048              STR      r0,[r1,#4]            ;550
00013e  69a1              LDR      r1,[r4,#0x18]         ;553
000140  f0410101          ORR      r1,r1,#1              ;553
000144  61a1              STR      r1,[r4,#0x18]         ;553
000146  7062              STRB     r2,[r4,#1]            ;556
000148  2000              MOVS     r0,#0                 ;559
00014a  7020              STRB     r0,[r4,#0]            ;559
00014c  2001              MOVS     r0,#1                 ;561
00014e  e766              B        |L9.30|
                  |L9.336|
000150  1c68              ADDS     r0,r5,#1              ;564
000152  d011              BEQ      |L9.376|
000154  b12d              CBZ      r5,|L9.354|
000156  f7fffffe          BL       HAL_GetTick
00015a  9901              LDR      r1,[sp,#4]            ;566
00015c  1a40              SUBS     r0,r0,r1              ;566
00015e  42a8              CMP      r0,r5                 ;566
000160  d90a              BLS      |L9.376|
                  |L9.354|
000162  3420              ADDS     r4,r4,#0x20           ;569
000164  69a0              LDR      r0,[r4,#0x18]         ;569
000166  f0400020          ORR      r0,r0,#0x20           ;569
00016a  61a0              STR      r0,[r4,#0x18]         ;569
00016c  2001              MOVS     r0,#1                 ;572
00016e  7060              STRB     r0,[r4,#1]            ;572
000170  2000              MOVS     r0,#0                 ;575
000172  7020              STRB     r0,[r4,#0]            ;575
000174  2001              MOVS     r0,#1                 ;577
000176  e752              B        |L9.30|
                  |L9.376|
000178  492b              LDR      r1,|L9.552|
00017a  391c              SUBS     r1,r1,#0x1c           ;543
00017c  6808              LDR      r0,[r1,#0]            ;543
00017e  4230              TST      r0,r6                 ;543
000180  d0b1              BEQ      |L9.230|
000182  9803              LDR      r0,[sp,#0xc]          ;582
000184  b130              CBZ      r0,|L9.404|
000186  4928              LDR      r1,|L9.552|
000188  6820              LDR      r0,[r4,#0]            ;594
00018a  3914              SUBS     r1,r1,#0x14           ;594
00018c  4288              CMP      r0,r1                 ;594
00018e  d129              BNE      |L9.484|
000190  2004              MOVS     r0,#4                 ;594
000192  e041              B        |L9.536|
                  |L9.404|
000194  4924              LDR      r1,|L9.552|
000196  6820              LDR      r0,[r4,#0]            ;585
000198  3914              SUBS     r1,r1,#0x14           ;585
00019a  4288              CMP      r0,r1                 ;585
00019c  d101              BNE      |L9.418|
00019e  2002              MOVS     r0,#2                 ;585
0001a0  e019              B        |L9.470|
                  |L9.418|
0001a2  42b8              CMP      r0,r7                 ;585
0001a4  d101              BNE      |L9.426|
0001a6  2020              MOVS     r0,#0x20              ;585
0001a8  e015              B        |L9.470|
                  |L9.426|
0001aa  4540              CMP      r0,r8                 ;585
0001ac  d102              BNE      |L9.436|
0001ae  f44f7000          MOV      r0,#0x200             ;585
0001b2  e010              B        |L9.470|
                  |L9.436|
0001b4  4548              CMP      r0,r9                 ;585
0001b6  d102              BNE      |L9.446|
0001b8  f44f5000          MOV      r0,#0x2000            ;585
0001bc  e00b              B        |L9.470|
                  |L9.446|
0001be  4550              CMP      r0,r10                ;585
0001c0  d102              BNE      |L9.456|
0001c2  f44f3000          MOV      r0,#0x20000           ;585
0001c6  e006              B        |L9.470|
                  |L9.456|
0001c8  4558              CMP      r0,r11                ;585
0001ca  d102              BNE      |L9.466|
0001cc  f44f1000          MOV      r0,#0x200000          ;585
0001d0  e001              B        |L9.470|
                  |L9.466|
0001d2  f04f7000          MOV      r0,#0x2000000         ;585
                  |L9.470|
0001d6  4914              LDR      r1,|L9.552|
0001d8  391c              SUBS     r1,r1,#0x1c           ;585
0001da  6048              STR      r0,[r1,#4]            ;585
0001dc  2001              MOVS     r0,#1                 ;589
0001de  f8840021          STRB     r0,[r4,#0x21]         ;589
0001e2  e01c              B        |L9.542|
                  |L9.484|
0001e4  42b8              CMP      r0,r7                 ;594
0001e6  d101              BNE      |L9.492|
0001e8  2040              MOVS     r0,#0x40              ;594
0001ea  e015              B        |L9.536|
                  |L9.492|
0001ec  4540              CMP      r0,r8                 ;594
0001ee  d102              BNE      |L9.502|
0001f0  f44f6080          MOV      r0,#0x400             ;594
0001f4  e010              B        |L9.536|
                  |L9.502|
0001f6  4548              CMP      r0,r9                 ;594
0001f8  d102              BNE      |L9.512|
0001fa  f44f4080          MOV      r0,#0x4000            ;594
0001fe  e00b              B        |L9.536|
                  |L9.512|
000200  4550              CMP      r0,r10                ;594
000202  d102              BNE      |L9.522|
000204  f44f2080          MOV      r0,#0x40000           ;594
000208  e006              B        |L9.536|
                  |L9.522|
00020a  4558              CMP      r0,r11                ;594
00020c  d102              BNE      |L9.532|
00020e  f44f0080          MOV      r0,#0x400000          ;594
000212  e001              B        |L9.536|
                  |L9.532|
000214  f04f6080          MOV      r0,#0x4000000         ;594
                  |L9.536|
000218  4903              LDR      r1,|L9.552|
00021a  391c              SUBS     r1,r1,#0x1c           ;594
00021c  6048              STR      r0,[r1,#4]            ;594
                  |L9.542|
00021e  2000              MOVS     r0,#0                 ;598
000220  f8840020          STRB     r0,[r4,#0x20]         ;598
000224  e6fb              B        |L9.30|
;;;602    
                          ENDP

000226  0000              DCW      0x0000
                  |L9.552|
                          DCD      0x4002001c

                          AREA ||i.HAL_DMA_RegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_DMA_RegisterCallback PROC
;;;698      */                          
;;;699    HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
000000  b510              PUSH     {r4,lr}
;;;700    {
;;;701      HAL_StatusTypeDef status = HAL_OK;
000002  2300              MOVS     r3,#0
;;;702      
;;;703      /* Process locked */
;;;704      __HAL_LOCK(hdma);
000004  f8904020          LDRB     r4,[r0,#0x20]
000008  2c01              CMP      r4,#1
00000a  d00c              BEQ      |L10.38|
00000c  2401              MOVS     r4,#1
00000e  f8804020          STRB     r4,[r0,#0x20]
;;;705      
;;;706      if(HAL_DMA_STATE_READY == hdma->State)
000012  f8904021          LDRB     r4,[r0,#0x21]
000016  2c01              CMP      r4,#1
000018  d007              BEQ      |L10.42|
;;;707      {
;;;708        switch (CallbackID)
;;;709        {
;;;710        case  HAL_DMA_XFER_CPLT_CB_ID:
;;;711          hdma->XferCpltCallback = pCallback;
;;;712          break;
;;;713          
;;;714        case  HAL_DMA_XFER_HALFCPLT_CB_ID:
;;;715          hdma->XferHalfCpltCallback = pCallback;
;;;716          break;         
;;;717    
;;;718        case  HAL_DMA_XFER_ERROR_CB_ID:
;;;719          hdma->XferErrorCallback = pCallback;
;;;720          break;         
;;;721          
;;;722        case  HAL_DMA_XFER_ABORT_CB_ID:
;;;723          hdma->XferAbortCallback = pCallback;
;;;724          break; 
;;;725          
;;;726        default:
;;;727          status = HAL_ERROR;
;;;728          break;                                                            
;;;729        }
;;;730      }
;;;731      else
;;;732      {
;;;733        status = HAL_ERROR;
00001a  2301              MOVS     r3,#1
                  |L10.28|
;;;734      } 
;;;735      
;;;736      /* Release Lock */
;;;737      __HAL_UNLOCK(hdma);
00001c  2100              MOVS     r1,#0
00001e  f8801020          STRB     r1,[r0,#0x20]
;;;738      
;;;739      return status;
000022  4618              MOV      r0,r3
;;;740    }
000024  bd10              POP      {r4,pc}
                  |L10.38|
000026  2002              MOVS     r0,#2                 ;704
000028  bd10              POP      {r4,pc}
                  |L10.42|
00002a  b139              CBZ      r1,|L10.60|
00002c  2901              CMP      r1,#1                 ;708
00002e  d007              BEQ      |L10.64|
000030  2902              CMP      r1,#2                 ;708
000032  d007              BEQ      |L10.68|
000034  2903              CMP      r1,#3                 ;708
000036  d007              BEQ      |L10.72|
000038  2301              MOVS     r3,#1                 ;727
00003a  e7ef              B        |L10.28|
                  |L10.60|
00003c  6282              STR      r2,[r0,#0x28]         ;711
00003e  e7ed              B        |L10.28|
                  |L10.64|
000040  62c2              STR      r2,[r0,#0x2c]         ;715
000042  e7eb              B        |L10.28|
                  |L10.68|
000044  6302              STR      r2,[r0,#0x30]         ;719
000046  e7e9              B        |L10.28|
                  |L10.72|
000048  6342              STR      r2,[r0,#0x34]         ;723
00004a  e7e7              B        |L10.28|
;;;741    
                          ENDP


                          AREA ||i.HAL_DMA_Start||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start PROC
;;;337      */
;;;338    HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b570              PUSH     {r4-r6,lr}
;;;339    {
000002  4604              MOV      r4,r0
;;;340      HAL_StatusTypeDef status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;341    
;;;342      /* Check the parameters */
;;;343      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;344    
;;;345      /* Process locked */
;;;346      __HAL_LOCK(hdma);
000006  f8940020          LDRB     r0,[r4,#0x20]
00000a  2801              CMP      r0,#1
00000c  d00c              BEQ      |L11.40|
00000e  2001              MOVS     r0,#1
000010  f8840020          STRB     r0,[r4,#0x20]
;;;347    
;;;348      if(HAL_DMA_STATE_READY == hdma->State)
000014  f8946021          LDRB     r6,[r4,#0x21]
000018  2000              MOVS     r0,#0
00001a  2e01              CMP      r6,#1
00001c  d006              BEQ      |L11.44|
;;;349      {
;;;350        /* Change DMA peripheral state */
;;;351        hdma->State = HAL_DMA_STATE_BUSY;
;;;352        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;353                
;;;354        /* Disable the peripheral */
;;;355        __HAL_DMA_DISABLE(hdma);
;;;356        
;;;357        /* Configure the source, destination address and the data length & clear flags*/
;;;358        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;359        
;;;360        /* Enable the Peripheral */
;;;361        __HAL_DMA_ENABLE(hdma);
;;;362      }
;;;363      else
;;;364      {
;;;365       /* Process Unlocked */
;;;366       __HAL_UNLOCK(hdma);  
00001e  f8840020          STRB     r0,[r4,#0x20]
;;;367       status = HAL_BUSY;
000022  2502              MOVS     r5,#2
                  |L11.36|
;;;368      }  
;;;369      return status;
000024  4628              MOV      r0,r5
;;;370    }
000026  bd70              POP      {r4-r6,pc}
                  |L11.40|
000028  2002              MOVS     r0,#2                 ;346
00002a  bd70              POP      {r4-r6,pc}
                  |L11.44|
00002c  2602              MOVS     r6,#2                 ;351
00002e  f8846021          STRB     r6,[r4,#0x21]         ;351
000032  63a0              STR      r0,[r4,#0x38]         ;352
000034  6820              LDR      r0,[r4,#0]            ;355
000036  6806              LDR      r6,[r0,#0]            ;355
000038  f0260601          BIC      r6,r6,#1              ;355
00003c  6006              STR      r6,[r0,#0]            ;355
00003e  4620              MOV      r0,r4                 ;358
000040  f7fffffe          BL       DMA_SetConfig
000044  6820              LDR      r0,[r4,#0]            ;361
000046  6801              LDR      r1,[r0,#0]            ;361
000048  f0410101          ORR      r1,r1,#1              ;361
00004c  6001              STR      r1,[r0,#0]            ;361
00004e  e7e9              B        |L11.36|
;;;371    
                          ENDP


                          AREA ||i.HAL_DMA_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start_IT PROC
;;;380      */
;;;381    HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b570              PUSH     {r4-r6,lr}
;;;382    {
000002  4604              MOV      r4,r0
;;;383      HAL_StatusTypeDef status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;384    
;;;385      /* Check the parameters */
;;;386      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;387    
;;;388      /* Process locked */
;;;389      __HAL_LOCK(hdma);
000006  f8940020          LDRB     r0,[r4,#0x20]
00000a  2801              CMP      r0,#1
00000c  d00c              BEQ      |L12.40|
00000e  2001              MOVS     r0,#1
000010  f8840020          STRB     r0,[r4,#0x20]
;;;390      
;;;391      if(HAL_DMA_STATE_READY == hdma->State)
000014  f8946021          LDRB     r6,[r4,#0x21]
000018  2000              MOVS     r0,#0
00001a  2e01              CMP      r6,#1
00001c  d006              BEQ      |L12.44|
;;;392      {
;;;393        /* Change DMA peripheral state */
;;;394        hdma->State = HAL_DMA_STATE_BUSY;
;;;395        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;396        
;;;397        /* Disable the peripheral */
;;;398        __HAL_DMA_DISABLE(hdma);
;;;399        
;;;400        /* Configure the source, destination address and the data length & clear flags*/
;;;401        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;402        
;;;403        /* Enable the transfer complete interrupt */
;;;404        /* Enable the transfer Error interrupt */
;;;405        if(NULL != hdma->XferHalfCpltCallback)
;;;406        {
;;;407          /* Enable the Half transfer complete interrupt as well */
;;;408          __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
;;;409        }
;;;410        else
;;;411        {
;;;412          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
;;;413          __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
;;;414        }
;;;415        /* Enable the Peripheral */
;;;416        __HAL_DMA_ENABLE(hdma);
;;;417      }
;;;418      else
;;;419      {      
;;;420        /* Process Unlocked */
;;;421        __HAL_UNLOCK(hdma); 
00001e  f8840020          STRB     r0,[r4,#0x20]
;;;422    
;;;423        /* Remain BUSY */
;;;424        status = HAL_BUSY;
000022  2502              MOVS     r5,#2
                  |L12.36|
;;;425      }    
;;;426      return status;
000024  4628              MOV      r0,r5
;;;427    }
000026  bd70              POP      {r4-r6,pc}
                  |L12.40|
000028  2002              MOVS     r0,#2                 ;389
00002a  bd70              POP      {r4-r6,pc}
                  |L12.44|
00002c  2602              MOVS     r6,#2                 ;394
00002e  f8846021          STRB     r6,[r4,#0x21]         ;394
000032  63a0              STR      r0,[r4,#0x38]         ;395
000034  6820              LDR      r0,[r4,#0]            ;398
000036  6806              LDR      r6,[r0,#0]            ;398
000038  f0260601          BIC      r6,r6,#1              ;398
00003c  6006              STR      r6,[r0,#0]            ;398
00003e  4620              MOV      r0,r4                 ;401
000040  f7fffffe          BL       DMA_SetConfig
000044  6ae0              LDR      r0,[r4,#0x2c]         ;405
000046  b128              CBZ      r0,|L12.84|
000048  6820              LDR      r0,[r4,#0]            ;408
00004a  6801              LDR      r1,[r0,#0]            ;408
00004c  f041010e          ORR      r1,r1,#0xe            ;408
000050  6001              STR      r1,[r0,#0]            ;408
000052  e009              B        |L12.104|
                  |L12.84|
000054  6820              LDR      r0,[r4,#0]            ;412
000056  6801              LDR      r1,[r0,#0]            ;412
000058  f0210104          BIC      r1,r1,#4              ;412
00005c  6001              STR      r1,[r0,#0]            ;412
00005e  6820              LDR      r0,[r4,#0]            ;413
000060  6801              LDR      r1,[r0,#0]            ;413
000062  f041010a          ORR      r1,r1,#0xa            ;413
000066  6001              STR      r1,[r0,#0]            ;413
                  |L12.104|
000068  6820              LDR      r0,[r4,#0]            ;416
00006a  6801              LDR      r1,[r0,#0]            ;416
00006c  f0410101          ORR      r1,r1,#1              ;416
000070  6001              STR      r1,[r0,#0]            ;416
000072  e7d7              B        |L12.36|
;;;428    
                          ENDP


                          AREA ||i.HAL_DMA_UnRegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_DMA_UnRegisterCallback PROC
;;;749      */              
;;;750    HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
000000  b510              PUSH     {r4,lr}
;;;751    {
;;;752      HAL_StatusTypeDef status = HAL_OK;
000002  2200              MOVS     r2,#0
;;;753    
;;;754      /* Process locked */
;;;755      __HAL_LOCK(hdma);
000004  f8903020          LDRB     r3,[r0,#0x20]
000008  2b01              CMP      r3,#1
00000a  d00c              BEQ      |L13.38|
00000c  2301              MOVS     r3,#1
00000e  f8803020          STRB     r3,[r0,#0x20]
;;;756      
;;;757      if(HAL_DMA_STATE_READY == hdma->State)
000012  f8904021          LDRB     r4,[r0,#0x21]
000016  2300              MOVS     r3,#0
000018  2c01              CMP      r4,#1
00001a  d006              BEQ      |L13.42|
;;;758      {
;;;759        switch (CallbackID)
;;;760        {
;;;761        case  HAL_DMA_XFER_CPLT_CB_ID:
;;;762          hdma->XferCpltCallback = NULL;
;;;763          break;
;;;764    
;;;765        case  HAL_DMA_XFER_HALFCPLT_CB_ID:
;;;766          hdma->XferHalfCpltCallback = NULL;
;;;767          break;         
;;;768    
;;;769        case  HAL_DMA_XFER_ERROR_CB_ID:
;;;770          hdma->XferErrorCallback = NULL;
;;;771          break;         
;;;772    
;;;773        case  HAL_DMA_XFER_ABORT_CB_ID:
;;;774          hdma->XferAbortCallback = NULL;
;;;775          break; 
;;;776    
;;;777        case   HAL_DMA_XFER_ALL_CB_ID:
;;;778          hdma->XferCpltCallback = NULL;
;;;779          hdma->XferHalfCpltCallback = NULL;
;;;780          hdma->XferErrorCallback = NULL;
;;;781          hdma->XferAbortCallback = NULL;
;;;782          break; 
;;;783    
;;;784        default:
;;;785          status = HAL_ERROR;
;;;786          break;
;;;787        }
;;;788      }
;;;789      else
;;;790      {
;;;791        status = HAL_ERROR;
00001c  2201              MOVS     r2,#1
                  |L13.30|
;;;792      } 
;;;793      
;;;794      /* Release Lock */
;;;795      __HAL_UNLOCK(hdma);
00001e  f8803020          STRB     r3,[r0,#0x20]
;;;796      
;;;797      return status;
000022  4610              MOV      r0,r2
;;;798    }
000024  bd10              POP      {r4,pc}
                  |L13.38|
000026  2002              MOVS     r0,#2                 ;755
000028  bd10              POP      {r4,pc}
                  |L13.42|
00002a  2905              CMP      r1,#5                 ;759
00002c  d211              BCS      |L13.82|
00002e  e8dff001          TBB      [pc,r1]               ;759
000032  0305              DCB      0x03,0x05
000034  07090b00          DCB      0x07,0x09,0x0b,0x00
000038  6283              STR      r3,[r0,#0x28]         ;762
00003a  e7f0              B        |L13.30|
00003c  62c3              STR      r3,[r0,#0x2c]         ;766
00003e  e7ee              B        |L13.30|
000040  6303              STR      r3,[r0,#0x30]         ;770
000042  e7ec              B        |L13.30|
000044  6343              STR      r3,[r0,#0x34]         ;774
000046  e7ea              B        |L13.30|
000048  6283              STR      r3,[r0,#0x28]         ;778
00004a  62c3              STR      r3,[r0,#0x2c]         ;779
00004c  6303              STR      r3,[r0,#0x30]         ;780
00004e  6343              STR      r3,[r0,#0x34]         ;781
000050  e7e5              B        |L13.30|
                  |L13.82|
000052  2201              MOVS     r2,#1                 ;785
000054  e7e3              B        |L13.30|
;;;799      
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REVSH|
#line 402
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____RRX|
#line 587
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
