; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -ogsm_stm32f103\stm32f1xx_hal_flash_ex.o --asm_dir=..\..\list\ --list_dir=..\..\list\ --depend=gsm_stm32f103\stm32f1xx_hal_flash_ex.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I..\Hardware\SSD1306 -I..\Hardware\delay -I..\Hardware\GSM_LIB\GENERAL -I..\Hardware\GSM_LIB\USART -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM3 -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS -IE:\MC\2.STM32\STMProjects\GSM\M590\Project\Keil\gsm_stm32f103\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=gsm_stm32f103\stm32f1xx_hal_flash_ex.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash_ex.c]
                          THUMB

                          AREA ||i.FLASH_MassErase||, CODE, READONLY, ALIGN=2

                  FLASH_MassErase PROC
;;;612      */
;;;613    static void FLASH_MassErase(uint32_t Banks)
000000  4906              LDR      r1,|L1.28|
;;;614    {
;;;615      /* Check the parameters */
;;;616      assert_param(IS_FLASH_BANK(Banks));
;;;617    
;;;618      /* Clean the error context */
;;;619      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000002  2000              MOVS     r0,#0
000004  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;620    
;;;621    #if defined(FLASH_BANK2_END)
;;;622      if(Banks == FLASH_BANK_BOTH)
;;;623      {
;;;624        /* bank1 & bank2 will be erased*/
;;;625        SET_BIT(FLASH->CR, FLASH_CR_MER);
;;;626        SET_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;627        SET_BIT(FLASH->CR, FLASH_CR_STRT);
;;;628        SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
;;;629      }
;;;630      else if(Banks == FLASH_BANK_2)
;;;631      {
;;;632        /*Only bank2 will be erased*/
;;;633        SET_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;634        SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
;;;635      }
;;;636      else
;;;637      {
;;;638    #endif /* FLASH_BANK2_END */
;;;639    #if !defined(FLASH_BANK2_END)
;;;640      /* Prevent unused argument(s) compilation warning */
;;;641      UNUSED(Banks);
;;;642    #endif /* FLASH_BANK2_END */  
;;;643        /* Only bank1 will be erased*/
;;;644        SET_BIT(FLASH->CR, FLASH_CR_MER);
000006  4806              LDR      r0,|L1.32|
000008  6901              LDR      r1,[r0,#0x10]
00000a  f0410104          ORR      r1,r1,#4
00000e  6101              STR      r1,[r0,#0x10]
;;;645        SET_BIT(FLASH->CR, FLASH_CR_STRT);
000010  6901              LDR      r1,[r0,#0x10]
000012  f0410140          ORR      r1,r1,#0x40
000016  6101              STR      r1,[r0,#0x10]
;;;646    #if defined(FLASH_BANK2_END)
;;;647      }
;;;648    #endif /* FLASH_BANK2_END */
;;;649    }
000018  4770              BX       lr
;;;650    
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      pFlash
                  |L1.32|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_DisableWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_DisableWRP PROC
;;;784      */
;;;785    static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;786    {
000004  4604              MOV      r4,r0
;;;787      HAL_StatusTypeDef status = HAL_OK;
;;;788      uint16_t WRP0_Data = 0xFFFF;
;;;789    #if defined(FLASH_WRP1_WRP1)
;;;790      uint16_t WRP1_Data = 0xFFFF;
;;;791    #endif /* FLASH_WRP1_WRP1 */
;;;792    #if defined(FLASH_WRP2_WRP2)
;;;793      uint16_t WRP2_Data = 0xFFFF;
;;;794    #endif /* FLASH_WRP2_WRP2 */
;;;795    #if defined(FLASH_WRP3_WRP3)
;;;796      uint16_t WRP3_Data = 0xFFFF;
;;;797    #endif /* FLASH_WRP3_WRP3 */
;;;798      
;;;799      /* Check the parameters */
;;;800      assert_param(IS_OB_WRP(WriteProtectPage));
;;;801    
;;;802      /* Get current write protected pages and the new pages to be unprotected ******/
;;;803      WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
000006  f7fffffe          BL       FLASH_OB_GetWRP
00000a  4320              ORRS     r0,r0,r4
;;;804    
;;;805    #if defined(OB_WRP_PAGES0TO15MASK)
;;;806      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
;;;807    #elif defined(OB_WRP_PAGES0TO31MASK)
;;;808      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
00000c  b2c4              UXTB     r4,r0
;;;809    #endif /* OB_WRP_PAGES0TO31MASK */
;;;810      
;;;811    #if defined(OB_WRP_PAGES16TO31MASK)
;;;812      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
;;;813    #elif defined(OB_WRP_PAGES32TO63MASK)
;;;814      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
00000e  f3c02507          UBFX     r5,r0,#8,#8
;;;815    #endif /* OB_WRP_PAGES32TO63MASK */
;;;816     
;;;817    #if defined(OB_WRP_PAGES64TO95MASK)
;;;818      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
000012  f3c04607          UBFX     r6,r0,#16,#8
;;;819    #endif /* OB_WRP_PAGES64TO95MASK */
;;;820    #if defined(OB_WRP_PAGES32TO47MASK)
;;;821      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
;;;822    #endif /* OB_WRP_PAGES32TO47MASK */
;;;823    
;;;824    #if defined(OB_WRP_PAGES96TO127MASK)
;;;825      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
000016  0e07              LSRS     r7,r0,#24
;;;826    #elif defined(OB_WRP_PAGES48TO255MASK)
;;;827      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24U); 
;;;828    #elif defined(OB_WRP_PAGES48TO511MASK)
;;;829      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO511MASK) >> 24U); 
;;;830    #elif defined(OB_WRP_PAGES48TO127MASK)
;;;831      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
;;;832    #endif /* OB_WRP_PAGES96TO127MASK */
;;;833    
;;;834        
;;;835      /* Wait for last operation to be completed */
;;;836      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000018  f24c3950          MOV      r9,#0xc350
00001c  4648              MOV      r0,r9
00001e  f7fffffe          BL       FLASH_WaitForLastOperation
;;;837    
;;;838      if(status == HAL_OK)
000022  2800              CMP      r0,#0
000024  d13d              BNE      |L2.162|
;;;839      { 
;;;840        /* Clean the error context */
;;;841        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000026  4920              LDR      r1,|L2.168|
000028  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;842    
;;;843        /* To be able to write again option byte, need to perform a option byte erase */
;;;844        status = HAL_FLASHEx_OBErase();
00002a  f7fffffe          BL       HAL_FLASHEx_OBErase
;;;845        if (status == HAL_OK)  
00002e  2800              CMP      r0,#0
000030  d137              BNE      |L2.162|
;;;846        {
;;;847          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
000032  f8df8078          LDR      r8,|L2.172|
000036  f8d81010          LDR      r1,[r8,#0x10]
00003a  f0410110          ORR      r1,r1,#0x10
00003e  f8c81010          STR      r1,[r8,#0x10]
;;;848    
;;;849    #if defined(FLASH_WRP0_WRP0)
;;;850          if(WRP0_Data != 0xFFU)
000042  2cff              CMP      r4,#0xff
000044  d006              BEQ      |L2.84|
;;;851          {
;;;852            OB->WRP0 |= WRP0_Data;
000046  481a              LDR      r0,|L2.176|
000048  8801              LDRH     r1,[r0,#0]
00004a  4321              ORRS     r1,r1,r4
00004c  8001              STRH     r1,[r0,#0]
;;;853            
;;;854            /* Wait for last operation to be completed */
;;;855            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00004e  4648              MOV      r0,r9
000050  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L2.84|
;;;856          }
;;;857    #endif /* FLASH_WRP0_WRP0 */
;;;858    
;;;859    #if defined(FLASH_WRP1_WRP1)
;;;860          if((status == HAL_OK) && (WRP1_Data != 0xFFU))
000054  b948              CBNZ     r0,|L2.106|
000056  2dff              CMP      r5,#0xff
000058  d007              BEQ      |L2.106|
;;;861          {
;;;862            OB->WRP1 |= WRP1_Data;
00005a  4815              LDR      r0,|L2.176|
00005c  1c80              ADDS     r0,r0,#2
00005e  8801              LDRH     r1,[r0,#0]
000060  4329              ORRS     r1,r1,r5
000062  8001              STRH     r1,[r0,#0]
;;;863            
;;;864            /* Wait for last operation to be completed */
;;;865            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000064  4648              MOV      r0,r9
000066  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L2.106|
;;;866          }
;;;867    #endif /* FLASH_WRP1_WRP1 */
;;;868    
;;;869    #if defined(FLASH_WRP2_WRP2)
;;;870          if((status == HAL_OK) && (WRP2_Data != 0xFFU))
00006a  b948              CBNZ     r0,|L2.128|
00006c  2eff              CMP      r6,#0xff
00006e  d007              BEQ      |L2.128|
;;;871          {
;;;872            OB->WRP2 |= WRP2_Data;
000070  480f              LDR      r0,|L2.176|
000072  1d00              ADDS     r0,r0,#4
000074  8801              LDRH     r1,[r0,#0]
000076  4331              ORRS     r1,r1,r6
000078  8001              STRH     r1,[r0,#0]
;;;873            
;;;874            /* Wait for last operation to be completed */
;;;875            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00007a  4648              MOV      r0,r9
00007c  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L2.128|
;;;876          }
;;;877    #endif /* FLASH_WRP2_WRP2 */
;;;878    
;;;879    #if defined(FLASH_WRP3_WRP3)
;;;880          if((status == HAL_OK) && (WRP3_Data != 0xFFU))
000080  b948              CBNZ     r0,|L2.150|
000082  2fff              CMP      r7,#0xff
000084  d007              BEQ      |L2.150|
;;;881          {
;;;882            OB->WRP3 |= WRP3_Data;
000086  480a              LDR      r0,|L2.176|
000088  1d80              ADDS     r0,r0,#6
00008a  8801              LDRH     r1,[r0,#0]
00008c  4339              ORRS     r1,r1,r7
00008e  8001              STRH     r1,[r0,#0]
;;;883            
;;;884            /* Wait for last operation to be completed */
;;;885            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000090  4648              MOV      r0,r9
000092  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L2.150|
;;;886          }
;;;887    #endif /* FLASH_WRP3_WRP3 */
;;;888    
;;;889          /* if the program operation is completed, disable the OPTPG Bit */
;;;890          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
000096  f8d81010          LDR      r1,[r8,#0x10]
00009a  f0210110          BIC      r1,r1,#0x10
00009e  f8c81010          STR      r1,[r8,#0x10]
                  |L2.162|
;;;891        }
;;;892      }
;;;893      return status;
;;;894    }
0000a2  e8bd87f0          POP      {r4-r10,pc}
;;;895    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L2.168|
                          DCD      pFlash
                  |L2.172|
                          DCD      0x40022000
                  |L2.176|
                          DCD      0x1ffff808

                          AREA ||i.FLASH_OB_EnableWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_EnableWRP PROC
;;;661      */
;;;662    static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;663    {
000004  4604              MOV      r4,r0
;;;664      HAL_StatusTypeDef status = HAL_OK;
;;;665      uint16_t WRP0_Data = 0xFFFF;
;;;666    #if defined(FLASH_WRP1_WRP1)
;;;667      uint16_t WRP1_Data = 0xFFFF;
;;;668    #endif /* FLASH_WRP1_WRP1 */
;;;669    #if defined(FLASH_WRP2_WRP2)
;;;670      uint16_t WRP2_Data = 0xFFFF;
;;;671    #endif /* FLASH_WRP2_WRP2 */
;;;672    #if defined(FLASH_WRP3_WRP3)
;;;673      uint16_t WRP3_Data = 0xFFFF;
;;;674    #endif /* FLASH_WRP3_WRP3 */
;;;675      
;;;676      /* Check the parameters */
;;;677      assert_param(IS_OB_WRP(WriteProtectPage));
;;;678        
;;;679      /* Get current write protected pages and the new pages to be protected ******/
;;;680      WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
000006  f7fffffe          BL       FLASH_OB_GetWRP
00000a  43a0              BICS     r0,r0,r4
;;;681      
;;;682    #if defined(OB_WRP_PAGES0TO15MASK)
;;;683      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
;;;684    #elif defined(OB_WRP_PAGES0TO31MASK)
;;;685      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
00000c  b2c4              UXTB     r4,r0
;;;686    #endif /* OB_WRP_PAGES0TO31MASK */
;;;687      
;;;688    #if defined(OB_WRP_PAGES16TO31MASK)
;;;689      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
;;;690    #elif defined(OB_WRP_PAGES32TO63MASK)
;;;691      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
00000e  f3c02507          UBFX     r5,r0,#8,#8
;;;692    #endif /* OB_WRP_PAGES32TO63MASK */
;;;693     
;;;694    #if defined(OB_WRP_PAGES64TO95MASK)
;;;695      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
000012  f3c04607          UBFX     r6,r0,#16,#8
;;;696    #endif /* OB_WRP_PAGES64TO95MASK */
;;;697    #if defined(OB_WRP_PAGES32TO47MASK)
;;;698      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
;;;699    #endif /* OB_WRP_PAGES32TO47MASK */
;;;700    
;;;701    #if defined(OB_WRP_PAGES96TO127MASK)
;;;702      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
000016  0e07              LSRS     r7,r0,#24
;;;703    #elif defined(OB_WRP_PAGES48TO255MASK)
;;;704      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24U); 
;;;705    #elif defined(OB_WRP_PAGES48TO511MASK)
;;;706      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO511MASK) >> 24U); 
;;;707    #elif defined(OB_WRP_PAGES48TO127MASK)
;;;708      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
;;;709    #endif /* OB_WRP_PAGES96TO127MASK */
;;;710      
;;;711      /* Wait for last operation to be completed */
;;;712      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000018  f24c3950          MOV      r9,#0xc350
00001c  4648              MOV      r0,r9
00001e  f7fffffe          BL       FLASH_WaitForLastOperation
;;;713    
;;;714      if(status == HAL_OK)
000022  2800              CMP      r0,#0
000024  d13d              BNE      |L3.162|
;;;715      { 
;;;716        /* Clean the error context */
;;;717        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000026  4920              LDR      r1,|L3.168|
000028  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;718    
;;;719        /* To be able to write again option byte, need to perform a option byte erase */
;;;720        status = HAL_FLASHEx_OBErase();
00002a  f7fffffe          BL       HAL_FLASHEx_OBErase
;;;721        if (status == HAL_OK)  
00002e  2800              CMP      r0,#0
000030  d137              BNE      |L3.162|
;;;722        {
;;;723          /* Enable write protection */
;;;724          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
000032  f8df8078          LDR      r8,|L3.172|
000036  f8d81010          LDR      r1,[r8,#0x10]
00003a  f0410110          ORR      r1,r1,#0x10
00003e  f8c81010          STR      r1,[r8,#0x10]
;;;725    
;;;726    #if defined(FLASH_WRP0_WRP0)
;;;727          if(WRP0_Data != 0xFFU)
000042  2cff              CMP      r4,#0xff
000044  d006              BEQ      |L3.84|
;;;728          {
;;;729            OB->WRP0 &= WRP0_Data;
000046  481a              LDR      r0,|L3.176|
000048  8801              LDRH     r1,[r0,#0]
00004a  4021              ANDS     r1,r1,r4
00004c  8001              STRH     r1,[r0,#0]
;;;730            
;;;731            /* Wait for last operation to be completed */
;;;732            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00004e  4648              MOV      r0,r9
000050  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L3.84|
;;;733          }
;;;734    #endif /* FLASH_WRP0_WRP0 */
;;;735    
;;;736    #if defined(FLASH_WRP1_WRP1)
;;;737          if((status == HAL_OK) && (WRP1_Data != 0xFFU))
000054  b948              CBNZ     r0,|L3.106|
000056  2dff              CMP      r5,#0xff
000058  d007              BEQ      |L3.106|
;;;738          {
;;;739            OB->WRP1 &= WRP1_Data;
00005a  4815              LDR      r0,|L3.176|
00005c  1c80              ADDS     r0,r0,#2
00005e  8801              LDRH     r1,[r0,#0]
000060  4029              ANDS     r1,r1,r5
000062  8001              STRH     r1,[r0,#0]
;;;740            
;;;741            /* Wait for last operation to be completed */
;;;742            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000064  4648              MOV      r0,r9
000066  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L3.106|
;;;743          }
;;;744    #endif /* FLASH_WRP1_WRP1 */
;;;745    
;;;746    #if defined(FLASH_WRP2_WRP2)
;;;747          if((status == HAL_OK) && (WRP2_Data != 0xFFU))
00006a  b948              CBNZ     r0,|L3.128|
00006c  2eff              CMP      r6,#0xff
00006e  d007              BEQ      |L3.128|
;;;748          {
;;;749            OB->WRP2 &= WRP2_Data;
000070  480f              LDR      r0,|L3.176|
000072  1d00              ADDS     r0,r0,#4
000074  8801              LDRH     r1,[r0,#0]
000076  4031              ANDS     r1,r1,r6
000078  8001              STRH     r1,[r0,#0]
;;;750            
;;;751            /* Wait for last operation to be completed */
;;;752            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00007a  4648              MOV      r0,r9
00007c  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L3.128|
;;;753          }
;;;754    #endif /* FLASH_WRP2_WRP2 */
;;;755    
;;;756    #if defined(FLASH_WRP3_WRP3)
;;;757          if((status == HAL_OK) && (WRP3_Data != 0xFFU))
000080  b948              CBNZ     r0,|L3.150|
000082  2fff              CMP      r7,#0xff
000084  d007              BEQ      |L3.150|
;;;758          {
;;;759            OB->WRP3 &= WRP3_Data;
000086  480a              LDR      r0,|L3.176|
000088  1d80              ADDS     r0,r0,#6
00008a  8801              LDRH     r1,[r0,#0]
00008c  4039              ANDS     r1,r1,r7
00008e  8001              STRH     r1,[r0,#0]
;;;760            
;;;761            /* Wait for last operation to be completed */
;;;762            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000090  4648              MOV      r0,r9
000092  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L3.150|
;;;763          }
;;;764    #endif /* FLASH_WRP3_WRP3 */
;;;765    
;;;766          /* if the program operation is completed, disable the OPTPG Bit */
;;;767          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
000096  f8d81010          LDR      r1,[r8,#0x10]
00009a  f0210110          BIC      r1,r1,#0x10
00009e  f8c81010          STR      r1,[r8,#0x10]
                  |L3.162|
;;;768        }
;;;769      }
;;;770      
;;;771      return status;
;;;772    }
0000a2  e8bd87f0          POP      {r4-r10,pc}
;;;773    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L3.168|
                          DCD      pFlash
                  |L3.172|
                          DCD      0x40022000
                  |L3.176|
                          DCD      0x1ffff808

                          AREA ||i.FLASH_OB_GetRDP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetRDP PROC
;;;1051     */
;;;1052   static uint32_t FLASH_OB_GetRDP(void)
000000  20a5              MOVS     r0,#0xa5
;;;1053   {
;;;1054     uint32_t readstatus = OB_RDP_LEVEL_0;
;;;1055     uint32_t tmp_reg = 0U;
;;;1056     
;;;1057     /* Read RDP level bits */
;;;1058     tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
000002  4904              LDR      r1,|L4.20|
000004  69c9              LDR      r1,[r1,#0x1c]
000006  f0010102          AND      r1,r1,#2
;;;1059   
;;;1060     if (tmp_reg == FLASH_OBR_RDPRT)
00000a  2902              CMP      r1,#2
00000c  d100              BNE      |L4.16|
;;;1061     {
;;;1062       readstatus = OB_RDP_LEVEL_1;
00000e  2000              MOVS     r0,#0
                  |L4.16|
;;;1063     }
;;;1064     else 
;;;1065     {
;;;1066       readstatus = OB_RDP_LEVEL_0;
;;;1067     }
;;;1068   
;;;1069     return readstatus;
;;;1070   }
000010  4770              BX       lr
;;;1071   
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_GetUser||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetUser PROC
;;;1077     */
;;;1078   static uint8_t FLASH_OB_GetUser(void)
000000  4802              LDR      r0,|L5.12|
;;;1079   {
;;;1080     /* Return the User Option Byte */
;;;1081     return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
000002  69c0              LDR      r0,[r0,#0x1c]
000004  f3c00082          UBFX     r0,r0,#2,#3
;;;1082   }
000008  4770              BX       lr
;;;1083   
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_GetWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetWRP PROC
;;;1038     */
;;;1039   static uint32_t FLASH_OB_GetWRP(void)
000000  4801              LDR      r0,|L6.8|
;;;1040   {
;;;1041     /* Return the FLASH write protection Register value */
;;;1042     return (uint32_t)(READ_REG(FLASH->WRPR));
000002  6a00              LDR      r0,[r0,#0x20]
;;;1043   }
000004  4770              BX       lr
;;;1044   
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_ProgramData||, CODE, READONLY, ALIGN=2

                  FLASH_OB_ProgramData PROC
;;;1005     */
;;;1006   static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1007   {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
;;;1008     HAL_StatusTypeDef status = HAL_ERROR;
;;;1009     
;;;1010     /* Check the parameters */
;;;1011     assert_param(IS_OB_DATA_ADDRESS(Address));
;;;1012     
;;;1013     /* Wait for last operation to be completed */
;;;1014     status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000008  f24c3750          MOV      r7,#0xc350
00000c  4638              MOV      r0,r7
00000e  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1015     
;;;1016     if(status == HAL_OK)
000012  2800              CMP      r0,#0
000014  d10e              BNE      |L7.52|
;;;1017     {
;;;1018       /* Clean the error context */
;;;1019       pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000016  4908              LDR      r1,|L7.56|
000018  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;1020   
;;;1021       /* Enables the Option Bytes Programming operation */
;;;1022       SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
00001a  4c08              LDR      r4,|L7.60|
00001c  6920              LDR      r0,[r4,#0x10]
00001e  f0400010          ORR      r0,r0,#0x10
000022  6120              STR      r0,[r4,#0x10]
;;;1023       *(__IO uint16_t*)Address = Data;
000024  8035              STRH     r5,[r6,#0]
;;;1024       
;;;1025       /* Wait for last operation to be completed */
;;;1026       status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000026  4638              MOV      r0,r7
000028  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1027       
;;;1028       /* If the program operation is completed, disable the OPTPG Bit */
;;;1029       CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
00002c  6921              LDR      r1,[r4,#0x10]
00002e  f0210110          BIC      r1,r1,#0x10
000032  6121              STR      r1,[r4,#0x10]
                  |L7.52|
;;;1030     }
;;;1031     /* Return the Option Byte Data Program Status */
;;;1032     return status;
;;;1033   }
000034  e8bd81f0          POP      {r4-r8,pc}
;;;1034   
                          ENDP

                  |L7.56|
                          DCD      pFlash
                  |L7.60|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_RDP_LevelConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_RDP_LevelConfig PROC
;;;903      */
;;;904    static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
000000  b570              PUSH     {r4-r6,lr}
;;;905    {
000002  4605              MOV      r5,r0
;;;906      HAL_StatusTypeDef status = HAL_OK;
;;;907      
;;;908      /* Check the parameters */
;;;909      assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
;;;910      
;;;911      /* Wait for last operation to be completed */
;;;912      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000004  f24c3650          MOV      r6,#0xc350
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;913      
;;;914      if(status == HAL_OK)
00000e  2800              CMP      r0,#0
000010  d120              BNE      |L8.84|
;;;915      { 
;;;916        /* Clean the error context */
;;;917        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000012  4911              LDR      r1,|L8.88|
000014  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;918        
;;;919        /* If the previous operation is completed, proceed to erase the option bytes */
;;;920        SET_BIT(FLASH->CR, FLASH_CR_OPTER);
000016  4c11              LDR      r4,|L8.92|
000018  6920              LDR      r0,[r4,#0x10]
00001a  f0400020          ORR      r0,r0,#0x20
00001e  6120              STR      r0,[r4,#0x10]
;;;921        SET_BIT(FLASH->CR, FLASH_CR_STRT);
000020  6920              LDR      r0,[r4,#0x10]
000022  f0400040          ORR      r0,r0,#0x40
000026  6120              STR      r0,[r4,#0x10]
;;;922    
;;;923        /* Wait for last operation to be completed */
;;;924        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;925    
;;;926        /* If the erase operation is completed, disable the OPTER Bit */
;;;927        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
00002e  6921              LDR      r1,[r4,#0x10]
000030  f0210120          BIC      r1,r1,#0x20
000034  6121              STR      r1,[r4,#0x10]
;;;928    
;;;929        if(status == HAL_OK)
000036  2800              CMP      r0,#0
000038  d10c              BNE      |L8.84|
;;;930        {
;;;931          /* Enable the Option Bytes Programming operation */
;;;932          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
00003a  6920              LDR      r0,[r4,#0x10]
00003c  f0400010          ORR      r0,r0,#0x10
000040  6120              STR      r0,[r4,#0x10]
;;;933          
;;;934          WRITE_REG(OB->RDP, ReadProtectLevel);
000042  4807              LDR      r0,|L8.96|
000044  8005              STRH     r5,[r0,#0]
;;;935          
;;;936          /* Wait for last operation to be completed */
;;;937          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       FLASH_WaitForLastOperation
;;;938          
;;;939          /* if the program operation is completed, disable the OPTPG Bit */
;;;940          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
00004c  6921              LDR      r1,[r4,#0x10]
00004e  f0210110          BIC      r1,r1,#0x10
000052  6121              STR      r1,[r4,#0x10]
                  |L8.84|
;;;941        }
;;;942      }
;;;943      
;;;944      return status;
;;;945    }
000054  bd70              POP      {r4-r6,pc}
;;;946    
                          ENDP

000056  0000              DCW      0x0000
                  |L8.88|
                          DCD      pFlash
                  |L8.92|
                          DCD      0x40022000
                  |L8.96|
                          DCD      0x1ffff800

                          AREA ||i.FLASH_OB_UserConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_UserConfig PROC
;;;954      */
;;;955    static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
000000  b570              PUSH     {r4-r6,lr}
;;;956    {
000002  4605              MOV      r5,r0
;;;957      HAL_StatusTypeDef status = HAL_OK;
;;;958    
;;;959      /* Check the parameters */
;;;960      assert_param(IS_OB_IWDG_SOURCE((UserConfig&OB_IWDG_SW)));
;;;961      assert_param(IS_OB_STOP_SOURCE((UserConfig&OB_STOP_NO_RST)));
;;;962      assert_param(IS_OB_STDBY_SOURCE((UserConfig&OB_STDBY_NO_RST)));
;;;963    #if defined(FLASH_BANK2_END)
;;;964      assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
;;;965    #endif /* FLASH_BANK2_END */
;;;966    
;;;967      /* Wait for last operation to be completed */
;;;968      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000004  f24c3650          MOV      r6,#0xc350
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;969      
;;;970      if(status == HAL_OK)
00000e  2800              CMP      r0,#0
000010  d111              BNE      |L9.54|
;;;971      {     
;;;972        /* Clean the error context */
;;;973        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000012  4909              LDR      r1,|L9.56|
000014  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;974    
;;;975        /* Enable the Option Bytes Programming operation */
;;;976        SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
000016  4c09              LDR      r4,|L9.60|
000018  6920              LDR      r0,[r4,#0x10]
00001a  f0400010          ORR      r0,r0,#0x10
00001e  6120              STR      r0,[r4,#0x10]
;;;977     
;;;978    #if defined(FLASH_BANK2_END)
;;;979        OB->USER = (UserConfig | 0xF0U);
;;;980    #else
;;;981        OB->USER = (UserConfig | 0x88U);
000020  4907              LDR      r1,|L9.64|
000022  f0450088          ORR      r0,r5,#0x88
000026  8008              STRH     r0,[r1,#0]
;;;982    #endif /* FLASH_BANK2_END */
;;;983    
;;;984        /* Wait for last operation to be completed */
;;;985        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;986    
;;;987        /* if the program operation is completed, disable the OPTPG Bit */
;;;988        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
00002e  6921              LDR      r1,[r4,#0x10]
000030  f0210110          BIC      r1,r1,#0x10
000034  6121              STR      r1,[r4,#0x10]
                  |L9.54|
;;;989      }
;;;990      
;;;991      return status; 
;;;992    }
000036  bd70              POP      {r4-r6,pc}
;;;993    
                          ENDP

                  |L9.56|
                          DCD      pFlash
                  |L9.60|
                          DCD      0x40022000
                  |L9.64|
                          DCD      0x1ffff802

                          AREA ||i.FLASH_PageErase||, CODE, READONLY, ALIGN=2

                  FLASH_PageErase PROC
;;;1106     */
;;;1107   void FLASH_PageErase(uint32_t PageAddress)
000000  4a06              LDR      r2,|L10.28|
;;;1108   {
;;;1109     /* Clean the error context */
;;;1110     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000002  2100              MOVS     r1,#0
000004  61d1              STR      r1,[r2,#0x1c]  ; pFlash
;;;1111   
;;;1112   #if defined(FLASH_BANK2_END)
;;;1113     if(PageAddress > FLASH_BANK1_END)
;;;1114     { 
;;;1115       /* Proceed to erase the page */
;;;1116       SET_BIT(FLASH->CR2, FLASH_CR2_PER);
;;;1117       WRITE_REG(FLASH->AR2, PageAddress);
;;;1118       SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
;;;1119     }
;;;1120     else
;;;1121     {
;;;1122   #endif /* FLASH_BANK2_END */
;;;1123       /* Proceed to erase the page */
;;;1124       SET_BIT(FLASH->CR, FLASH_CR_PER);
000006  4906              LDR      r1,|L10.32|
000008  690a              LDR      r2,[r1,#0x10]
00000a  f0420202          ORR      r2,r2,#2
00000e  610a              STR      r2,[r1,#0x10]
;;;1125       WRITE_REG(FLASH->AR, PageAddress);
000010  6148              STR      r0,[r1,#0x14]
;;;1126       SET_BIT(FLASH->CR, FLASH_CR_STRT);
000012  6908              LDR      r0,[r1,#0x10]
000014  f0400040          ORR      r0,r0,#0x40
000018  6108              STR      r0,[r1,#0x10]
;;;1127   #if defined(FLASH_BANK2_END)
;;;1128     }
;;;1129   #endif /* FLASH_BANK2_END */
;;;1130   }
00001a  4770              BX       lr
;;;1131   
                          ENDP

                  |L10.28|
                          DCD      pFlash
                  |L10.32|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_Erase||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase PROC
;;;176      */
;;;177    HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;178    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
;;;179      HAL_StatusTypeDef status = HAL_ERROR;
000008  f04f0a01          MOV      r10,#1
;;;180      uint32_t address = 0U;
;;;181    
;;;182      /* Process Locked */
;;;183      __HAL_LOCK(&pFlash);
00000c  f8df8090          LDR      r8,|L11.160|
000010  f8980018          LDRB     r0,[r8,#0x18]  ; pFlash
000014  2801              CMP      r0,#1
000016  d00d              BEQ      |L11.52|
000018  2001              MOVS     r0,#1
00001a  f8880018          STRB     r0,[r8,#0x18]
;;;184    
;;;185      /* Check the parameters */
;;;186      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;187    
;;;188      if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
00001e  6828              LDR      r0,[r5,#0]
;;;189      {
;;;190    #if defined(FLASH_BANK2_END)
;;;191        if (pEraseInit->Banks == FLASH_BANK_BOTH)
;;;192        {
;;;193          /* Mass Erase requested for Bank1 and Bank2 */
;;;194          /* Wait for last operation to be completed */
;;;195          if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
;;;196              (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
;;;197          {
;;;198            /*Mass erase to be done*/
;;;199            FLASH_MassErase(FLASH_BANK_BOTH);
;;;200            
;;;201            /* Wait for last operation to be completed */
;;;202            if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
;;;203                (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
;;;204            {
;;;205              status = HAL_OK;
;;;206            }
;;;207            
;;;208            /* If the erase operation is completed, disable the MER Bit */
;;;209            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
;;;210            CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;211          }
;;;212        }
;;;213        else if (pEraseInit->Banks == FLASH_BANK_2)
;;;214        {
;;;215          /* Mass Erase requested for Bank2 */
;;;216          /* Wait for last operation to be completed */
;;;217          if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;218          {
;;;219            /*Mass erase to be done*/
;;;220            FLASH_MassErase(FLASH_BANK_2);
;;;221            
;;;222            /* Wait for last operation to be completed */
;;;223            status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
;;;224            
;;;225            /* If the erase operation is completed, disable the MER Bit */
;;;226            CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;227          }
;;;228        }
;;;229        else 
;;;230    #endif /* FLASH_BANK2_END */
;;;231        {
;;;232          /* Mass Erase requested for Bank1 */
;;;233          /* Wait for last operation to be completed */
;;;234          if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;235          {
;;;236            /*Mass erase to be done*/
;;;237            FLASH_MassErase(FLASH_BANK_1);
;;;238            
;;;239            /* Wait for last operation to be completed */
;;;240            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;241            
;;;242            /* If the erase operation is completed, disable the MER Bit */
;;;243            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
000020  4e20              LDR      r6,|L11.164|
000022  f24c3950          MOV      r9,#0xc350            ;234
000026  2802              CMP      r0,#2                 ;188
000028  d007              BEQ      |L11.58|
;;;244          }
;;;245        }
;;;246      }
;;;247      else
;;;248      {
;;;249        /* Page Erase is requested */
;;;250        /* Check the parameters */
;;;251        assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
;;;252        assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
;;;253        
;;;254    #if defined(FLASH_BANK2_END)
;;;255        /* Page Erase requested on address located on bank2 */
;;;256        if(pEraseInit->PageAddress > FLASH_BANK1_END)
;;;257        {   
;;;258          /* Wait for last operation to be completed */
;;;259          if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;260          {
;;;261            /*Initialization of PageError variable*/
;;;262            *PageError = 0xFFFFFFFFU;
;;;263            
;;;264            /* Erase by page by page to be done*/
;;;265            for(address = pEraseInit->PageAddress;
;;;266                address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
;;;267                address += FLASH_PAGE_SIZE)
;;;268            {
;;;269              FLASH_PageErase(address);
;;;270              
;;;271              /* Wait for last operation to be completed */
;;;272              status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
;;;273              
;;;274              /* If the erase operation is completed, disable the PER Bit */
;;;275              CLEAR_BIT(FLASH->CR2, FLASH_CR2_PER);
;;;276              
;;;277              if (status != HAL_OK)
;;;278              {
;;;279                /* In case of error, stop erase procedure and return the faulty address */
;;;280                *PageError = address;
;;;281                break;
;;;282              }
;;;283            }
;;;284          }
;;;285        }
;;;286        else
;;;287    #endif /* FLASH_BANK2_END */
;;;288       {
;;;289          /* Page Erase requested on address located on bank1 */
;;;290          /* Wait for last operation to be completed */
;;;291          if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
00002a  4648              MOV      r0,r9
00002c  f7fffffe          BL       FLASH_WaitForLastOperation
000030  b198              CBZ      r0,|L11.90|
000032  e02f              B        |L11.148|
                  |L11.52|
000034  2002              MOVS     r0,#2                 ;183
                  |L11.54|
;;;292          {
;;;293            /*Initialization of PageError variable*/
;;;294            *PageError = 0xFFFFFFFFU;
;;;295            
;;;296            /* Erase page by page to be done*/
;;;297            for(address = pEraseInit->PageAddress;
;;;298                address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
;;;299                address += FLASH_PAGE_SIZE)
;;;300            {
;;;301              FLASH_PageErase(address);
;;;302              
;;;303              /* Wait for last operation to be completed */
;;;304              status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;305              
;;;306              /* If the erase operation is completed, disable the PER Bit */
;;;307              CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
;;;308              
;;;309              if (status != HAL_OK)
;;;310              {
;;;311                /* In case of error, stop erase procedure and return the faulty address */
;;;312                *PageError = address;
;;;313                break;
;;;314              }
;;;315            }
;;;316          }
;;;317        }
;;;318      }
;;;319    
;;;320      /* Process Unlocked */
;;;321      __HAL_UNLOCK(&pFlash);
;;;322    
;;;323      return status;
;;;324    }
000036  e8bd87f0          POP      {r4-r10,pc}
                  |L11.58|
00003a  4648              MOV      r0,r9                 ;234
00003c  f7fffffe          BL       FLASH_WaitForLastOperation
000040  b9f8              CBNZ     r0,|L11.130|
000042  2001              MOVS     r0,#1                 ;237
000044  f7fffffe          BL       FLASH_MassErase
000048  4648              MOV      r0,r9                 ;240
00004a  f7fffffe          BL       FLASH_WaitForLastOperation
00004e  4682              MOV      r10,r0                ;240
000050  6930              LDR      r0,[r6,#0x10]         ;243
000052  f0200004          BIC      r0,r0,#4              ;243
000056  6130              STR      r0,[r6,#0x10]         ;243
000058  e01c              B        |L11.148|
                  |L11.90|
00005a  f04f30ff          MOV      r0,#0xffffffff        ;294
00005e  6038              STR      r0,[r7,#0]            ;294
000060  68ac              LDR      r4,[r5,#8]            ;297
000062  e011              B        |L11.136|
                  |L11.100|
000064  4620              MOV      r0,r4                 ;301
000066  f7fffffe          BL       FLASH_PageErase
00006a  4648              MOV      r0,r9                 ;304
00006c  f7fffffe          BL       FLASH_WaitForLastOperation
000070  4682              MOV      r10,r0                ;304
000072  6930              LDR      r0,[r6,#0x10]         ;307
000074  f0200002          BIC      r0,r0,#2              ;307
000078  6130              STR      r0,[r6,#0x10]         ;307
00007a  ea5f000a          MOVS     r0,r10                ;309
00007e  d001              BEQ      |L11.132|
000080  603c              STR      r4,[r7,#0]            ;312
                  |L11.130|
000082  e007              B        |L11.148|
                  |L11.132|
000084  f5046480          ADD      r4,r4,#0x400          ;299
                  |L11.136|
000088  e9d50102          LDRD     r0,r1,[r5,#8]         ;298
00008c  eb002081          ADD      r0,r0,r1,LSL #10      ;298
000090  42a0              CMP      r0,r4                 ;298
000092  d8e7              BHI      |L11.100|
                  |L11.148|
000094  2000              MOVS     r0,#0                 ;321
000096  f8880018          STRB     r0,[r8,#0x18]         ;321
00009a  4650              MOV      r0,r10                ;323
00009c  e7cb              B        |L11.54|
;;;325    
                          ENDP

00009e  0000              DCW      0x0000
                  |L11.160|
                          DCD      pFlash
                  |L11.164|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_Erase_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase_IT PROC
;;;336      */
;;;337    HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
000000  b570              PUSH     {r4-r6,lr}
;;;338    {
;;;339      HAL_StatusTypeDef status = HAL_OK;
000002  2400              MOVS     r4,#0
;;;340    
;;;341      /* Process Locked */
;;;342      __HAL_LOCK(&pFlash);
000004  4911              LDR      r1,|L12.76|
000006  7e0a              LDRB     r2,[r1,#0x18]  ; pFlash
000008  2a01              CMP      r2,#1
00000a  d005              BEQ      |L12.24|
00000c  2201              MOVS     r2,#1
00000e  760a              STRB     r2,[r1,#0x18]
;;;343    
;;;344      /* If procedure already ongoing, reject the next one */
;;;345      if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
000010  780b              LDRB     r3,[r1,#0]  ; pFlash
000012  b11b              CBZ      r3,|L12.28|
;;;346      {
;;;347        return HAL_ERROR;
000014  2001              MOVS     r0,#1
;;;348      }
;;;349      
;;;350      /* Check the parameters */
;;;351      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;352    
;;;353      /* Enable End of FLASH Operation and Error source interrupts */
;;;354      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
;;;355    
;;;356    #if defined(FLASH_BANK2_END)
;;;357      /* Enable End of FLASH Operation and Error source interrupts */
;;;358      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;359      
;;;360    #endif
;;;361      if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
;;;362      {
;;;363        /*Mass erase to be done*/
;;;364        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
;;;365            FLASH_MassErase(pEraseInit->Banks);
;;;366      }
;;;367      else
;;;368      {
;;;369        /* Erase by page to be done*/
;;;370    
;;;371        /* Check the parameters */
;;;372        assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
;;;373        assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
;;;374    
;;;375        pFlash.ProcedureOnGoing = FLASH_PROC_PAGEERASE;
;;;376        pFlash.DataRemaining = pEraseInit->NbPages;
;;;377        pFlash.Address = pEraseInit->PageAddress;
;;;378    
;;;379        /*Erase 1st page and wait for IT*/
;;;380        FLASH_PageErase(pEraseInit->PageAddress);
;;;381      }
;;;382    
;;;383      return status;
;;;384    }
000016  bd70              POP      {r4-r6,pc}
                  |L12.24|
000018  2002              MOVS     r0,#2                 ;342
00001a  bd70              POP      {r4-r6,pc}
                  |L12.28|
00001c  4b0c              LDR      r3,|L12.80|
00001e  691d              LDR      r5,[r3,#0x10]         ;354
000020  f44555a0          ORR      r5,r5,#0x1400         ;354
000024  611d              STR      r5,[r3,#0x10]         ;354
000026  6803              LDR      r3,[r0,#0]            ;361
000028  2b02              CMP      r3,#2                 ;361
00002a  d009              BEQ      |L12.64|
00002c  700a              STRB     r2,[r1,#0]            ;375
00002e  68c2              LDR      r2,[r0,#0xc]          ;376
000030  604a              STR      r2,[r1,#4]            ;376  ; pFlash
000032  6882              LDR      r2,[r0,#8]            ;377
000034  608a              STR      r2,[r1,#8]            ;377  ; pFlash
000036  6880              LDR      r0,[r0,#8]            ;380
000038  f7fffffe          BL       FLASH_PageErase
                  |L12.60|
00003c  4620              MOV      r0,r4                 ;383
00003e  bd70              POP      {r4-r6,pc}
                  |L12.64|
000040  2202              MOVS     r2,#2                 ;364
000042  700a              STRB     r2,[r1,#0]            ;364
000044  6840              LDR      r0,[r0,#4]            ;365
000046  f7fffffe          BL       FLASH_MassErase
00004a  e7f7              B        |L12.60|
;;;385    
                          ENDP

                  |L12.76|
                          DCD      pFlash
                  |L12.80|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_OBErase||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBErase PROC
;;;414    
;;;415    HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
000000  b570              PUSH     {r4-r6,lr}
;;;416    {
;;;417      uint8_t rdptmp = OB_RDP_LEVEL_0;
;;;418      HAL_StatusTypeDef status = HAL_ERROR;
;;;419    
;;;420      /* Get the actual read protection Option Byte value */
;;;421      rdptmp = FLASH_OB_GetRDP();
000002  f7fffffe          BL       FLASH_OB_GetRDP
000006  b2c5              UXTB     r5,r0
;;;422    
;;;423      /* Wait for last operation to be completed */
;;;424      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000008  f24c3650          MOV      r6,#0xc350
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       FLASH_WaitForLastOperation
;;;425    
;;;426      if(status == HAL_OK)
000012  2800              CMP      r0,#0
000014  d118              BNE      |L13.72|
;;;427      {
;;;428        /* Clean the error context */
;;;429        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000016  490d              LDR      r1,|L13.76|
000018  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;430    
;;;431        /* If the previous operation is completed, proceed to erase the option bytes */
;;;432        SET_BIT(FLASH->CR, FLASH_CR_OPTER);
00001a  4c0d              LDR      r4,|L13.80|
00001c  6920              LDR      r0,[r4,#0x10]
00001e  f0400020          ORR      r0,r0,#0x20
000022  6120              STR      r0,[r4,#0x10]
;;;433        SET_BIT(FLASH->CR, FLASH_CR_STRT);
000024  6920              LDR      r0,[r4,#0x10]
000026  f0400040          ORR      r0,r0,#0x40
00002a  6120              STR      r0,[r4,#0x10]
;;;434    
;;;435        /* Wait for last operation to be completed */
;;;436        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       FLASH_WaitForLastOperation
;;;437    
;;;438        /* If the erase operation is completed, disable the OPTER Bit */
;;;439        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
000032  6921              LDR      r1,[r4,#0x10]
000034  f0210120          BIC      r1,r1,#0x20
000038  6121              STR      r1,[r4,#0x10]
;;;440    
;;;441        if(status == HAL_OK)
00003a  2800              CMP      r0,#0
00003c  d104              BNE      |L13.72|
;;;442        {
;;;443          /* Restore the last read protection Option Byte value */
;;;444          status = FLASH_OB_RDP_LevelConfig(rdptmp);
00003e  4628              MOV      r0,r5
000040  e8bd4070          POP      {r4-r6,lr}
000044  f7ffbffe          B.W      FLASH_OB_RDP_LevelConfig
                  |L13.72|
;;;445        }
;;;446      }
;;;447    
;;;448      /* Return the erase status */
;;;449      return status;
;;;450    }
000048  bd70              POP      {r4-r6,pc}
;;;451    
                          ENDP

00004a  0000              DCW      0x0000
                  |L13.76|
                          DCD      pFlash
                  |L13.80|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_OBGetConfig||, CODE, READONLY, ALIGN=1

                  HAL_FLASHEx_OBGetConfig PROC
;;;544      */
;;;545    void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
000000  b510              PUSH     {r4,lr}
;;;546    {
000002  4604              MOV      r4,r0
;;;547      pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
000004  2007              MOVS     r0,#7
000006  6020              STR      r0,[r4,#0]
;;;548    
;;;549      /*Get WRP*/
;;;550      pOBInit->WRPPage = FLASH_OB_GetWRP();
000008  f7fffffe          BL       FLASH_OB_GetWRP
00000c  60a0              STR      r0,[r4,#8]
;;;551    
;;;552      /*Get RDP Level*/
;;;553      pOBInit->RDPLevel = FLASH_OB_GetRDP();
00000e  f7fffffe          BL       FLASH_OB_GetRDP
000012  7420              STRB     r0,[r4,#0x10]
;;;554    
;;;555      /*Get USER*/
;;;556      pOBInit->USERConfig = FLASH_OB_GetUser();
000014  f7fffffe          BL       FLASH_OB_GetUser
000018  7460              STRB     r0,[r4,#0x11]
;;;557    }
00001a  bd10              POP      {r4,pc}
;;;558    
                          ENDP


                          AREA ||i.HAL_FLASHEx_OBGetUserData||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBGetUserData PROC
;;;566      */
;;;567    uint32_t HAL_FLASHEx_OBGetUserData(uint32_t DATAAdress)
000000  4a05              LDR      r2,|L15.24|
;;;568    {
;;;569      uint32_t value = 0;
;;;570      
;;;571      if (DATAAdress == OB_DATA_ADDRESS_DATA0)
;;;572      {
;;;573        /* Get value programmed in OB USER Data0 */
;;;574        value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA0) >> FLASH_POSITION_OB_USERDATA0_BIT;
000002  4906              LDR      r1,|L15.28|
000004  4290              CMP      r0,r2                 ;571
000006  d103              BNE      |L15.16|
000008  69c8              LDR      r0,[r1,#0x1c]
00000a  f3c02087          UBFX     r0,r0,#10,#8
;;;575      }
;;;576      else
;;;577      {
;;;578        /* Get value programmed in OB USER Data1 */
;;;579        value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA1) >> FLASH_POSITION_OB_USERDATA1_BIT;
;;;580      }
;;;581      
;;;582      return value;
;;;583    }
00000e  4770              BX       lr
                  |L15.16|
000010  69c8              LDR      r0,[r1,#0x1c]         ;579
000012  f3c04087          UBFX     r0,r0,#18,#8          ;579
000016  4770              BX       lr
;;;584    
                          ENDP

                  |L15.24|
                          DCD      0x1ffff804
                  |L15.28|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_OBProgram||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBProgram PROC
;;;463      */
;;;464    HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
000000  b570              PUSH     {r4-r6,lr}
;;;465    {
000002  4604              MOV      r4,r0
;;;466      HAL_StatusTypeDef status = HAL_ERROR;
000004  2001              MOVS     r0,#1
;;;467    
;;;468      /* Process Locked */
;;;469      __HAL_LOCK(&pFlash);
000006  4d1c              LDR      r5,|L16.120|
000008  7e29              LDRB     r1,[r5,#0x18]  ; pFlash
00000a  2901              CMP      r1,#1
00000c  d00f              BEQ      |L16.46|
00000e  2101              MOVS     r1,#1
000010  7629              STRB     r1,[r5,#0x18]
;;;470    
;;;471      /* Check the parameters */
;;;472      assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
;;;473    
;;;474      /* Write protection configuration */
;;;475      if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
000012  7821              LDRB     r1,[r4,#0]
000014  f04f0600          MOV      r6,#0
000018  07c9              LSLS     r1,r1,#31
00001a  d00e              BEQ      |L16.58|
;;;476      {
;;;477        assert_param(IS_WRPSTATE(pOBInit->WRPState));
;;;478        if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
00001c  6860              LDR      r0,[r4,#4]
00001e  2801              CMP      r0,#1
000020  d007              BEQ      |L16.50|
;;;479        {
;;;480          /* Enable of Write protection on the selected page */
;;;481          status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
;;;482        }
;;;483        else
;;;484        {
;;;485          /* Disable of Write protection on the selected page */
;;;486          status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
000022  68a0              LDR      r0,[r4,#8]
000024  f7fffffe          BL       FLASH_OB_DisableWRP
                  |L16.40|
;;;487        }
;;;488        if (status != HAL_OK)
000028  b138              CBZ      r0,|L16.58|
;;;489        {
;;;490          /* Process Unlocked */
;;;491          __HAL_UNLOCK(&pFlash);
00002a  762e              STRB     r6,[r5,#0x18]
;;;492          return status;
;;;493        }
;;;494      }
;;;495    
;;;496      /* Read protection configuration */
;;;497      if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
;;;498      {
;;;499        status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
;;;500        if (status != HAL_OK)
;;;501        {
;;;502          /* Process Unlocked */
;;;503          __HAL_UNLOCK(&pFlash);
;;;504          return status;
;;;505        }
;;;506      }
;;;507    
;;;508      /* USER configuration */
;;;509      if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
;;;510      {
;;;511        status = FLASH_OB_UserConfig(pOBInit->USERConfig);
;;;512        if (status != HAL_OK)
;;;513        {
;;;514          /* Process Unlocked */
;;;515          __HAL_UNLOCK(&pFlash);
;;;516          return status;
;;;517        }
;;;518      }
;;;519    
;;;520      /* DATA configuration*/
;;;521      if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
;;;522      {
;;;523        status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
;;;524        if (status != HAL_OK)
;;;525        {
;;;526          /* Process Unlocked */
;;;527          __HAL_UNLOCK(&pFlash);
;;;528          return status;
;;;529        }
;;;530      }
;;;531    
;;;532      /* Process Unlocked */
;;;533      __HAL_UNLOCK(&pFlash);
;;;534    
;;;535      return status;
;;;536    }
00002c  bd70              POP      {r4-r6,pc}
                  |L16.46|
00002e  2002              MOVS     r0,#2                 ;469
000030  bd70              POP      {r4-r6,pc}
                  |L16.50|
000032  68a0              LDR      r0,[r4,#8]            ;481
000034  f7fffffe          BL       FLASH_OB_EnableWRP
000038  e7f6              B        |L16.40|
                  |L16.58|
00003a  7821              LDRB     r1,[r4,#0]            ;497
00003c  0789              LSLS     r1,r1,#30             ;497
00003e  d505              BPL      |L16.76|
000040  7c20              LDRB     r0,[r4,#0x10]         ;499
000042  f7fffffe          BL       FLASH_OB_RDP_LevelConfig
000046  b108              CBZ      r0,|L16.76|
000048  762e              STRB     r6,[r5,#0x18]         ;503
00004a  bd70              POP      {r4-r6,pc}
                  |L16.76|
00004c  7821              LDRB     r1,[r4,#0]            ;509
00004e  0749              LSLS     r1,r1,#29             ;509
000050  d505              BPL      |L16.94|
000052  7c60              LDRB     r0,[r4,#0x11]         ;511
000054  f7fffffe          BL       FLASH_OB_UserConfig
000058  b108              CBZ      r0,|L16.94|
00005a  762e              STRB     r6,[r5,#0x18]         ;515
00005c  bd70              POP      {r4-r6,pc}
                  |L16.94|
00005e  7821              LDRB     r1,[r4,#0]            ;521
000060  0709              LSLS     r1,r1,#28             ;521
000062  d506              BPL      |L16.114|
000064  7e21              LDRB     r1,[r4,#0x18]         ;523
000066  6960              LDR      r0,[r4,#0x14]         ;523
000068  f7fffffe          BL       FLASH_OB_ProgramData
00006c  b108              CBZ      r0,|L16.114|
00006e  762e              STRB     r6,[r5,#0x18]         ;527
000070  bd70              POP      {r4-r6,pc}
                  |L16.114|
000072  762e              STRB     r6,[r5,#0x18]         ;533
000074  bd70              POP      {r4-r6,pc}
;;;537    
                          ENDP

000076  0000              DCW      0x0000
                  |L16.120|
                          DCD      pFlash

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REVSH|
#line 402
|__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____RRX|
#line 587
|__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
