; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections -c --asm --interleave -ogsm_stm32f103\event_groups.o --asm_dir=..\..\list\ --list_dir=..\..\list\ --depend=gsm_stm32f103\event_groups.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I..\Hardware\SSD1306 -I..\Hardware\delay -I..\Hardware\GSM_LIB\GENERAL -I..\Hardware\GSM_LIB\USART -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM3 -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS -IE:\MC\2.STM32\STMProjects\GSM\GSM_M590\Project\gsm_stm32f103\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB ../Middlewares/Third_Party/FreeRTOS/Source/event_groups.c]
                          THUMB

                          AREA ||i.prvTestWaitCondition||, CODE, READONLY, ALIGN=1

                  prvTestWaitCondition PROC
;;;681    
;;;682    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
000000  4603              MOV      r3,r0
;;;683    {
;;;684    BaseType_t xWaitConditionMet = pdFALSE;
000002  2000              MOVS     r0,#0
;;;685    
;;;686    	if( xWaitForAllBits == pdFALSE )
000004  2a00              CMP      r2,#0
000006  d003              BEQ      |L1.16|
;;;687    	{
;;;688    		/* Task only has to wait for one bit within uxBitsToWaitFor to be
;;;689    		set.  Is one already set? */
;;;690    		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
;;;691    		{
;;;692    			xWaitConditionMet = pdTRUE;
;;;693    		}
;;;694    		else
;;;695    		{
;;;696    			mtCOVERAGE_TEST_MARKER();
;;;697    		}
;;;698    	}
;;;699    	else
;;;700    	{
;;;701    		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
;;;702    		Are they set already? */
;;;703    		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
000008  4399              BICS     r1,r1,r3
00000a  d100              BNE      |L1.14|
;;;704    		{
;;;705    			xWaitConditionMet = pdTRUE;
00000c  2001              MOVS     r0,#1
                  |L1.14|
;;;706    		}
;;;707    		else
;;;708    		{
;;;709    			mtCOVERAGE_TEST_MARKER();
;;;710    		}
;;;711    	}
;;;712    
;;;713    	return xWaitConditionMet;
;;;714    }
00000e  4770              BX       lr
                  |L1.16|
000010  420b              TST      r3,r1                 ;690
000012  d0fc              BEQ      |L1.14|
000014  2001              MOVS     r0,#1                 ;692
000016  4770              BX       lr
;;;715    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupClearBitsCallback||, CODE, READONLY, ALIGN=1

                  vEventGroupClearBitsCallback PROC
;;;675    an interrupt. */
;;;676    void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
000000  f7ffbffe          B.W      xEventGroupClearBits
;;;677    {
;;;678    	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
;;;679    }
;;;680    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupDelete||, CODE, READONLY, ALIGN=1

                  vEventGroupDelete PROC
;;;623    
;;;624    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;625    {
000004  4606              MOV      r6,r0
;;;626    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;627    const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
000006  1d34              ADDS     r4,r6,#4
;;;628    
;;;629    	vTaskSuspendAll();
000008  f7fffffe          BL       vTaskSuspendAll
;;;630    	{
;;;631    		traceEVENT_GROUP_DELETE( xEventGroup );
;;;632    
;;;633    		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
;;;634    		{
;;;635    			/* Unblock the task, returning 0 as the event list is being deleted
;;;636    			and	cannot therefore have any bits set. */
;;;637    			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
00000c  f1040508          ADD      r5,r4,#8
;;;638    			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
000010  f04f7700          MOV      r7,#0x2000000
000014  e00d              B        |L3.50|
                  |L3.22|
000016  68e0              LDR      r0,[r4,#0xc]          ;637
000018  42a8              CMP      r0,r5                 ;637
00001a  d107              BNE      |L3.44|
00001c  2050              MOVS     r0,#0x50              ;637
00001e  f3808811          MSR      BASEPRI,r0            ;637
000022  f3bf8f4f          DSB                            ;637
000026  f3bf8f6f          ISB                            ;637
                  |L3.42|
00002a  e7fe              B        |L3.42|
                  |L3.44|
00002c  4639              MOV      r1,r7
00002e  f7fffffe          BL       xTaskRemoveFromUnorderedEventList
                  |L3.50|
000032  6820              LDR      r0,[r4,#0]            ;633
000034  2800              CMP      r0,#0                 ;633
000036  d1ee              BNE      |L3.22|
;;;639    		}
;;;640    
;;;641    		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
;;;642    		{
;;;643    			/* The event group can only have been allocated dynamically - free
;;;644    			it again. */
;;;645    			vPortFree( pxEventBits );
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       vPortFree
;;;646    		}
;;;647    		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
;;;648    		{
;;;649    			/* The event group could have been allocated statically or
;;;650    			dynamically, so check before attempting to free the memory. */
;;;651    			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
;;;652    			{
;;;653    				vPortFree( pxEventBits );
;;;654    			}
;;;655    			else
;;;656    			{
;;;657    				mtCOVERAGE_TEST_MARKER();
;;;658    			}
;;;659    		}
;;;660    		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
;;;661    	}
;;;662    	( void ) xTaskResumeAll();
00003e  e8bd41f0          POP      {r4-r8,lr}
000042  f7ffbffe          B.W      xTaskResumeAll
;;;663    }
;;;664    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupSetBitsCallback||, CODE, READONLY, ALIGN=1

                  vEventGroupSetBitsCallback PROC
;;;667    an interrupt. */
;;;668    void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
000000  f7ffbffe          B.W      xEventGroupSetBits
;;;669    {
;;;670    	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
;;;671    }
;;;672    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupClearBits||, CODE, READONLY, ALIGN=1

                  xEventGroupClearBits PROC
;;;471    
;;;472    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
000000  b570              PUSH     {r4-r6,lr}
;;;473    {
000002  460e              MOV      r6,r1
;;;474    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000004  4604              MOV      r4,r0
;;;475    EventBits_t uxReturn;
;;;476    
;;;477    	/* Check the user is not attempting to clear the bits used by the kernel
;;;478    	itself. */
;;;479    	configASSERT( xEventGroup );
000006  2800              CMP      r0,#0
000008  d009              BEQ      |L5.30|
;;;480    	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
00000a  0e30              LSRS     r0,r6,#24
00000c  d00f              BEQ      |L5.46|
00000e  2050              MOVS     r0,#0x50
000010  f3808811          MSR      BASEPRI,r0
000014  f3bf8f4f          DSB      
000018  f3bf8f6f          ISB      
                  |L5.28|
00001c  e7fe              B        |L5.28|
                  |L5.30|
00001e  2050              MOVS     r0,#0x50
000020  f3808811          MSR      BASEPRI,r0
000024  f3bf8f4f          DSB      
000028  f3bf8f6f          ISB      
                  |L5.44|
00002c  e7fe              B        |L5.44|
                  |L5.46|
;;;481    
;;;482    	taskENTER_CRITICAL();
00002e  f7fffffe          BL       vPortEnterCritical
;;;483    	{
;;;484    		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
;;;485    
;;;486    		/* The value returned is the event group value prior to the bits being
;;;487    		cleared. */
;;;488    		uxReturn = pxEventBits->uxEventBits;
000032  6825              LDR      r5,[r4,#0]
;;;489    
;;;490    		/* Clear the bits. */
;;;491    		pxEventBits->uxEventBits &= ~uxBitsToClear;
000034  ea250006          BIC      r0,r5,r6
000038  6020              STR      r0,[r4,#0]
;;;492    	}
;;;493    	taskEXIT_CRITICAL();
00003a  f7fffffe          BL       vPortExitCritical
;;;494    
;;;495    	return uxReturn;
00003e  4628              MOV      r0,r5
;;;496    }
000040  bd70              POP      {r4-r6,pc}
;;;497    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupCreate||, CODE, READONLY, ALIGN=1

                  xEventGroupCreate PROC
;;;173    
;;;174    	EventGroupHandle_t xEventGroupCreate( void )
000000  b510              PUSH     {r4,lr}
;;;175    	{
;;;176    	EventGroup_t *pxEventBits;
;;;177    
;;;178    		/* Allocate the event group. */
;;;179    		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
000002  2018              MOVS     r0,#0x18
000004  f7fffffe          BL       pvPortMalloc
000008  4604              MOV      r4,r0
;;;180    
;;;181    		if( pxEventBits != NULL )
00000a  b124              CBZ      r4,|L6.22|
;;;182    		{
;;;183    			pxEventBits->uxEventBits = 0;
00000c  2000              MOVS     r0,#0
00000e  6020              STR      r0,[r4,#0]
;;;184    			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
000010  1d20              ADDS     r0,r4,#4
000012  f7fffffe          BL       vListInitialise
                  |L6.22|
;;;185    
;;;186    			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;187    			{
;;;188    				/* Both static and dynamic allocation can be used, so note this
;;;189    				event group was allocated statically in case the event group is
;;;190    				later deleted. */
;;;191    				pxEventBits->ucStaticallyAllocated = pdFALSE;
;;;192    			}
;;;193    			#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;194    
;;;195    			traceEVENT_GROUP_CREATE( pxEventBits );
;;;196    		}
;;;197    		else
;;;198    		{
;;;199    			traceEVENT_GROUP_CREATE_FAILED();
;;;200    		}
;;;201    
;;;202    		return ( EventGroupHandle_t ) pxEventBits;
000016  4620              MOV      r0,r4
;;;203    	}
000018  bd10              POP      {r4,pc}
;;;204    
                          ENDP


                          AREA ||i.xEventGroupGetBitsFromISR||, CODE, READONLY, ALIGN=1

                  xEventGroupGetBitsFromISR PROC
;;;513    
;;;514    EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
000000  2250              MOVS     r2,#0x50
000002  f3ef8111          MRS      r1,BASEPRI
000006  f3828811          MSR      BASEPRI,r2
00000a  f3bf8f4f          DSB      
00000e  f3bf8f6f          ISB      
;;;515    {
;;;516    UBaseType_t uxSavedInterruptStatus;
;;;517    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;518    EventBits_t uxReturn;
;;;519    
;;;520    	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
;;;521    	{
;;;522    		uxReturn = pxEventBits->uxEventBits;
000012  6800              LDR      r0,[r0,#0]
000014  f3818811          MSR      BASEPRI,r1
;;;523    	}
;;;524    	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;525    
;;;526    	return uxReturn;
;;;527    }
000018  4770              BX       lr
;;;528    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupSetBits||, CODE, READONLY, ALIGN=1

                  xEventGroupSetBits PROC
;;;529    
;;;530    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;531    {
000004  4688              MOV      r8,r1
;;;532    ListItem_t *pxListItem, *pxNext;
;;;533    ListItem_t const *pxListEnd;
;;;534    List_t *pxList;
;;;535    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
000006  2500              MOVS     r5,#0
;;;536    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000008  4604              MOV      r4,r0
;;;537    BaseType_t xMatchFound = pdFALSE;
;;;538    
;;;539    	/* Check the user is not attempting to set the bits used by the kernel
;;;540    	itself. */
;;;541    	configASSERT( xEventGroup );
00000a  2800              CMP      r0,#0
00000c  d00a              BEQ      |L8.36|
;;;542    	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
00000e  ea5f6018          LSRS     r0,r8,#24
000012  d00f              BEQ      |L8.52|
000014  2050              MOVS     r0,#0x50
000016  f3808811          MSR      BASEPRI,r0
00001a  f3bf8f4f          DSB      
00001e  f3bf8f6f          ISB      
                  |L8.34|
000022  e7fe              B        |L8.34|
                  |L8.36|
000024  2050              MOVS     r0,#0x50
000026  f3808811          MSR      BASEPRI,r0
00002a  f3bf8f4f          DSB      
00002e  f3bf8f6f          ISB      
                  |L8.50|
000032  e7fe              B        |L8.50|
                  |L8.52|
;;;543    
;;;544    	pxList = &( pxEventBits->xTasksWaitingForBits );
000034  1d26              ADDS     r6,r4,#4
;;;545    	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
000036  f1060708          ADD      r7,r6,#8
;;;546    	vTaskSuspendAll();
00003a  f7fffffe          BL       vTaskSuspendAll
;;;547    	{
;;;548    		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
;;;549    
;;;550    		pxListItem = listGET_HEAD_ENTRY( pxList );
00003e  68f0              LDR      r0,[r6,#0xc]
;;;551    
;;;552    		/* Set the bits. */
;;;553    		pxEventBits->uxEventBits |= uxBitsToSet;
000040  6821              LDR      r1,[r4,#0]
000042  ea410108          ORR      r1,r1,r8
000046  6021              STR      r1,[r4,#0]
;;;554    
;;;555    		/* See if the new bit value should unblock any tasks. */
;;;556    		while( pxListItem != pxListEnd )
000048  e020              B        |L8.140|
                  |L8.74|
;;;557    		{
;;;558    			pxNext = listGET_NEXT( pxListItem );
00004a  6846              LDR      r6,[r0,#4]
;;;559    			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
00004c  6801              LDR      r1,[r0,#0]
;;;560    			xMatchFound = pdFALSE;
00004e  2200              MOVS     r2,#0
;;;561    
;;;562    			/* Split the bits waited for from the control bits. */
;;;563    			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
000050  f001437f          AND      r3,r1,#0xff000000
;;;564    			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
000054  f021417f          BIC      r1,r1,#0xff000000
;;;565    
;;;566    			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
000058  ea5f1c43          LSLS     r12,r3,#5
00005c  d406              BMI      |L8.108|
;;;567    			{
;;;568    				/* Just looking for single bit being set. */
;;;569    				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
00005e  f8d4c000          LDR      r12,[r4,#0]
000062  ea1c0f01          TST      r12,r1
000066  d007              BEQ      |L8.120|
;;;570    				{
;;;571    					xMatchFound = pdTRUE;
000068  2201              MOVS     r2,#1
00006a  e005              B        |L8.120|
                  |L8.108|
;;;572    				}
;;;573    				else
;;;574    				{
;;;575    					mtCOVERAGE_TEST_MARKER();
;;;576    				}
;;;577    			}
;;;578    			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
00006c  f8d4c000          LDR      r12,[r4,#0]
000070  ea310c0c          BICS     r12,r1,r12
000074  d100              BNE      |L8.120|
;;;579    			{
;;;580    				/* All bits are set. */
;;;581    				xMatchFound = pdTRUE;
000076  2201              MOVS     r2,#1
                  |L8.120|
;;;582    			}
;;;583    			else
;;;584    			{
;;;585    				/* Need all bits to be set, but not all the bits were set. */
;;;586    			}
;;;587    
;;;588    			if( xMatchFound != pdFALSE )
000078  b13a              CBZ      r2,|L8.138|
;;;589    			{
;;;590    				/* The bits match.  Should the bits be cleared on exit? */
;;;591    				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
00007a  01da              LSLS     r2,r3,#7
00007c  d500              BPL      |L8.128|
;;;592    				{
;;;593    					uxBitsToClear |= uxBitsWaitedFor;
00007e  430d              ORRS     r5,r5,r1
                  |L8.128|
;;;594    				}
;;;595    				else
;;;596    				{
;;;597    					mtCOVERAGE_TEST_MARKER();
;;;598    				}
;;;599    
;;;600    				/* Store the actual event flag value in the task's event list
;;;601    				item before removing the task from the event list.  The
;;;602    				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
;;;603    				that is was unblocked due to its required bits matching, rather
;;;604    				than because it timed out. */
;;;605    				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
000080  6821              LDR      r1,[r4,#0]
000082  f0417100          ORR      r1,r1,#0x2000000
000086  f7fffffe          BL       xTaskRemoveFromUnorderedEventList
                  |L8.138|
;;;606    			}
;;;607    
;;;608    			/* Move onto the next list item.  Note pxListItem->pxNext is not
;;;609    			used here as the list item may have been removed from the event list
;;;610    			and inserted into the ready/pending reading list. */
;;;611    			pxListItem = pxNext;
00008a  4630              MOV      r0,r6
                  |L8.140|
00008c  42b8              CMP      r0,r7                 ;556
00008e  d1dc              BNE      |L8.74|
;;;612    		}
;;;613    
;;;614    		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
;;;615    		bit was set in the control word. */
;;;616    		pxEventBits->uxEventBits &= ~uxBitsToClear;
000090  6820              LDR      r0,[r4,#0]
000092  43a8              BICS     r0,r0,r5
000094  6020              STR      r0,[r4,#0]
;;;617    	}
;;;618    	( void ) xTaskResumeAll();
000096  f7fffffe          BL       xTaskResumeAll
;;;619    
;;;620    	return pxEventBits->uxEventBits;
00009a  6820              LDR      r0,[r4,#0]
;;;621    }
00009c  e8bd81f0          POP      {r4-r8,pc}
;;;622    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupSync||, CODE, READONLY, ALIGN=2

                  xEventGroupSync PROC
;;;207    
;;;208    EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;209    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
;;;210    EventBits_t uxOriginalBitValue, uxReturn;
;;;211    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;212    BaseType_t xAlreadyYielded;
;;;213    BaseType_t xTimeoutOccurred = pdFALSE;
;;;214    
;;;215    	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
00000c  0e28              LSRS     r0,r5,#24
00000e  d007              BEQ      |L9.32|
000010  2050              MOVS     r0,#0x50              ;209
000012  f3808811          MSR      BASEPRI,r0            ;209
000016  f3bf8f4f          DSB                            ;209
00001a  f3bf8f6f          ISB                            ;209
                  |L9.30|
00001e  e7fe              B        |L9.30|
                  |L9.32|
;;;216    	configASSERT( uxBitsToWaitFor != 0 );
000020  b11d              CBZ      r5,|L9.42|
;;;217    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;218    	{
;;;219    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
000022  f7fffffe          BL       xTaskGetSchedulerState
000026  b140              CBZ      r0,|L9.58|
000028  e010              B        |L9.76|
                  |L9.42|
00002a  2050              MOVS     r0,#0x50
00002c  f3808811          MSR      BASEPRI,r0
000030  f3bf8f4f          DSB      
000034  f3bf8f6f          ISB      
                  |L9.56|
000038  e7fe              B        |L9.56|
                  |L9.58|
00003a  b13f              CBZ      r7,|L9.76|
00003c  2050              MOVS     r0,#0x50
00003e  f3808811          MSR      BASEPRI,r0
000042  f3bf8f4f          DSB      
000046  f3bf8f6f          ISB      
                  |L9.74|
00004a  e7fe              B        |L9.74|
                  |L9.76|
;;;220    	}
;;;221    	#endif
;;;222    
;;;223    	vTaskSuspendAll();
00004c  f7fffffe          BL       vTaskSuspendAll
;;;224    	{
;;;225    		uxOriginalBitValue = pxEventBits->uxEventBits;
000050  6826              LDR      r6,[r4,#0]
;;;226    
;;;227    		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
000052  4641              MOV      r1,r8
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       xEventGroupSetBits
;;;228    
;;;229    		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
00005a  ea460608          ORR      r6,r6,r8
00005e  ea350006          BICS     r0,r5,r6
000062  d008              BEQ      |L9.118|
;;;230    		{
;;;231    			/* All the rendezvous bits are now set - no need to block. */
;;;232    			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
;;;233    
;;;234    			/* Rendezvous always clear the bits.  They will have been cleared
;;;235    			already unless this is the only task in the rendezvous. */
;;;236    			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
;;;237    
;;;238    			xTicksToWait = 0;
;;;239    		}
;;;240    		else
;;;241    		{
;;;242    			if( xTicksToWait != ( TickType_t ) 0 )
000064  b167              CBZ      r7,|L9.128|
;;;243    			{
;;;244    				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
;;;245    
;;;246    				/* Store the bits that the calling task is waiting for in the
;;;247    				task's event list item so the kernel knows when a match is
;;;248    				found.  Then enter the blocked state. */
;;;249    				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
000066  f04561a0          ORR      r1,r5,#0x5000000
00006a  463a              MOV      r2,r7
00006c  1d20              ADDS     r0,r4,#4
00006e  f7fffffe          BL       vTaskPlaceOnUnorderedEventList
;;;250    
;;;251    				/* This assignment is obsolete as uxReturn will get set after
;;;252    				the task unblocks, but some compilers mistakenly generate a
;;;253    				warning about uxReturn being returned without being set if the
;;;254    				assignment is omitted. */
;;;255    				uxReturn = 0;
000072  2600              MOVS     r6,#0
000074  e005              B        |L9.130|
                  |L9.118|
000076  6820              LDR      r0,[r4,#0]            ;236
000078  43a8              BICS     r0,r0,r5              ;236
00007a  6020              STR      r0,[r4,#0]            ;236
00007c  2700              MOVS     r7,#0                 ;238
00007e  e000              B        |L9.130|
                  |L9.128|
;;;256    			}
;;;257    			else
;;;258    			{
;;;259    				/* The rendezvous bits were not set, but no block time was
;;;260    				specified - just return the current event bit value. */
;;;261    				uxReturn = pxEventBits->uxEventBits;
000080  6826              LDR      r6,[r4,#0]
                  |L9.130|
;;;262    			}
;;;263    		}
;;;264    	}
;;;265    	xAlreadyYielded = xTaskResumeAll();
000082  f7fffffe          BL       xTaskResumeAll
;;;266    
;;;267    	if( xTicksToWait != ( TickType_t ) 0 )
000086  b1d7              CBZ      r7,|L9.190|
;;;268    	{
;;;269    		if( xAlreadyYielded == pdFALSE )
000088  b938              CBNZ     r0,|L9.154|
;;;270    		{
;;;271    			portYIELD_WITHIN_API();
00008a  490e              LDR      r1,|L9.196|
00008c  f04f5080          MOV      r0,#0x10000000
000090  6008              STR      r0,[r1,#0]
000092  f3bf8f4f          DSB      
000096  f3bf8f6f          ISB      
                  |L9.154|
;;;272    		}
;;;273    		else
;;;274    		{
;;;275    			mtCOVERAGE_TEST_MARKER();
;;;276    		}
;;;277    
;;;278    		/* The task blocked to wait for its required bits to be set - at this
;;;279    		point either the required bits were set or the block time expired.  If
;;;280    		the required bits were set they will have been stored in the task's
;;;281    		event list item, and they should now be retrieved then cleared. */
;;;282    		uxReturn = uxTaskResetEventItemValue();
00009a  f7fffffe          BL       uxTaskResetEventItemValue
00009e  4606              MOV      r6,r0
;;;283    
;;;284    		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
0000a0  01b0              LSLS     r0,r6,#6
0000a2  d40a              BMI      |L9.186|
;;;285    		{
;;;286    			/* The task timed out, just return the current event bit value. */
;;;287    			taskENTER_CRITICAL();
0000a4  f7fffffe          BL       vPortEnterCritical
;;;288    			{
;;;289    				uxReturn = pxEventBits->uxEventBits;
0000a8  6826              LDR      r6,[r4,#0]
;;;290    
;;;291    				/* Although the task got here because it timed out before the
;;;292    				bits it was waiting for were set, it is possible that since it
;;;293    				unblocked another task has set the bits.  If this is the case
;;;294    				then it needs to clear the bits before exiting. */
;;;295    				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
0000aa  ea350006          BICS     r0,r5,r6
0000ae  d102              BNE      |L9.182|
;;;296    				{
;;;297    					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
0000b0  ea260005          BIC      r0,r6,r5
0000b4  6020              STR      r0,[r4,#0]
                  |L9.182|
;;;298    				}
;;;299    				else
;;;300    				{
;;;301    					mtCOVERAGE_TEST_MARKER();
;;;302    				}
;;;303    			}
;;;304    			taskEXIT_CRITICAL();
0000b6  f7fffffe          BL       vPortExitCritical
                  |L9.186|
;;;305    
;;;306    			xTimeoutOccurred = pdTRUE;
;;;307    		}
;;;308    		else
;;;309    		{
;;;310    			/* The task unblocked because the bits were set. */
;;;311    		}
;;;312    
;;;313    		/* Control bits might be set as the task had blocked should not be
;;;314    		returned. */
;;;315    		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
0000ba  f026467f          BIC      r6,r6,#0xff000000
                  |L9.190|
;;;316    	}
;;;317    
;;;318    	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
;;;319    
;;;320    	return uxReturn;
0000be  4630              MOV      r0,r6
;;;321    }
0000c0  e8bd81f0          POP      {r4-r8,pc}
;;;322    /*-----------------------------------------------------------*/
                          ENDP

                  |L9.196|
                          DCD      0xe000ed04

                          AREA ||i.xEventGroupWaitBits||, CODE, READONLY, ALIGN=2

                  xEventGroupWaitBits PROC
;;;323    
;;;324    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;325    {
000004  460d              MOV      r5,r1
000006  9f08              LDR      r7,[sp,#0x20]
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
;;;326    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
00000c  4604              MOV      r4,r0
;;;327    EventBits_t uxReturn, uxControlBits = 0;
00000e  2600              MOVS     r6,#0
;;;328    BaseType_t xWaitConditionMet, xAlreadyYielded;
;;;329    BaseType_t xTimeoutOccurred = pdFALSE;
;;;330    
;;;331    	/* Check the user is not attempting to wait on the bits used by the kernel
;;;332    	itself, and that at least one bit is being requested. */
;;;333    	configASSERT( xEventGroup );
000010  2800              CMP      r0,#0
000012  d009              BEQ      |L10.40|
;;;334    	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
000014  0e28              LSRS     r0,r5,#24
000016  d00f              BEQ      |L10.56|
000018  2050              MOVS     r0,#0x50
00001a  f3808811          MSR      BASEPRI,r0
00001e  f3bf8f4f          DSB      
000022  f3bf8f6f          ISB      
                  |L10.38|
000026  e7fe              B        |L10.38|
                  |L10.40|
000028  2050              MOVS     r0,#0x50
00002a  f3808811          MSR      BASEPRI,r0
00002e  f3bf8f4f          DSB      
000032  f3bf8f6f          ISB      
                  |L10.54|
000036  e7fe              B        |L10.54|
                  |L10.56|
;;;335    	configASSERT( uxBitsToWaitFor != 0 );
000038  b11d              CBZ      r5,|L10.66|
;;;336    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;337    	{
;;;338    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
00003a  f7fffffe          BL       xTaskGetSchedulerState
00003e  b140              CBZ      r0,|L10.82|
000040  e010              B        |L10.100|
                  |L10.66|
000042  2050              MOVS     r0,#0x50
000044  f3808811          MSR      BASEPRI,r0
000048  f3bf8f4f          DSB      
00004c  f3bf8f6f          ISB      
                  |L10.80|
000050  e7fe              B        |L10.80|
                  |L10.82|
000052  b13f              CBZ      r7,|L10.100|
000054  2050              MOVS     r0,#0x50
000056  f3808811          MSR      BASEPRI,r0
00005a  f3bf8f4f          DSB      
00005e  f3bf8f6f          ISB      
                  |L10.98|
000062  e7fe              B        |L10.98|
                  |L10.100|
;;;339    	}
;;;340    	#endif
;;;341    
;;;342    	vTaskSuspendAll();
000064  f7fffffe          BL       vTaskSuspendAll
;;;343    	{
;;;344    		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
000068  f8d4a000          LDR      r10,[r4,#0]
;;;345    
;;;346    		/* Check to see if the wait condition is already met or not. */
;;;347    		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
00006c  464a              MOV      r2,r9
00006e  4629              MOV      r1,r5
000070  4650              MOV      r0,r10
000072  f7fffffe          BL       prvTestWaitCondition
;;;348    
;;;349    		if( xWaitConditionMet != pdFALSE )
000076  b140              CBZ      r0,|L10.138|
;;;350    		{
;;;351    			/* The wait condition has already been met so there is no need to
;;;352    			block. */
;;;353    			uxReturn = uxCurrentEventBits;
000078  4656              MOV      r6,r10
;;;354    			xTicksToWait = ( TickType_t ) 0;
00007a  2700              MOVS     r7,#0
;;;355    
;;;356    			/* Clear the wait bits if requested to do so. */
;;;357    			if( xClearOnExit != pdFALSE )
00007c  f1b80f00          CMP      r8,#0
000080  d015              BEQ      |L10.174|
;;;358    			{
;;;359    				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
000082  6820              LDR      r0,[r4,#0]
000084  43a8              BICS     r0,r0,r5
000086  6020              STR      r0,[r4,#0]
000088  e011              B        |L10.174|
                  |L10.138|
;;;360    			}
;;;361    			else
;;;362    			{
;;;363    				mtCOVERAGE_TEST_MARKER();
;;;364    			}
;;;365    		}
;;;366    		else if( xTicksToWait == ( TickType_t ) 0 )
00008a  b1af              CBZ      r7,|L10.184|
;;;367    		{
;;;368    			/* The wait condition has not been met, but no block time was
;;;369    			specified, so just return the current value. */
;;;370    			uxReturn = uxCurrentEventBits;
;;;371    		}
;;;372    		else
;;;373    		{
;;;374    			/* The task is going to block to wait for its required bits to be
;;;375    			set.  uxControlBits are used to remember the specified behaviour of
;;;376    			this call to xEventGroupWaitBits() - for use when the event bits
;;;377    			unblock the task. */
;;;378    			if( xClearOnExit != pdFALSE )
00008c  f1b80f00          CMP      r8,#0
000090  d001              BEQ      |L10.150|
;;;379    			{
;;;380    				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
000092  f04f7680          MOV      r6,#0x1000000
                  |L10.150|
;;;381    			}
;;;382    			else
;;;383    			{
;;;384    				mtCOVERAGE_TEST_MARKER();
;;;385    			}
;;;386    
;;;387    			if( xWaitForAllBits != pdFALSE )
000096  f1b90f00          CMP      r9,#0
00009a  d001              BEQ      |L10.160|
;;;388    			{
;;;389    				uxControlBits |= eventWAIT_FOR_ALL_BITS;
00009c  f0466680          ORR      r6,r6,#0x4000000
                  |L10.160|
;;;390    			}
;;;391    			else
;;;392    			{
;;;393    				mtCOVERAGE_TEST_MARKER();
;;;394    			}
;;;395    
;;;396    			/* Store the bits that the calling task is waiting for in the
;;;397    			task's event list item so the kernel knows when a match is
;;;398    			found.  Then enter the blocked state. */
;;;399    			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
0000a0  ea450106          ORR      r1,r5,r6
0000a4  463a              MOV      r2,r7
0000a6  1d20              ADDS     r0,r4,#4
0000a8  f7fffffe          BL       vTaskPlaceOnUnorderedEventList
;;;400    
;;;401    			/* This is obsolete as it will get set after the task unblocks, but
;;;402    			some compilers mistakenly generate a warning about the variable
;;;403    			being returned without being set if it is not done. */
;;;404    			uxReturn = 0;
0000ac  2600              MOVS     r6,#0
                  |L10.174|
;;;405    
;;;406    			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
;;;407    		}
;;;408    	}
;;;409    	xAlreadyYielded = xTaskResumeAll();
0000ae  f7fffffe          BL       xTaskResumeAll
;;;410    
;;;411    	if( xTicksToWait != ( TickType_t ) 0 )
0000b2  b31f              CBZ      r7,|L10.252|
;;;412    	{
;;;413    		if( xAlreadyYielded == pdFALSE )
0000b4  b110              CBZ      r0,|L10.188|
0000b6  e009              B        |L10.204|
                  |L10.184|
0000b8  4656              MOV      r6,r10                ;370
0000ba  e7f8              B        |L10.174|
                  |L10.188|
;;;414    		{
;;;415    			portYIELD_WITHIN_API();
0000bc  4911              LDR      r1,|L10.260|
0000be  f04f5080          MOV      r0,#0x10000000
0000c2  6008              STR      r0,[r1,#0]
0000c4  f3bf8f4f          DSB      
0000c8  f3bf8f6f          ISB      
                  |L10.204|
;;;416    		}
;;;417    		else
;;;418    		{
;;;419    			mtCOVERAGE_TEST_MARKER();
;;;420    		}
;;;421    
;;;422    		/* The task blocked to wait for its required bits to be set - at this
;;;423    		point either the required bits were set or the block time expired.  If
;;;424    		the required bits were set they will have been stored in the task's
;;;425    		event list item, and they should now be retrieved then cleared. */
;;;426    		uxReturn = uxTaskResetEventItemValue();
0000cc  f7fffffe          BL       uxTaskResetEventItemValue
0000d0  4606              MOV      r6,r0
;;;427    
;;;428    		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
0000d2  01b0              LSLS     r0,r6,#6
0000d4  d410              BMI      |L10.248|
;;;429    		{
;;;430    			taskENTER_CRITICAL();
0000d6  f7fffffe          BL       vPortEnterCritical
;;;431    			{
;;;432    				/* The task timed out, just return the current event bit value. */
;;;433    				uxReturn = pxEventBits->uxEventBits;
0000da  6826              LDR      r6,[r4,#0]
;;;434    
;;;435    				/* It is possible that the event bits were updated between this
;;;436    				task leaving the Blocked state and running again. */
;;;437    				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
0000dc  464a              MOV      r2,r9
0000de  4629              MOV      r1,r5
0000e0  4630              MOV      r0,r6
0000e2  f7fffffe          BL       prvTestWaitCondition
0000e6  b128              CBZ      r0,|L10.244|
;;;438    				{
;;;439    					if( xClearOnExit != pdFALSE )
0000e8  f1b80f00          CMP      r8,#0
0000ec  d002              BEQ      |L10.244|
;;;440    					{
;;;441    						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
0000ee  6820              LDR      r0,[r4,#0]
0000f0  43a8              BICS     r0,r0,r5
0000f2  6020              STR      r0,[r4,#0]
                  |L10.244|
;;;442    					}
;;;443    					else
;;;444    					{
;;;445    						mtCOVERAGE_TEST_MARKER();
;;;446    					}
;;;447    				}
;;;448    				else
;;;449    				{
;;;450    					mtCOVERAGE_TEST_MARKER();
;;;451    				}
;;;452    			}
;;;453    			taskEXIT_CRITICAL();
0000f4  f7fffffe          BL       vPortExitCritical
                  |L10.248|
;;;454    
;;;455    			/* Prevent compiler warnings when trace macros are not used. */
;;;456    			xTimeoutOccurred = pdFALSE;
;;;457    		}
;;;458    		else
;;;459    		{
;;;460    			/* The task unblocked because the bits were set. */
;;;461    		}
;;;462    
;;;463    		/* The task blocked so control bits may have been set. */
;;;464    		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
0000f8  f026467f          BIC      r6,r6,#0xff000000
                  |L10.252|
;;;465    	}
;;;466    	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
;;;467    
;;;468    	return uxReturn;
0000fc  4630              MOV      r0,r6
;;;469    }
0000fe  e8bd87f0          POP      {r4-r10,pc}
;;;470    /*-----------------------------------------------------------*/
                          ENDP

000102  0000              DCW      0x0000
                  |L10.260|
                          DCD      0xe000ed04
