; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -ogsm_stm32f103\stm32f1xx_hal_pwr.o --asm_dir=..\..\list\ --list_dir=..\..\list\ --depend=gsm_stm32f103\stm32f1xx_hal_pwr.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I..\Hardware\SSD1306 -I..\Hardware\delay -I..\Hardware\GSM_LIB\GENERAL -I..\Hardware\GSM_LIB\USART -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM3 -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS -IE:\MC\2.STM32\STMProjects\GSM\M590\Project\Keil\gsm_stm32f103\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=gsm_stm32f103\stm32f1xx_hal_pwr.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c]
                          THUMB

                          AREA ||i.HAL_PWR_ConfigPVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_ConfigPVD PROC
;;;333      */
;;;334    void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
000000  b530              PUSH     {r4,r5,lr}
;;;335    {
;;;336      /* Check the parameters */
;;;337      assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
;;;338      assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
;;;339    
;;;340      /* Set PLS[7:5] bits according to PVDLevel value */
;;;341      MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
000002  491c              LDR      r1,|L1.116|
000004  680a              LDR      r2,[r1,#0]
000006  6803              LDR      r3,[r0,#0]
000008  f02202e0          BIC      r2,r2,#0xe0
00000c  431a              ORRS     r2,r2,r3
00000e  600a              STR      r2,[r1,#0]
;;;342      
;;;343      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
;;;344      __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
000010  4c19              LDR      r4,|L1.120|
000012  6821              LDR      r1,[r4,#0]
000014  f4213180          BIC      r1,r1,#0x10000
000018  6021              STR      r1,[r4,#0]
;;;345      __HAL_PWR_PVD_EXTI_DISABLE_IT();
00001a  1f21              SUBS     r1,r4,#4
00001c  680a              LDR      r2,[r1,#0]
00001e  f4223280          BIC      r2,r2,#0x10000
000022  600a              STR      r2,[r1,#0]
;;;346      __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
000024  4b14              LDR      r3,|L1.120|
000026  3308              ADDS     r3,r3,#8
000028  681a              LDR      r2,[r3,#0]
00002a  f4223280          BIC      r2,r2,#0x10000
00002e  601a              STR      r2,[r3,#0]
;;;347      __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
000030  1f1a              SUBS     r2,r3,#4
000032  6815              LDR      r5,[r2,#0]
000034  f4253580          BIC      r5,r5,#0x10000
000038  6015              STR      r5,[r2,#0]
;;;348    
;;;349      /* Configure interrupt mode */
;;;350      if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
00003a  6845              LDR      r5,[r0,#4]
00003c  03ed              LSLS     r5,r5,#15
00003e  d503              BPL      |L1.72|
;;;351      {
;;;352        __HAL_PWR_PVD_EXTI_ENABLE_IT();
000040  680d              LDR      r5,[r1,#0]
000042  f4453580          ORR      r5,r5,#0x10000
000046  600d              STR      r5,[r1,#0]
                  |L1.72|
;;;353      }
;;;354      
;;;355      /* Configure event mode */
;;;356      if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
000048  6841              LDR      r1,[r0,#4]
00004a  0389              LSLS     r1,r1,#14
00004c  d503              BPL      |L1.86|
;;;357      {
;;;358        __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
00004e  6821              LDR      r1,[r4,#0]
000050  f4413180          ORR      r1,r1,#0x10000
000054  6021              STR      r1,[r4,#0]
                  |L1.86|
;;;359      }
;;;360      
;;;361      /* Configure the edge */
;;;362      if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
000056  7901              LDRB     r1,[r0,#4]
000058  07c9              LSLS     r1,r1,#31
00005a  d003              BEQ      |L1.100|
;;;363      {
;;;364        __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
00005c  6811              LDR      r1,[r2,#0]
00005e  f4413180          ORR      r1,r1,#0x10000
000062  6011              STR      r1,[r2,#0]
                  |L1.100|
;;;365      }
;;;366      
;;;367      if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
000064  7900              LDRB     r0,[r0,#4]
000066  0780              LSLS     r0,r0,#30
000068  d503              BPL      |L1.114|
;;;368      {
;;;369        __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
00006a  6818              LDR      r0,[r3,#0]
00006c  f4403080          ORR      r0,r0,#0x10000
000070  6018              STR      r0,[r3,#0]
                  |L1.114|
;;;370      }
;;;371    }
000072  bd30              POP      {r4,r5,pc}
;;;372    
                          ENDP

                  |L1.116|
                          DCD      0x40007000
                  |L1.120|
                          DCD      0x40010404

                          AREA ||i.HAL_PWR_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DeInit PROC
;;;173      */
;;;174    void HAL_PWR_DeInit(void)
000000  4804              LDR      r0,|L2.20|
;;;175    {
;;;176      __HAL_RCC_PWR_FORCE_RESET();
000002  6901              LDR      r1,[r0,#0x10]
000004  f0415180          ORR      r1,r1,#0x10000000
000008  6101              STR      r1,[r0,#0x10]
;;;177      __HAL_RCC_PWR_RELEASE_RESET();
00000a  6901              LDR      r1,[r0,#0x10]
00000c  f0215180          BIC      r1,r1,#0x10000000
000010  6101              STR      r1,[r0,#0x10]
;;;178    }
000012  4770              BX       lr
;;;179    
                          ENDP

                  |L2.20|
                          DCD      0x40021000

                          AREA ||i.HAL_PWR_DisableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableBkUpAccess PROC
;;;199      */
;;;200    void HAL_PWR_DisableBkUpAccess(void)
000000  4901              LDR      r1,|L3.8|
;;;201    {
;;;202      /* Disable access to RTC and backup registers */
;;;203      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
000002  2000              MOVS     r0,#0
000004  6208              STR      r0,[r1,#0x20]
;;;204    }
000006  4770              BX       lr
;;;205    
                          ENDP

                  |L3.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_DisablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisablePVD PROC
;;;386      */
;;;387    void HAL_PWR_DisablePVD(void)
000000  4901              LDR      r1,|L4.8|
;;;388    {
;;;389      /* Disable the power voltage detector */
;;;390      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
000002  2000              MOVS     r0,#0
000004  6108              STR      r0,[r1,#0x10]
;;;391    }
000006  4770              BX       lr
;;;392    
                          ENDP

                  |L4.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_DisableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSEVOnPend PROC
;;;584      */
;;;585    void HAL_PWR_DisableSEVOnPend(void)
000000  4802              LDR      r0,|L5.12|
;;;586    {
;;;587      /* Clear SEVONPEND bit of Cortex System Control Register */
;;;588      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0210110          BIC      r1,r1,#0x10
000008  6001              STR      r1,[r0,#0]
;;;589    }
00000a  4770              BX       lr
;;;590    
                          ENDP

                  |L5.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_DisableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSleepOnExit PROC
;;;558      */
;;;559    void HAL_PWR_DisableSleepOnExit(void)
000000  4802              LDR      r0,|L6.12|
;;;560    {
;;;561      /* Clear SLEEPONEXIT bit of Cortex System Control Register */
;;;562      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0210102          BIC      r1,r1,#2
000008  6001              STR      r1,[r0,#0]
;;;563    }
00000a  4770              BX       lr
;;;564    
                          ENDP

                  |L6.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_DisableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableWakeUpPin PROC
;;;414      */
;;;415    void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
000000  fa90f0a0          RBIT     r0,r0
;;;416    {
;;;417      /* Check the parameter */
;;;418      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
;;;419      /* Disable the EWUPx pin */
;;;420      *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
000004  4a04              LDR      r2,|L7.24|
000006  fab0f080          CLZ      r0,r0
00000a  eb020080          ADD      r0,r2,r0,LSL #2
00000e  2100              MOVS     r1,#0
000010  f8c01080          STR      r1,[r0,#0x80]
;;;421    }
000014  4770              BX       lr
;;;422    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableBkUpAccess PROC
;;;186      */
;;;187    void HAL_PWR_EnableBkUpAccess(void)
000000  4901              LDR      r1,|L8.8|
;;;188    {
;;;189      /* Enable access to RTC and backup registers */
;;;190      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  6208              STR      r0,[r1,#0x20]
;;;191    }
000006  4770              BX       lr
;;;192    
                          ENDP

                  |L8.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnablePVD PROC
;;;376      */
;;;377    void HAL_PWR_EnablePVD(void)
000000  4901              LDR      r1,|L9.8|
;;;378    {
;;;379      /* Enable the power voltage detector */
;;;380      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  6108              STR      r0,[r1,#0x10]
;;;381    }
000006  4770              BX       lr
;;;382    
                          ENDP

                  |L9.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSEVOnPend PROC
;;;571      */
;;;572    void HAL_PWR_EnableSEVOnPend(void)
000000  4802              LDR      r0,|L10.12|
;;;573    {
;;;574      /* Set SEVONPEND bit of Cortex System Control Register */
;;;575      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0410110          ORR      r1,r1,#0x10
000008  6001              STR      r1,[r0,#0]
;;;576    }
00000a  4770              BX       lr
;;;577    
                          ENDP

                  |L10.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSleepOnExit PROC
;;;545      */
;;;546    void HAL_PWR_EnableSleepOnExit(void)
000000  4802              LDR      r0,|L11.12|
;;;547    {
;;;548      /* Set SLEEPONEXIT bit of Cortex System Control Register */
;;;549      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0410102          ORR      r1,r1,#2
000008  6001              STR      r1,[r0,#0]
;;;550    }
00000a  4770              BX       lr
;;;551    
                          ENDP

                  |L11.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableWakeUpPin PROC
;;;399      */
;;;400    void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
000000  fa90f0a0          RBIT     r0,r0
;;;401    {
;;;402      /* Check the parameter */
;;;403      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
;;;404      /* Enable the EWUPx pin */
;;;405      *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
000004  4a04              LDR      r2,|L12.24|
000006  fab0f080          CLZ      r0,r0
00000a  eb020080          ADD      r0,r2,r0,LSL #2
00000e  2101              MOVS     r1,#1
000010  f8c01080          STR      r1,[r0,#0x80]
;;;406    }
000014  4770              BX       lr
;;;407    
                          ENDP

000016  0000              DCW      0x0000
                  |L12.24|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnterSLEEPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSLEEPMode PROC
;;;434      */
;;;435    void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
000000  4806              LDR      r0,|L13.28|
;;;436    {
;;;437      /* Check the parameters */
;;;438      /* No check on Regulator because parameter not used in SLEEP mode */
;;;439      /* Prevent unused argument(s) compilation warning */
;;;440      UNUSED(Regulator);
;;;441    
;;;442      assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
;;;443    
;;;444      /* Clear SLEEPDEEP bit of Cortex System Control Register */
;;;445      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
000002  6802              LDR      r2,[r0,#0]
000004  f0220204          BIC      r2,r2,#4
000008  6002              STR      r2,[r0,#0]
;;;446    
;;;447      /* Select SLEEP mode entry -------------------------------------------------*/
;;;448      if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
00000a  2901              CMP      r1,#1
00000c  d003              BEQ      |L13.22|
;;;449      {
;;;450        /* Request Wait For Interrupt */
;;;451        __WFI();
;;;452      }
;;;453      else
;;;454      {
;;;455        /* Request Wait For Event */
;;;456        __SEV();
00000e  bf40              SEV      
;;;457        __WFE();
000010  bf20              WFE      
;;;458        __WFE();
000012  bf20              WFE      
;;;459      }
;;;460    }
000014  4770              BX       lr
                  |L13.22|
000016  bf30              WFI                            ;451
000018  4770              BX       lr
;;;461    
                          ENDP

00001a  0000              DCW      0x0000
                  |L13.28|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTANDBYMode PROC
;;;520      */
;;;521    void HAL_PWR_EnterSTANDBYMode(void)
000000  4805              LDR      r0,|L14.24|
;;;522    {
;;;523      /* Select Standby mode */
;;;524      SET_BIT(PWR->CR, PWR_CR_PDDS);
000002  6801              LDR      r1,[r0,#0]
000004  f0410102          ORR      r1,r1,#2
000008  6001              STR      r1,[r0,#0]
;;;525    
;;;526      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;527      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00000a  4804              LDR      r0,|L14.28|
00000c  6801              LDR      r1,[r0,#0]
00000e  f0410104          ORR      r1,r1,#4
000012  6001              STR      r1,[r0,#0]
;;;528    
;;;529      /* This option is used to ensure that store operations are completed */
;;;530    #if defined ( __CC_ARM)
;;;531      __force_stores();
;;;532    #endif
;;;533      /* Request Wait For Interrupt */
;;;534      __WFI();
000014  bf30              WFI      
;;;535    }
000016  4770              BX       lr
;;;536    
                          ENDP

                  |L14.24|
                          DCD      0x40007000
                  |L14.28|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTOPMode PROC
;;;480      */
;;;481    void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
000000  b510              PUSH     {r4,lr}
;;;482    {
;;;483      /* Check the parameters */
;;;484      assert_param(IS_PWR_REGULATOR(Regulator));
;;;485      assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
;;;486    
;;;487      /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
;;;488      CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
000002  4a0e              LDR      r2,|L15.60|
000004  6813              LDR      r3,[r2,#0]
000006  f0230302          BIC      r3,r3,#2
00000a  6013              STR      r3,[r2,#0]
;;;489    
;;;490      /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
;;;491      MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
00000c  6813              LDR      r3,[r2,#0]
00000e  f0230301          BIC      r3,r3,#1
000012  4303              ORRS     r3,r3,r0
000014  6013              STR      r3,[r2,#0]
;;;492    
;;;493      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;494      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
000016  4c0a              LDR      r4,|L15.64|
000018  6820              LDR      r0,[r4,#0]
00001a  f0400004          ORR      r0,r0,#4
00001e  6020              STR      r0,[r4,#0]
;;;495    
;;;496      /* Select Stop mode entry --------------------------------------------------*/
;;;497      if(STOPEntry == PWR_STOPENTRY_WFI)
000020  2901              CMP      r1,#1
000022  d009              BEQ      |L15.56|
;;;498      {
;;;499        /* Request Wait For Interrupt */
;;;500        __WFI();
;;;501      }
;;;502      else
;;;503      {
;;;504        /* Request Wait For Event */
;;;505        __SEV();
000024  bf40              SEV      
;;;506        PWR_OverloadWfe(); /* WFE redefine locally */
000026  f7fffffe          BL       PWR_OverloadWfe
;;;507        PWR_OverloadWfe(); /* WFE redefine locally */
00002a  f7fffffe          BL       PWR_OverloadWfe
                  |L15.46|
;;;508      }
;;;509      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;510      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00002e  6820              LDR      r0,[r4,#0]
000030  f0200004          BIC      r0,r0,#4
000034  6020              STR      r0,[r4,#0]
;;;511    }
000036  bd10              POP      {r4,pc}
                  |L15.56|
000038  bf30              WFI                            ;500
00003a  e7f8              B        |L15.46|
;;;512    
                          ENDP

                  |L15.60|
                          DCD      0x40007000
                  |L15.64|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_PVDCallback||, CODE, READONLY, ALIGN=1

                  HAL_PWR_PVDCallback PROC
;;;614      */
;;;615    __weak void HAL_PWR_PVDCallback(void)
000000  4770              BX       lr
;;;616    {
;;;617      /* NOTE : This function Should not be modified, when the callback is needed,
;;;618                the HAL_PWR_PVDCallback could be implemented in the user file
;;;619       */ 
;;;620    }
;;;621    
                          ENDP


                          AREA ||i.HAL_PWR_PVD_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_PWR_PVD_IRQHandler PROC
;;;597      */
;;;598    void HAL_PWR_PVD_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;599    {
;;;600      /* Check PWR exti flag */
;;;601      if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
000002  4c05              LDR      r4,|L17.24|
000004  6820              LDR      r0,[r4,#0]
000006  03c0              LSLS     r0,r0,#15
000008  d504              BPL      |L17.20|
;;;602      {
;;;603        /* PWR PVD interrupt user callback */
;;;604        HAL_PWR_PVDCallback();
00000a  f7fffffe          BL       HAL_PWR_PVDCallback
;;;605    
;;;606        /* Clear PWR Exti pending bit */
;;;607        __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
00000e  f44f3080          MOV      r0,#0x10000
000012  6020              STR      r0,[r4,#0]
                  |L17.20|
;;;608      }
;;;609    }
000014  bd10              POP      {r4,pc}
;;;610    
                          ENDP

000016  0000              DCW      0x0000
                  |L17.24|
                          DCD      0x40010414

                          AREA ||i.PWR_OverloadWfe||, CODE, READONLY, ALIGN=1

                  PWR_OverloadWfe PROC
                  ||__tagsym$$noinline||
;;;134    __NOINLINE
;;;135    static void PWR_OverloadWfe(void)
000000  bf20              WFE      
;;;136    {
;;;137      __asm volatile( "wfe" );
;;;138      __asm volatile( "nop" );
000002  bf00              NOP      
;;;139    }
000004  4770              BX       lr
;;;140    
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____REVSH|
#line 402
|__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____RRX|
#line 587
|__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
