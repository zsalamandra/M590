; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -ogsm_stm32f103\init_mc.o --asm_dir=..\..\list\ --list_dir=..\..\list\ --depend=gsm_stm32f103\init_mc.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I..\Hardware\SSD1306 -I..\Hardware\delay -I..\Hardware\GSM_LIB\GENERAL -I..\Hardware\GSM_LIB\USART -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM3 -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS -IE:\MC\2.STM32\STMProjects\GSM\GSM_M590\Project\gsm_stm32f103\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=gsm_stm32f103\init_mc.crf ..\Src\init_mc.c]
                          THUMB

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=1

                  NVIC_EnableIRQ PROC
;;;1451    */
;;;1452   __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
;;;1453   {
;;;1454     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0940              LSRS     r0,r0,#5
00000a  0080              LSLS     r0,r0,#2
00000c  f10020e0          ADD      r0,r0,#0xe000e000
000010  f8c01100          STR      r1,[r0,#0x100]
;;;1455   }
000014  4770              BX       lr
;;;1456   
                          ENDP


                          AREA ||i.initNVIC||, CODE, READONLY, ALIGN=2

                  initNVIC PROC
;;;33     /*********************** NVIC INIT  *******************************************/
;;;34     static void initNVIC(void){
000000  b510              PUSH     {r4,lr}
000002  4905              LDR      r1,|L2.24|
000004  2050              MOVS     r0,#0x50
000006  7008              STRB     r0,[r1,#0]
;;;35         
;;;36         /* RCC_IRQn interrupt configuration */
;;;37         NVIC_SetPriority(RCC_IRQn, 5);  
;;;38         NVIC_EnableIRQ(RCC_IRQn);
000008  2005              MOVS     r0,#5
00000a  f7fffffe          BL       NVIC_EnableIRQ
;;;39         
;;;40         /* TIM4_IRQn interrupt configuration */
;;;41         NVIC_EnableIRQ(TIM4_IRQn);    
00000e  e8bd4010          POP      {r4,lr}
000012  201e              MOVS     r0,#0x1e
000014  f7ffbffe          B.W      NVIC_EnableIRQ
;;;42     }
;;;43     
                          ENDP

                  |L2.24|
                          DCD      0xe000e405

                          AREA ||i.initTim4CaptureMode||, CODE, READONLY, ALIGN=2

                  initTim4CaptureMode PROC
;;;8      
;;;9      static void initTim4CaptureMode(void){
000000  4815              LDR      r0,|L3.88|
;;;10       //Init_DMA();
;;;11       //включаем тактирование порта А, альтернативных функций и таймера
;;;12       RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN;
000002  6981              LDR      r1,[r0,#0x18]
000004  f0410105          ORR      r1,r1,#5
000008  6181              STR      r1,[r0,#0x18]
;;;13       RCC->APB1ENR |= RCC_APB1ENR_TIM4EN; 
00000a  69c1              LDR      r1,[r0,#0x1c]
00000c  f0410104          ORR      r1,r1,#4
000010  61c1              STR      r1,[r0,#0x1c]
;;;14     	
;;;15         TIM4->PSC = 72000-1;//частота 1Khz
000012  4913              LDR      r1,|L3.96|
000014  4811              LDR      r0,|L3.92|
000016  6008              STR      r0,[r1,#0]
;;;16     
;;;17         //выбираем TI4 для TIM5_CH4
;;;18         TIM4->CCMR2 |= TIM_CCMR2_CC4S_0;
000018  4811              LDR      r0,|L3.96|
00001a  380c              SUBS     r0,r0,#0xc
00001c  6801              LDR      r1,[r0,#0]
00001e  f4417180          ORR      r1,r1,#0x100
000022  6001              STR      r1,[r0,#0]
;;;19         //не фильтруем и делитель не используем
;;;20         TIM4->CCMR2 &= ~(TIM_CCMR2_IC4F | TIM_CCMR2_IC4PSC);
000024  6801              LDR      r1,[r0,#0]
000026  f421417c          BIC      r1,r1,#0xfc00
00002a  6001              STR      r1,[r0,#0]
;;;21     
;;;22         TIM4->CCER |= TIM_CCER_CC4P;//выбираем захват по заднему фронту
00002c  1d00              ADDS     r0,r0,#4
00002e  6801              LDR      r1,[r0,#0]
000030  f4415100          ORR      r1,r1,#0x2000
000034  6001              STR      r1,[r0,#0]
;;;23         TIM4->CCER |= TIM_CCER_CC4E;//включаем режим захвата для 4-го канала         
000036  6801              LDR      r1,[r0,#0]
000038  f4415180          ORR      r1,r1,#0x1000
00003c  6001              STR      r1,[r0,#0]
;;;24     
;;;25         //TIM4->DIER |= TIM_DIER_CC4DE;//разрешаем формировать запрос к DMA
;;;26         TIM4->DIER |= TIM_DIER_CC4IE; //разрешаем прерывание по захвату
00003e  4808              LDR      r0,|L3.96|
000040  381c              SUBS     r0,r0,#0x1c
000042  6801              LDR      r1,[r0,#0]
000044  f0410110          ORR      r1,r1,#0x10
000048  6001              STR      r1,[r0,#0]
;;;27     
;;;28         TIM4->CR1 |= TIM_CR1_CEN; //включаем счётчик
00004a  4805              LDR      r0,|L3.96|
00004c  3828              SUBS     r0,r0,#0x28
00004e  6801              LDR      r1,[r0,#0]
000050  f0410101          ORR      r1,r1,#1
000054  6001              STR      r1,[r0,#0]
;;;29     }
000056  4770              BX       lr
;;;30     
                          ENDP

                  |L3.88|
                          DCD      0x40021000
                  |L3.92|
                          DCD      0x0001193f
                  |L3.96|
                          DCD      0x40000828

                          AREA ||i.init_mc||, CODE, READONLY, ALIGN=2

                  init_mc PROC
;;;163    
;;;164    void init_mc(void){
000000  b510              PUSH     {r4,lr}
;;;165        
;;;166    	//SetSysClock();
;;;167        // включение тактирования альтернативных функций
;;;168    	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
000002  4808              LDR      r0,|L4.36|
000004  6981              LDR      r1,[r0,#0x18]
000006  f0410101          ORR      r1,r1,#1
00000a  6181              STR      r1,[r0,#0x18]
;;;169        // отключение режима отладки JTUG
;;;170    	AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;      
00000c  4806              LDR      r0,|L4.40|
00000e  6841              LDR      r1,[r0,#4]
000010  f0417100          ORR      r1,r1,#0x2000000
000014  6041              STR      r1,[r0,#4]
;;;171        
;;;172        initTim4CaptureMode();
000016  f7fffffe          BL       initTim4CaptureMode
;;;173        initNVIC();
00001a  e8bd4010          POP      {r4,lr}
00001e  f7ffbffe          B.W      initNVIC
;;;174        //init_gpio();
;;;175        
;;;176    }
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
                          DCD      0x40021000
                  |L4.40|
                          DCD      0x40010000

;*** Start embedded assembler ***

#line 1 "..\\Src\\init_mc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_init_mc_c_init_mc____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___9_init_mc_c_init_mc____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_init_mc_c_init_mc____REVSH|
#line 402
|__asm___9_init_mc_c_init_mc____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_init_mc_c_init_mc____RRX|
#line 587
|__asm___9_init_mc_c_init_mc____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
