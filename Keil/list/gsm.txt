; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -ogsm_stm32f103\gsm.o --asm_dir=..\..\list\ --list_dir=..\..\list\ --depend=gsm_stm32f103\gsm.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I..\Hardware\SSD1306 -I..\Hardware\delay -I..\Hardware\GSM_LIB\GENERAL -I..\Hardware\GSM_LIB\USART -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM3 -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS -IE:\MC\2.STM32\STMProjects\GSM\M590\Project\Keil\gsm_stm32f103\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=gsm_stm32f103\gsm.crf ..\Hardware\GSM_LIB\GENERAL\gsm.c]
                          THUMB

                          AREA ||i.GSM_AT||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  GSM_AT PROC
;;;28       */
;;;29     uint8_t GSM_AT(void){
000000  b510              PUSH     {r4,lr}
;;;30     		
;;;31     	GSM_UART_FlushTxBuf();     //очистка передающего буфера
000002  f7fffffe          BL       GSM_UART_FlushTxBuf
;;;32     	GSM_UART_FlushRxBuf();     //очистка приемного буфера
000006  f7fffffe          BL       GSM_UART_FlushRxBuf
;;;33         
;;;34     	sprintf(GSM_UART_GetTxBuffer(), "AT%s", end);
00000a  f7fffffe          BL       GSM_UART_GetTxBuffer
00000e  4a06              LDR      r2,|L1.40|
000010  a106              ADR      r1,|L1.44|
000012  f7fffffe          BL       __2sprintf
;;;35         
;;;36     	if (rfOK == GSM_UART_SendATCommand(0x00FF)){
000016  20ff              MOVS     r0,#0xff
000018  f7fffffe          BL       GSM_UART_SendATCommand
00001c  2801              CMP      r0,#1
00001e  d001              BEQ      |L1.36|
;;;37     		return 1;
;;;38     	}
;;;39     	
;;;40     	return 0;
000020  2000              MOVS     r0,#0
;;;41     }
000022  bd10              POP      {r4,pc}
                  |L1.36|
000024  2001              MOVS     r0,#1                 ;37
000026  bd10              POP      {r4,pc}
;;;42     
                          ENDP

                  |L1.40|
                          DCD      end
                  |L1.44|
00002c  41542573          DCB      "AT%s",0
000030  00      
000031  00                DCB      0
000032  00                DCB      0
000033  00                DCB      0

                          AREA ||i.GSM_Boot||, CODE, READONLY, ALIGN=1

                  GSM_Boot PROC
;;;48     *******************************************************************/
;;;49     uint8_t GSM_Boot(void){
000000  b510              PUSH     {r4,lr}
;;;50     									
;;;51     	if (GSM_AT()){
000002  f7fffffe          BL       GSM_AT
000006  b108              CBZ      r0,|L2.12|
;;;52     		return 0x01;
000008  2001              MOVS     r0,#1
;;;53     	}
;;;54     
;;;55     	//GPIO_WritePin(PIN_GSM_ON_GPIO_Port, PIN_GSM_ON_Pin, SET);
;;;56     	delay_ms(500);
;;;57     	//GPIO_WritePin(PIN_GSM_ON_GPIO_Port, PIN_GSM_ON_Pin, RESET);
;;;58     	
;;;59     	delay_ms(1000);
;;;60     	return GSM_AT();
;;;61     }
00000a  bd10              POP      {r4,pc}
                  |L2.12|
00000c  f44f70fa          MOV      r0,#0x1f4             ;56
000010  f7fffffe          BL       delay_ms
000014  f44f707a          MOV      r0,#0x3e8             ;59
000018  f7fffffe          BL       delay_ms
00001c  e8bd4010          POP      {r4,lr}               ;60
000020  f7ffbffe          B.W      GSM_AT
;;;62     
                          ENDP


                          AREA ||i.GSM_GetRegInfo||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  GSM_GetRegInfo PROC
;;;222      */
;;;223    uint8_t GSM_GetRegInfo(void){
000000  b510              PUSH     {r4,lr}
;;;224    		
;;;225    	GSM_UART_FlushTxBuf();     //очистка передающего буфера
000002  f7fffffe          BL       GSM_UART_FlushTxBuf
;;;226    	GSM_UART_FlushRxBuf();     //очистка приемного буфера
000006  f7fffffe          BL       GSM_UART_FlushRxBuf
;;;227        
;;;228    	sprintf(GSM_UART_GetTxBuffer(), "AT+CREG?%s", end);
00000a  f7fffffe          BL       GSM_UART_GetTxBuffer
00000e  4a0d              LDR      r2,|L3.68|
000010  a10d              ADR      r1,|L3.72|
000012  f7fffffe          BL       __2sprintf
;;;229        
;;;230    	if (rfOK == GSM_UART_SendATCommand(0x0FFF)){
000016  f64070ff          MOV      r0,#0xfff
00001a  f7fffffe          BL       GSM_UART_SendATCommand
00001e  2801              CMP      r0,#1
000020  d001              BEQ      |L3.38|
;;;231    		
;;;232    		char *p1 = strchr(GSM_UART_GetRxBuffer(), ',') + 1;
;;;233    		char *p2 = p1 + 1;
;;;234    	 *p2 = 0;
;;;235    		uint8_t retVal = (atoi(p1) == 0x01) ;
;;;236    		return (uint8_t)retVal;
;;;237    	}
;;;238    	
;;;239    	return 0;
000022  2000              MOVS     r0,#0
                  |L3.36|
;;;240    }
000024  bd10              POP      {r4,pc}
                  |L3.38|
000026  f7fffffe          BL       GSM_UART_GetRxBuffer
00002a  212c              MOVS     r1,#0x2c              ;232
00002c  f7fffffe          BL       strchr
000030  1c40              ADDS     r0,r0,#1              ;232
000032  1c41              ADDS     r1,r0,#1              ;233
000034  2200              MOVS     r2,#0                 ;234
000036  700a              STRB     r2,[r1,#0]            ;234
000038  f7fffffe          BL       atoi
00003c  2801              CMP      r0,#1                 ;235
00003e  d0f1              BEQ      |L3.36|
000040  2000              MOVS     r0,#0                 ;235
000042  bd10              POP      {r4,pc}
;;;241    
                          ENDP

                  |L3.68|
                          DCD      end
                  |L3.72|
000048  41542b43          DCB      "AT+CREG?%s",0
00004c  5245473f
000050  257300  
000053  00                DCB      0

                          AREA ||i.GSM_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  GSM_Init PROC
;;;84     *******************************************************************/
;;;85     void GSM_Init(void){
000000  b510              PUSH     {r4,lr}
;;;86     	
;;;87     		GSM_UART_FlushTxBuf();     //очистка передающего буфера
000002  f7fffffe          BL       GSM_UART_FlushTxBuf
;;;88         GSM_UART_FlushRxBuf();     //очистка приемного буфера	
000006  f7fffffe          BL       GSM_UART_FlushRxBuf
;;;89     	
;;;90     		sprintf(GSM_UART_GetTxBuffer(), "AT%s", end);
00000a  f7fffffe          BL       GSM_UART_GetTxBuffer
00000e  4a31              LDR      r2,|L4.212|
000010  a131              ADR      r1,|L4.216|
000012  f7fffffe          BL       __2sprintf
;;;91         GSM_UART_SendATCommand(0x0FFF);
000016  f64074ff          MOV      r4,#0xfff
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       GSM_UART_SendATCommand
;;;92         delay_ms(100);
000020  2064              MOVS     r0,#0x64
000022  f7fffffe          BL       delay_ms
;;;93     	
;;;94     		// ЭХО откл. Только ответ
;;;95     		//USART_FlushRxBuf();
;;;96     		sprintf(GSM_UART_GetTxBuffer(), "ATE0%s", end);
000026  f7fffffe          BL       GSM_UART_GetTxBuffer
00002a  4a2a              LDR      r2,|L4.212|
00002c  a12c              ADR      r1,|L4.224|
00002e  f7fffffe          BL       __2sprintf
;;;97         GSM_UART_SendATCommand(0x0FFF);
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       GSM_UART_SendATCommand
;;;98     		delay_ms(100);
000038  2064              MOVS     r0,#0x64
00003a  f7fffffe          BL       delay_ms
;;;99     
;;;100    		//USART_FlushRxBuf();
;;;101    		sprintf(GSM_UART_GetTxBuffer(), "ATV1%s", end);
00003e  f7fffffe          BL       GSM_UART_GetTxBuffer
000042  4a24              LDR      r2,|L4.212|
000044  a128              ADR      r1,|L4.232|
000046  f7fffffe          BL       __2sprintf
;;;102        GSM_UART_SendATCommand(0x0FFF);
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       GSM_UART_SendATCommand
;;;103    		delay_ms(100);
000050  2064              MOVS     r0,#0x64
000052  f7fffffe          BL       delay_ms
;;;104    	
;;;105        // текстовый режим
;;;106    		//USART_FlushRxBuf();
;;;107    		sprintf(GSM_UART_GetTxBuffer(), "AT+CMGF=1%s", end);
000056  f7fffffe          BL       GSM_UART_GetTxBuffer
00005a  4a1e              LDR      r2,|L4.212|
00005c  a124              ADR      r1,|L4.240|
00005e  f7fffffe          BL       __2sprintf
;;;108        GSM_UART_SendATCommand(0x0FFF);
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       GSM_UART_SendATCommand
;;;109    		delay_ms(100);	
000068  2064              MOVS     r0,#0x64
00006a  f7fffffe          BL       delay_ms
;;;110    		
;;;111        // кодировка
;;;112    		//USART_FlushRxBuf();
;;;113    		sprintf(GSM_UART_GetTxBuffer(), "AT+CSCS=\"GSM\"%s", end);
00006e  f7fffffe          BL       GSM_UART_GetTxBuffer
000072  4a18              LDR      r2,|L4.212|
000074  a121              ADR      r1,|L4.252|
000076  f7fffffe          BL       __2sprintf
;;;114        GSM_UART_SendATCommand(0x0FFF);
00007a  4620              MOV      r0,r4
00007c  f7fffffe          BL       GSM_UART_SendATCommand
;;;115    		delay_ms(100);			
000080  2064              MOVS     r0,#0x64
000082  f7fffffe          BL       delay_ms
;;;116    	
;;;117        // отключение спец сообщений
;;;118    		//USART_FlushRxBuf();
;;;119    		sprintf(GSM_UART_GetTxBuffer(), "AT+CSCB=1%s", end);
000086  f7fffffe          BL       GSM_UART_GetTxBuffer
00008a  4a12              LDR      r2,|L4.212|
00008c  a11f              ADR      r1,|L4.268|
00008e  f7fffffe          BL       __2sprintf
;;;120        GSM_UART_SendATCommand(0x0FFF);
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       GSM_UART_SendATCommand
;;;121    		delay_ms(100);		
000098  2064              MOVS     r0,#0x64
00009a  f7fffffe          BL       delay_ms
;;;122    
;;;123    		// отключение спец сообщений
;;;124    		//USART_FlushRxBuf();
;;;125    		sprintf(GSM_UART_GetTxBuffer(), "AT+CNMI=2,1,0,0,0%s", end);
00009e  f7fffffe          BL       GSM_UART_GetTxBuffer
0000a2  4a0c              LDR      r2,|L4.212|
0000a4  a11c              ADR      r1,|L4.280|
0000a6  f7fffffe          BL       __2sprintf
;;;126        GSM_UART_SendATCommand(0x0FFF);
0000aa  4620              MOV      r0,r4
0000ac  f7fffffe          BL       GSM_UART_SendATCommand
;;;127    		delay_ms(100);		
0000b0  2064              MOVS     r0,#0x64
0000b2  f7fffffe          BL       delay_ms
;;;128    
;;;129    		//сохранение настроек
;;;130        //USART_FlushRxBuf();
;;;131    		sprintf(GSM_UART_GetTxBuffer(), "AT&W0%s", end);
0000b6  f7fffffe          BL       GSM_UART_GetTxBuffer
0000ba  4a06              LDR      r2,|L4.212|
0000bc  a11b              ADR      r1,|L4.300|
0000be  f7fffffe          BL       __2sprintf
;;;132        GSM_UART_SendATCommand(0x0FFF);
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       GSM_UART_SendATCommand
;;;133    		delay_ms(100);		
0000c8  e8bd4010          POP      {r4,lr}
0000cc  2064              MOVS     r0,#0x64
0000ce  f7ffbffe          B.W      delay_ms
;;;134    		
;;;135    }
;;;136    
                          ENDP

0000d2  0000              DCW      0x0000
                  |L4.212|
                          DCD      end
                  |L4.216|
0000d8  41542573          DCB      "AT%s",0
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
                  |L4.224|
0000e0  41544530          DCB      "ATE0%s",0
0000e4  257300  
0000e7  00                DCB      0
                  |L4.232|
0000e8  41545631          DCB      "ATV1%s",0
0000ec  257300  
0000ef  00                DCB      0
                  |L4.240|
0000f0  41542b43          DCB      "AT+CMGF=1%s",0
0000f4  4d47463d
0000f8  31257300
                  |L4.252|
0000fc  41542b43          DCB      "AT+CSCS=""GSM""%s",0
000100  5343533d
000104  2247534d
000108  22257300
                  |L4.268|
00010c  41542b43          DCB      "AT+CSCB=1%s",0
000110  5343423d
000114  31257300
                  |L4.280|
000118  41542b43          DCB      "AT+CNMI=2,1,0,0,0%s",0
00011c  4e4d493d
000120  322c312c
000124  302c302c
000128  30257300
                  |L4.300|
00012c  41542657          DCB      "AT&W0%s",0
000130  30257300

                          AREA ||i.GSM_SignalLevel||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  GSM_SignalLevel PROC
;;;183      */
;;;184    uint8_t GSM_SignalLevel(void){
000000  b570              PUSH     {r4-r6,lr}
;;;185    	
;;;186    	uint8_t retVal = 0;
000002  2400              MOVS     r4,#0
;;;187    		
;;;188    	GSM_UART_FlushTxBuf();     //очистка передающего буфера
000004  f7fffffe          BL       GSM_UART_FlushTxBuf
;;;189      GSM_UART_FlushRxBuf();     //очистка приемного буфера
000008  f7fffffe          BL       GSM_UART_FlushRxBuf
;;;190        
;;;191    	sprintf(GSM_UART_GetTxBuffer(), "AT+CSQ%s", end);
00000c  f7fffffe          BL       GSM_UART_GetTxBuffer
000010  4a12              LDR      r2,|L5.92|
000012  a113              ADR      r1,|L5.96|
000014  f7fffffe          BL       __2sprintf
;;;192        
;;;193    	if (rfOK == GSM_UART_SendATCommand(0x0FFF)){
000018  f64070ff          MOV      r0,#0xfff
00001c  f7fffffe          BL       GSM_UART_SendATCommand
000020  2801              CMP      r0,#1
000022  d118              BNE      |L5.86|
;;;194    		
;;;195    		char *p1 = strchr(GSM_UART_GetRxBuffer(), ':') + 2;
000024  f7fffffe          BL       GSM_UART_GetRxBuffer
000028  213a              MOVS     r1,#0x3a
00002a  f7fffffe          BL       strchr
00002e  1c85              ADDS     r5,r0,#2
;;;196    		char *p2 = strchr(p1, ',');
000030  212c              MOVS     r1,#0x2c
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       strchr
;;;197    	 *p2 = 0;
000038  2100              MOVS     r1,#0
00003a  7001              STRB     r1,[r0,#0]
;;;198    		uint8_t level = (uint8_t)atoi(p1);
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       atoi
000042  b2c1              UXTB     r1,r0
;;;199    		
;;;200    		if ((level > 4) && (level < 99))
000044  1f48              SUBS     r0,r1,#5
000046  285e              CMP      r0,#0x5e
000048  d205              BCS      |L5.86|
;;;201    		{
;;;202    			retVal = ((level-4)/3) + 1; 
00004a  1f09              SUBS     r1,r1,#4
00004c  2003              MOVS     r0,#3
00004e  fb91f0f0          SDIV     r0,r1,r0
000052  1c40              ADDS     r0,r0,#1
000054  b2c4              UXTB     r4,r0
                  |L5.86|
;;;203    		}
;;;204    		else
;;;205    		{
;;;206    			retVal = 0;
;;;207    		}
;;;208    	}
;;;209    	
;;;210    	return retVal;
000056  4620              MOV      r0,r4
;;;211    }
000058  bd70              POP      {r4-r6,pc}
;;;212    
                          ENDP

00005a  0000              DCW      0x0000
                  |L5.92|
                          DCD      end
                  |L5.96|
000060  41542b43          DCB      "AT+CSQ%s",0
000064  53512573
000068  00      
000069  00                DCB      0
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.GetBalance||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  GetBalance PROC
;;;142    *******************************************************************/
;;;143    uint8_t *GetBalance(){
000000  b510              PUSH     {r4,lr}
;;;144        
;;;145    	GSM_UART_FlushTxBuf();     //очистка передающего буфера
000002  f7fffffe          BL       GSM_UART_FlushTxBuf
;;;146        GSM_UART_FlushRxBuf();     //очистка приемного буфера
000006  f7fffffe          BL       GSM_UART_FlushRxBuf
;;;147        
;;;148    	sprintf(GSM_UART_GetTxBuffer(), "ATD#100#%s", end);
00000a  f7fffffe          BL       GSM_UART_GetTxBuffer
00000e  4a10              LDR      r2,|L6.80|
000010  a110              ADR      r1,|L6.84|
000012  f7fffffe          BL       __2sprintf
;;;149    
;;;150    	if (rfOK == GSM_UART_SendATCommand(8000UL)){
000016  f44f50fa          MOV      r0,#0x1f40
00001a  f7fffffe          BL       GSM_UART_SendATCommand
00001e  2801              CMP      r0,#1
000020  d114              BNE      |L6.76|
;;;151    		
;;;152    		char *pRx = GSM_UART_GetRxBuffer();
000022  f7fffffe          BL       GSM_UART_GetRxBuffer
000026  4604              MOV      r4,r0
;;;153      
;;;154    		char *p = strstr(pRx, "+CUSD: 0,");
000028  a10d              ADR      r1,|L6.96|
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       strstr
;;;155    	
;;;156    		if (p != NULL)
000030  b160              CBZ      r0,|L6.76|
;;;157    		{
;;;158    			char *p1 = strchr(pRx, '"') + 1;
000032  2122              MOVS     r1,#0x22
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       strchr
00003a  1c44              ADDS     r4,r0,#1
;;;159    			char *p2 = strchr(p1, '"');
00003c  2122              MOVS     r1,#0x22
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       strchr
;;;160    		 *p2 = 0;
000044  2100              MOVS     r1,#0
000046  7001              STRB     r1,[r0,#0]
;;;161    			return (uint8_t*)p1;
000048  4620              MOV      r0,r4
;;;162    		}
;;;163    
;;;164    
;;;165    	}
;;;166    	return 0;
;;;167    }
00004a  bd10              POP      {r4,pc}
                  |L6.76|
00004c  2000              MOVS     r0,#0                 ;166
00004e  bd10              POP      {r4,pc}
;;;168    
                          ENDP

                  |L6.80|
                          DCD      end
                  |L6.84|
000054  41544423          DCB      "ATD#100#%s",0
000058  31303023
00005c  257300  
00005f  00                DCB      0
                  |L6.96|
000060  2b435553          DCB      "+CUSD: 0,",0
000064  443a2030
000068  2c00    
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.HAL_GPIO_EXTI_Callback||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_EXTI_Callback PROC
;;;67     *******************************************************************/
;;;68     void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
000000  4770              BX       lr
;;;69     	
;;;70     }
;;;71     	
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Hardware\\GSM_LIB\\GENERAL\\gsm.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_gsm_c_GSM_AT____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___5_gsm_c_GSM_AT____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_gsm_c_GSM_AT____REVSH|
#line 402
|__asm___5_gsm_c_GSM_AT____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_gsm_c_GSM_AT____RRX|
#line 587
|__asm___5_gsm_c_GSM_AT____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
