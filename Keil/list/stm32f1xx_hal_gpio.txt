; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -ogsm_stm32f103\stm32f1xx_hal_gpio.o --asm_dir=..\..\list\ --list_dir=..\..\list\ --depend=gsm_stm32f103\stm32f1xx_hal_gpio.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I..\Hardware\SSD1306 -I..\Hardware\delay -I..\Hardware\GSM_LIB\GENERAL -I..\Hardware\GSM_LIB\USART -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM3 -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS -IE:\MC\2.STM32\STMProjects\GSM\GSM_M590\Project\gsm_stm32f103\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=gsm_stm32f103\stm32f1xx_hal_gpio.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_gpio.c]
                          THUMB

                          AREA ||i.HAL_GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_DeInit PROC
;;;366      */
;;;367    void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;368    { 
;;;369      uint32_t position = 0x00U;
000004  2200              MOVS     r2,#0
;;;370      uint32_t iocurrent = 0x00U;
;;;371      uint32_t tmp = 0x00U;
;;;372      __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
;;;373      uint32_t registeroffset = 0U;
;;;374     
;;;375      /* Check the parameters */
;;;376      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;377      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;378    
;;;379      /* Configure the port pins */
;;;380      while ((GPIO_Pin >> position) != 0U)
;;;381      {
;;;382        /* Get current io position */
;;;383        iocurrent = (GPIO_Pin) & (1U << position);
;;;384    
;;;385        if (iocurrent)
;;;386        {
;;;387          /*------------------------- GPIO Mode Configuration --------------------*/
;;;388          /* Check if the current bit belongs to first half or last half of the pin count number
;;;389           in order to address CRH or CRL register */
;;;390          configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
;;;391          registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
;;;392          
;;;393          /* CRL/CRH default value is floating input(0x04) shifted to correct position */
;;;394          MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), GPIO_CRL_CNF0_0 << registeroffset);
000006  f04f0c0f          MOV      r12,#0xf
;;;395          
;;;396          /* ODR default value is 0 */
;;;397          CLEAR_BIT(GPIOx->ODR, iocurrent);
;;;398          
;;;399          /*------------------------- EXTI Mode Configuration --------------------*/
;;;400          /* Clear the External Interrupt or Event for the current IO */
;;;401          
;;;402          tmp = AFIO->EXTICR[position >> 2U];
00000a  f8df80c8          LDR      r8,|L1.212|
00000e  e05c              B        |L1.202|
                  |L1.16|
000010  2301              MOVS     r3,#1                 ;383
000012  4093              LSLS     r3,r3,r2              ;383
000014  400b              ANDS     r3,r3,r1              ;383
000016  b383              CBZ      r3,|L1.122|
000018  2bff              CMP      r3,#0xff              ;390
00001a  d801              BHI      |L1.32|
00001c  4604              MOV      r4,r0                 ;390
00001e  e001              B        |L1.36|
                  |L1.32|
000020  f1000404          ADD      r4,r0,#4              ;390
                  |L1.36|
000024  d802              BHI      |L1.44|
000026  ea4f0582          LSL      r5,r2,#2              ;391
00002a  e003              B        |L1.52|
                  |L1.44|
00002c  f1a20508          SUB      r5,r2,#8              ;391
000030  ea4f0585          LSL      r5,r5,#2              ;391
                  |L1.52|
000034  6827              LDR      r7,[r4,#0]            ;394
000036  fa0cf905          LSL      r9,r12,r5             ;394
00003a  ea270709          BIC      r7,r7,r9              ;394
00003e  f04f0904          MOV      r9,#4                 ;394
000042  fa09f905          LSL      r9,r9,r5              ;394
000046  ea470709          ORR      r7,r7,r9              ;394
00004a  4666              MOV      r6,r12                ;394
00004c  6027              STR      r7,[r4,#0]            ;394
00004e  68c4              LDR      r4,[r0,#0xc]          ;397
000050  ea240403          BIC      r4,r4,r3              ;397
000054  60c4              STR      r4,[r0,#0xc]          ;397
000056  f0220403          BIC      r4,r2,#3
00005a  eb040508          ADD      r5,r4,r8
00005e  68ac              LDR      r4,[r5,#8]
;;;403          tmp &= 0x0FU << (4U * (position & 0x03U));
000060  ea4f7782          LSL      r7,r2,#30
000064  ea4f7717          LSR      r7,r7,#28
000068  fa06f607          LSL      r6,r6,r7
00006c  ea060904          AND      r9,r6,r4
;;;404          if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
000070  4c19              LDR      r4,|L1.216|
000072  42a0              CMP      r0,r4
000074  d102              BNE      |L1.124|
000076  2400              MOVS     r4,#0
000078  e010              B        |L1.156|
                  |L1.122|
00007a  e025              B        |L1.200|
                  |L1.124|
00007c  4c17              LDR      r4,|L1.220|
00007e  42a0              CMP      r0,r4
000080  d101              BNE      |L1.134|
000082  2401              MOVS     r4,#1
000084  e00a              B        |L1.156|
                  |L1.134|
000086  4c16              LDR      r4,|L1.224|
000088  42a0              CMP      r0,r4
00008a  d101              BNE      |L1.144|
00008c  2402              MOVS     r4,#2
00008e  e005              B        |L1.156|
                  |L1.144|
000090  4c14              LDR      r4,|L1.228|
000092  42a0              CMP      r0,r4
000094  d101              BNE      |L1.154|
000096  2403              MOVS     r4,#3
000098  e000              B        |L1.156|
                  |L1.154|
00009a  2404              MOVS     r4,#4
                  |L1.156|
00009c  40bc              LSLS     r4,r4,r7
00009e  454c              CMP      r4,r9
0000a0  d112              BNE      |L1.200|
;;;405          {
;;;406            tmp = 0x0FU << (4U * (position & 0x03U));
;;;407            CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
0000a2  68ac              LDR      r4,[r5,#8]
0000a4  43b4              BICS     r4,r4,r6
0000a6  60ac              STR      r4,[r5,#8]
;;;408              
;;;409            /* Clear EXTI line configuration */
;;;410            CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
0000a8  4c0f              LDR      r4,|L1.232|
0000aa  6825              LDR      r5,[r4,#0]
0000ac  439d              BICS     r5,r5,r3
0000ae  6025              STR      r5,[r4,#0]
;;;411            CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
0000b0  1d24              ADDS     r4,r4,#4
0000b2  6825              LDR      r5,[r4,#0]
0000b4  439d              BICS     r5,r5,r3
0000b6  6025              STR      r5,[r4,#0]
;;;412            
;;;413            /* Clear Rising Falling edge configuration */
;;;414            CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
0000b8  1d24              ADDS     r4,r4,#4
0000ba  6825              LDR      r5,[r4,#0]
0000bc  439d              BICS     r5,r5,r3
0000be  6025              STR      r5,[r4,#0]
;;;415            CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
0000c0  1d24              ADDS     r4,r4,#4
0000c2  6825              LDR      r5,[r4,#0]
0000c4  439d              BICS     r5,r5,r3
0000c6  6025              STR      r5,[r4,#0]
                  |L1.200|
;;;416          }
;;;417        }
;;;418        
;;;419        position++;
0000c8  1c52              ADDS     r2,r2,#1
                  |L1.202|
0000ca  fa31f302          LSRS     r3,r1,r2              ;380
0000ce  d19f              BNE      |L1.16|
;;;420      }
;;;421    }
0000d0  e8bd83f0          POP      {r4-r9,pc}
;;;422    
                          ENDP

                  |L1.212|
                          DCD      0x40010000
                  |L1.216|
                          DCD      0x40010800
                  |L1.220|
                          DCD      0x40010c00
                  |L1.224|
                          DCD      0x40011000
                  |L1.228|
                          DCD      0x40011400
                  |L1.232|
                          DCD      0x40010400

                          AREA ||i.HAL_GPIO_EXTI_Callback||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_EXTI_Callback PROC
;;;570      */
;;;571    __weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
000000  4770              BX       lr
;;;572    {
;;;573      /* Prevent unused argument(s) compilation warning */
;;;574      UNUSED(GPIO_Pin);
;;;575      /* NOTE: This function Should not be modified, when the callback is needed,
;;;576               the HAL_GPIO_EXTI_Callback could be implemented in the user file
;;;577       */
;;;578    }
;;;579    
                          ENDP


                          AREA ||i.HAL_GPIO_EXTI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_EXTI_IRQHandler PROC
;;;555      */
;;;556    void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
000000  b510              PUSH     {r4,lr}
;;;557    {
;;;558      /* EXTI line interrupt detected */
;;;559      if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
000002  4904              LDR      r1,|L3.20|
000004  680a              LDR      r2,[r1,#0]
000006  4202              TST      r2,r0
000008  d002              BEQ      |L3.16|
;;;560      {
;;;561        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
00000a  6008              STR      r0,[r1,#0]
;;;562        HAL_GPIO_EXTI_Callback(GPIO_Pin);
00000c  f7fffffe          BL       HAL_GPIO_EXTI_Callback
                  |L3.16|
;;;563      }
;;;564    }
000010  bd10              POP      {r4,pc}
;;;565    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x40010414

                          AREA ||i.HAL_GPIO_Init||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_Init PROC
;;;195      */
;;;196    void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;197    {
;;;198      uint32_t position;
;;;199      uint32_t ioposition = 0x00U;
;;;200      uint32_t iocurrent = 0x00U;
;;;201      uint32_t temp = 0x00U;
;;;202      uint32_t config = 0x00U;
000004  2300              MOVS     r3,#0
;;;203      __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
;;;204      uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
;;;205      
;;;206      /* Check the parameters */
;;;207      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;208      assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
;;;209      assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
;;;210    
;;;211      /* Configure the port pins */
;;;212      for (position = 0U; position < GPIO_NUMBER; position++)
000006  2400              MOVS     r4,#0
;;;213      {
;;;214        /* Get the IO position */
;;;215        ioposition = (0x01U << position);
;;;216        
;;;217        /* Get the current IO position */
;;;218        iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
;;;219    
;;;220        if (iocurrent == ioposition)
;;;221        {
;;;222          /* Check the Alternate function parameters */
;;;223          assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
;;;224    
;;;225          /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
;;;226          switch (GPIO_Init->Mode)
;;;227          {
;;;228            /* If we are configuring the pin in OUTPUT push-pull mode */
;;;229            case GPIO_MODE_OUTPUT_PP:
;;;230              /* Check the GPIO speed parameter */
;;;231              assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
;;;232              config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
;;;233              break;
;;;234              
;;;235            /* If we are configuring the pin in OUTPUT open-drain mode */
;;;236            case GPIO_MODE_OUTPUT_OD:
;;;237              /* Check the GPIO speed parameter */
;;;238              assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
;;;239              config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
;;;240              break;
;;;241              
;;;242            /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
;;;243            case GPIO_MODE_AF_PP:
;;;244              /* Check the GPIO speed parameter */
;;;245              assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
;;;246              config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
;;;247              break;
;;;248              
;;;249            /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
;;;250            case GPIO_MODE_AF_OD:
;;;251              /* Check the GPIO speed parameter */
;;;252              assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
;;;253              config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
;;;254              break;
;;;255              
;;;256            /* If we are configuring the pin in INPUT (also applicable to EVENT and IT mode) */
;;;257            case GPIO_MODE_INPUT:
;;;258            case GPIO_MODE_IT_RISING:
;;;259            case GPIO_MODE_IT_FALLING:
;;;260            case GPIO_MODE_IT_RISING_FALLING:
;;;261            case GPIO_MODE_EVT_RISING:
;;;262            case GPIO_MODE_EVT_FALLING:
;;;263            case GPIO_MODE_EVT_RISING_FALLING:
;;;264              /* Check the GPIO pull parameter */
;;;265              assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
;;;266              if(GPIO_Init->Pull == GPIO_NOPULL)
;;;267              {  
;;;268                config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
;;;269              }
;;;270              else if(GPIO_Init->Pull == GPIO_PULLUP)
;;;271              {
;;;272                config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
;;;273                
;;;274                /* Set the corresponding ODR bit */
;;;275                GPIOx->BSRR = ioposition;
;;;276              }
;;;277              else /* GPIO_PULLDOWN */
;;;278              {
;;;279                config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
;;;280                
;;;281                /* Reset the corresponding ODR bit */
;;;282                GPIOx->BRR = ioposition;
;;;283              }
;;;284              break; 
;;;285              
;;;286            /* If we are configuring the pin in INPUT analog mode */
;;;287            case GPIO_MODE_ANALOG:
;;;288                config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
;;;289              break;
;;;290            
;;;291            /* Parameters are checked with assert_param */
;;;292            default:
;;;293              break;
;;;294          }
;;;295          
;;;296          /* Check if the current bit belongs to first half or last half of the pin count number
;;;297           in order to address CRH or CRL register*/
;;;298          configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
;;;299          registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
;;;300          
;;;301          /* Apply the new configuration of the pin to the register */
;;;302          MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
;;;303          
;;;304          /*--------------------- EXTI Mode Configuration ------------------------*/
;;;305          /* Configure the External Interrupt or event for the current IO */
;;;306          if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
;;;307          {
;;;308            /* Enable AFIO Clock */
;;;309            __HAL_RCC_AFIO_CLK_ENABLE();
;;;310            temp = AFIO->EXTICR[position >> 2U];
;;;311            CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
;;;312            SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
;;;313            AFIO->EXTICR[position >> 2U] = temp;
;;;314            
;;;315    
;;;316            /* Configure the interrupt mask */
;;;317            if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
;;;318            {
;;;319              SET_BIT(EXTI->IMR, iocurrent); 
000008  f8df91c0          LDR      r9,|L4.460|
00000c  f04f080f          MOV      r8,#0xf               ;302
;;;320            } 
;;;321            else
;;;322            {
;;;323              CLEAR_BIT(EXTI->IMR, iocurrent); 
;;;324            } 
;;;325            
;;;326            /* Configure the event mask */
;;;327            if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
;;;328            {
;;;329              SET_BIT(EXTI->EMR, iocurrent); 
000010  f1090a04          ADD      r10,r9,#4
;;;330            } 
;;;331            else
;;;332            {
;;;333              CLEAR_BIT(EXTI->EMR, iocurrent); 
;;;334            }
;;;335            
;;;336            /* Enable or disable the rising trigger */
;;;337            if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
;;;338            {
;;;339              SET_BIT(EXTI->RTSR, iocurrent); 
000014  f10a0b04          ADD      r11,r10,#4
;;;340            } 
;;;341            else
;;;342            {
;;;343              CLEAR_BIT(EXTI->RTSR, iocurrent); 
;;;344            }
;;;345            
;;;346            /* Enable or disable the falling trigger */
;;;347            if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
;;;348            {
;;;349              SET_BIT(EXTI->FTSR, iocurrent); 
000018  f10b0e04          ADD      lr,r11,#4
                  |L4.28|
00001c  2701              MOVS     r7,#1                 ;215
00001e  40a7              LSLS     r7,r7,r4              ;215
000020  680a              LDR      r2,[r1,#0]            ;218
000022  403a              ANDS     r2,r2,r7              ;218
000024  42ba              CMP      r2,r7                 ;220
000026  d175              BNE      |L4.276|
000028  f8dfc1a4          LDR      r12,|L4.464|
00002c  684d              LDR      r5,[r1,#4]            ;226
00002e  eba5060c          SUB      r6,r5,r12             ;226
000032  4565              CMP      r5,r12                ;226
000034  d02b              BEQ      |L4.142|
000036  dc0d              BGT      |L4.84|
000038  2d03              CMP      r5,#3                 ;226
00003a  d034              BEQ      |L4.166|
00003c  dc05              BGT      |L4.74|
00003e  b335              CBZ      r5,|L4.142|
000040  2d01              CMP      r5,#1                 ;226
000042  d019              BEQ      |L4.120|
000044  2d02              CMP      r5,#2                 ;226
000046  d12f              BNE      |L4.168|
000048  e01b              B        |L4.130|
                  |L4.74|
00004a  2d11              CMP      r5,#0x11              ;226
00004c  d016              BEQ      |L4.124|
00004e  2d12              CMP      r5,#0x12              ;226
000050  d12a              BNE      |L4.168|
000052  e019              B        |L4.136|
                  |L4.84|
000054  f5b61f88          CMP      r6,#0x110000          ;226
000058  d019              BEQ      |L4.142|
00005a  dc06              BGT      |L4.106|
00005c  f5b63f80          CMP      r6,#0x10000           ;226
000060  d015              BEQ      |L4.142|
000062  f5b61f80          CMP      r6,#0x100000          ;226
000066  d11f              BNE      |L4.168|
000068  e011              B        |L4.142|
                  |L4.106|
00006a  f5b61f00          CMP      r6,#0x200000          ;226
00006e  d00e              BEQ      |L4.142|
000070  f5b61f04          CMP      r6,#0x210000          ;226
000074  d118              BNE      |L4.168|
000076  e00a              B        |L4.142|
                  |L4.120|
000078  68cb              LDR      r3,[r1,#0xc]          ;232
00007a  e015              B        |L4.168|
                  |L4.124|
00007c  68cb              LDR      r3,[r1,#0xc]          ;239
00007e  1d1b              ADDS     r3,r3,#4              ;239
000080  e012              B        |L4.168|
                  |L4.130|
000082  68cb              LDR      r3,[r1,#0xc]          ;246
000084  3308              ADDS     r3,r3,#8              ;246
000086  e00f              B        |L4.168|
                  |L4.136|
000088  68cb              LDR      r3,[r1,#0xc]          ;253
00008a  330c              ADDS     r3,r3,#0xc            ;253
00008c  e00c              B        |L4.168|
                  |L4.142|
00008e  688b              LDR      r3,[r1,#8]            ;266
000090  b123              CBZ      r3,|L4.156|
000092  2b01              CMP      r3,#1                 ;270
000094  d004              BEQ      |L4.160|
000096  2308              MOVS     r3,#8                 ;279
000098  6147              STR      r7,[r0,#0x14]         ;282
00009a  e005              B        |L4.168|
                  |L4.156|
00009c  2304              MOVS     r3,#4                 ;268
00009e  e003              B        |L4.168|
                  |L4.160|
0000a0  2308              MOVS     r3,#8                 ;272
0000a2  6107              STR      r7,[r0,#0x10]         ;275
0000a4  e000              B        |L4.168|
                  |L4.166|
0000a6  2300              MOVS     r3,#0                 ;288
                  |L4.168|
0000a8  2aff              CMP      r2,#0xff              ;298
0000aa  d801              BHI      |L4.176|
0000ac  4605              MOV      r5,r0                 ;298
0000ae  e001              B        |L4.180|
                  |L4.176|
0000b0  f1000504          ADD      r5,r0,#4              ;298
                  |L4.180|
0000b4  d802              BHI      |L4.188|
0000b6  ea4f0684          LSL      r6,r4,#2              ;299
0000ba  e003              B        |L4.196|
                  |L4.188|
0000bc  f1a40608          SUB      r6,r4,#8              ;299
0000c0  ea4f0686          LSL      r6,r6,#2              ;299
                  |L4.196|
0000c4  682f              LDR      r7,[r5,#0]            ;302
0000c6  fa08fc06          LSL      r12,r8,r6             ;302
0000ca  ea27070c          BIC      r7,r7,r12             ;302
0000ce  fa03f606          LSL      r6,r3,r6              ;302
0000d2  ea470706          ORR      r7,r7,r6              ;302
0000d6  602f              STR      r7,[r5,#0]            ;302
0000d8  684d              LDR      r5,[r1,#4]            ;306
0000da  00ed              LSLS     r5,r5,#3              ;306
0000dc  d570              BPL      |L4.448|
0000de  4d3d              LDR      r5,|L4.468|
0000e0  69ae              LDR      r6,[r5,#0x18]         ;309
0000e2  f0460601          ORR      r6,r6,#1              ;309
0000e6  61ae              STR      r6,[r5,#0x18]         ;309
0000e8  69ad              LDR      r5,[r5,#0x18]         ;309
0000ea  f0050501          AND      r5,r5,#1              ;309
0000ee  9500              STR      r5,[sp,#0]            ;309
0000f0  4d39              LDR      r5,|L4.472|
0000f2  f0240603          BIC      r6,r4,#3              ;310
0000f6  1977              ADDS     r7,r6,r5              ;310
0000f8  68be              LDR      r6,[r7,#8]            ;310
0000fa  07a5              LSLS     r5,r4,#30             ;311
0000fc  0f2d              LSRS     r5,r5,#28             ;311
0000fe  fa08fc05          LSL      r12,r8,r5             ;311
000102  ea26060c          BIC      r6,r6,r12             ;311
000106  f8dfc0d4          LDR      r12,|L4.476|
00010a  4560              CMP      r0,r12                ;312
00010c  d103              BNE      |L4.278|
00010e  f04f0c00          MOV      r12,#0                ;312
000112  e017              B        |L4.324|
                  |L4.276|
000114  e054              B        |L4.448|
                  |L4.278|
000116  f8dfc0c8          LDR      r12,|L4.480|
00011a  4560              CMP      r0,r12                ;312
00011c  d102              BNE      |L4.292|
00011e  f04f0c01          MOV      r12,#1                ;312
000122  e00f              B        |L4.324|
                  |L4.292|
000124  f8dfc0bc          LDR      r12,|L4.484|
000128  4560              CMP      r0,r12                ;312
00012a  d102              BNE      |L4.306|
00012c  f04f0c02          MOV      r12,#2                ;312
000130  e008              B        |L4.324|
                  |L4.306|
000132  f8dfc0b4          LDR      r12,|L4.488|
000136  4560              CMP      r0,r12                ;312
000138  d102              BNE      |L4.320|
00013a  f04f0c03          MOV      r12,#3                ;312
00013e  e001              B        |L4.324|
                  |L4.320|
000140  f04f0c04          MOV      r12,#4                ;312
                  |L4.324|
000144  fa0cfc05          LSL      r12,r12,r5            ;312
000148  ea4c0c06          ORR      r12,r12,r6            ;312
00014c  f8c7c008          STR      r12,[r7,#8]           ;313
000150  684d              LDR      r5,[r1,#4]            ;317
000152  03ed              LSLS     r5,r5,#15             ;317
000154  d505              BPL      |L4.354|
000156  f8d95000          LDR      r5,[r9,#0]            ;319
00015a  4315              ORRS     r5,r5,r2              ;319
00015c  f8c95000          STR      r5,[r9,#0]            ;319
000160  e004              B        |L4.364|
                  |L4.354|
000162  f8d95000          LDR      r5,[r9,#0]            ;323
000166  4395              BICS     r5,r5,r2              ;323
000168  f8c95000          STR      r5,[r9,#0]            ;323
                  |L4.364|
00016c  684d              LDR      r5,[r1,#4]            ;327
00016e  03ad              LSLS     r5,r5,#14             ;327
000170  d505              BPL      |L4.382|
000172  f8da5000          LDR      r5,[r10,#0]           ;329
000176  4315              ORRS     r5,r5,r2              ;329
000178  f8ca5000          STR      r5,[r10,#0]           ;329
00017c  e004              B        |L4.392|
                  |L4.382|
00017e  f8da5000          LDR      r5,[r10,#0]           ;333
000182  4395              BICS     r5,r5,r2              ;333
000184  f8ca5000          STR      r5,[r10,#0]           ;333
                  |L4.392|
000188  684d              LDR      r5,[r1,#4]            ;337
00018a  02ed              LSLS     r5,r5,#11             ;337
00018c  d505              BPL      |L4.410|
00018e  f8db5000          LDR      r5,[r11,#0]           ;339
000192  4315              ORRS     r5,r5,r2              ;339
000194  f8cb5000          STR      r5,[r11,#0]           ;339
000198  e004              B        |L4.420|
                  |L4.410|
00019a  f8db5000          LDR      r5,[r11,#0]           ;343
00019e  4395              BICS     r5,r5,r2              ;343
0001a0  f8cb5000          STR      r5,[r11,#0]           ;343
                  |L4.420|
0001a4  684d              LDR      r5,[r1,#4]            ;347
0001a6  02ad              LSLS     r5,r5,#10             ;347
0001a8  d505              BPL      |L4.438|
0001aa  f8de5000          LDR      r5,[lr,#0]
0001ae  4315              ORRS     r5,r5,r2
0001b0  f8ce5000          STR      r5,[lr,#0]
0001b4  e004              B        |L4.448|
                  |L4.438|
;;;350            } 
;;;351            else
;;;352            {
;;;353              CLEAR_BIT(EXTI->FTSR, iocurrent); 
0001b6  f8de5000          LDR      r5,[lr,#0]
0001ba  4395              BICS     r5,r5,r2
0001bc  f8ce5000          STR      r5,[lr,#0]
                  |L4.448|
0001c0  1c64              ADDS     r4,r4,#1              ;212
0001c2  2c10              CMP      r4,#0x10              ;212
0001c4  f4ffaf2a          BCC      |L4.28|
;;;354            }
;;;355          }
;;;356        }
;;;357      }
;;;358    }
0001c8  e8bd8ff8          POP      {r3-r11,pc}
;;;359    
                          ENDP

                  |L4.460|
                          DCD      0x40010400
                  |L4.464|
                          DCD      0x10110000
                  |L4.468|
                          DCD      0x40021000
                  |L4.472|
                          DCD      0x40010000
                  |L4.476|
                          DCD      0x40010800
                  |L4.480|
                          DCD      0x40010c00
                  |L4.484|
                          DCD      0x40011000
                  |L4.488|
                          DCD      0x40011400

                          AREA ||i.HAL_GPIO_LockPin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_LockPin PROC
;;;521    */
;;;522    HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  b508              PUSH     {r3,lr}
;;;523    {
;;;524      __IO uint32_t tmp = GPIO_LCKR_LCKK;
;;;525    
;;;526      /* Check the parameters */
;;;527      assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
;;;528      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;529    
;;;530      /* Apply lock key write sequence */
;;;531      SET_BIT(tmp, GPIO_Pin);
000002  f4413280          ORR      r2,r1,#0x10000
000006  9200              STR      r2,[sp,#0]
;;;532      /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
;;;533      GPIOx->LCKR = tmp;
000008  9a00              LDR      r2,[sp,#0]
00000a  6182              STR      r2,[r0,#0x18]
;;;534      /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
;;;535      GPIOx->LCKR = GPIO_Pin;
00000c  6181              STR      r1,[r0,#0x18]
;;;536      /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
;;;537      GPIOx->LCKR = tmp;
00000e  9900              LDR      r1,[sp,#0]
000010  6181              STR      r1,[r0,#0x18]
;;;538      /* Read LCKK bit*/
;;;539      tmp = GPIOx->LCKR;
000012  6981              LDR      r1,[r0,#0x18]
000014  9100              STR      r1,[sp,#0]
;;;540    
;;;541      if((uint32_t)(GPIOx->LCKR & GPIO_LCKR_LCKK))
000016  6980              LDR      r0,[r0,#0x18]
000018  03c0              LSLS     r0,r0,#15
00001a  d501              BPL      |L5.32|
;;;542      {
;;;543        return HAL_OK;
00001c  2000              MOVS     r0,#0
;;;544      }
;;;545      else
;;;546      {
;;;547        return HAL_ERROR;
;;;548      }
;;;549    }
00001e  bd08              POP      {r3,pc}
                  |L5.32|
000020  2001              MOVS     r0,#1                 ;547
000022  bd08              POP      {r3,pc}
;;;550    
                          ENDP


                          AREA ||i.HAL_GPIO_ReadPin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_ReadPin PROC
;;;447      */
;;;448    GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6880              LDR      r0,[r0,#8]
;;;449    {
;;;450      GPIO_PinState bitstatus;
;;;451    
;;;452      /* Check the parameters */
;;;453      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;454    
;;;455      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
000002  4208              TST      r0,r1
000004  d001              BEQ      |L6.10|
;;;456      {
;;;457        bitstatus = GPIO_PIN_SET;
000006  2001              MOVS     r0,#1
;;;458      }
;;;459      else
;;;460      {
;;;461        bitstatus = GPIO_PIN_RESET;
;;;462      }
;;;463      return bitstatus;
;;;464    }
000008  4770              BX       lr
                  |L6.10|
00000a  2000              MOVS     r0,#0                 ;461
00000c  4770              BX       lr
;;;465    
                          ENDP


                          AREA ||i.HAL_GPIO_TogglePin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_TogglePin PROC
;;;503      */
;;;504    void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  68c2              LDR      r2,[r0,#0xc]
;;;505    {
;;;506      /* Check the parameters */
;;;507      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;508    
;;;509      GPIOx->ODR ^= GPIO_Pin;
000002  404a              EORS     r2,r2,r1
000004  60c2              STR      r2,[r0,#0xc]
;;;510    }
000006  4770              BX       lr
;;;511    
                          ENDP


                          AREA ||i.HAL_GPIO_WritePin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_WritePin PROC
;;;481      */
;;;482    void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
000000  2a00              CMP      r2,#0
;;;483    {
000002  d001              BEQ      |L8.8|
;;;484      /* Check the parameters */
;;;485      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;486      assert_param(IS_GPIO_PIN_ACTION(PinState));
;;;487    
;;;488      if(PinState != GPIO_PIN_RESET)
;;;489      {
;;;490        GPIOx->BSRR = GPIO_Pin;
000004  6101              STR      r1,[r0,#0x10]
;;;491      }
;;;492      else
;;;493      {
;;;494        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
;;;495      }
;;;496    }
000006  4770              BX       lr
                  |L8.8|
000008  0409              LSLS     r1,r1,#16             ;494
00000a  6101              STR      r1,[r0,#0x10]         ;494
00000c  4770              BX       lr
;;;497    
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_gpio_c_ea787061____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___20_stm32f1xx_hal_gpio_c_ea787061____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_gpio_c_ea787061____REVSH|
#line 402
|__asm___20_stm32f1xx_hal_gpio_c_ea787061____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_gpio_c_ea787061____RRX|
#line 587
|__asm___20_stm32f1xx_hal_gpio_c_ea787061____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
