#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"




















 

#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Include\\freertos_evr.h"




















 




#line 1 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\string.h"
 
 
 
 




 








 












#line 38 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\string.h"


  



    typedef unsigned int size_t;    
#line 54 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\string.h"




extern __declspec(__nothrow) void *memcpy(void * __restrict  ,
                    const void * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
   




 
extern __declspec(__nothrow) void *memmove(void *  ,
                    const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
   







 
extern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
   




 
extern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
   





 

extern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
   




 
extern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
   






 






 

extern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
   





 
extern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
   




 
extern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
   






 
extern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
   





 
extern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
   






 
extern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
   







 

extern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
   













 


#line 193 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\string.h"
extern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));

   





 

#line 209 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\string.h"
extern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));

   




 

extern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
   




 

#line 232 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\string.h"
extern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));

   




 

#line 247 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\string.h"
extern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));

   





 

extern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
   



 

#line 270 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\string.h"
extern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));

   





 

extern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
extern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));

extern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));

   

































 

extern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
   



 
extern __declspec(__nothrow) char *strerror(int  );
   





 
extern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
   



 

extern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
   
















 

extern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
   






















 

extern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
    














































 







#line 502 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\string.h"



 

#line 27 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Include\\freertos_evr.h"
#line 1 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"
 
 





 









     
#line 27 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"
     











#line 46 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"





 

     

     
typedef   signed          char int8_t;
typedef   signed short     int int16_t;
typedef   signed           int int32_t;
typedef   signed       __int64 int64_t;

     
typedef unsigned          char uint8_t;
typedef unsigned short     int uint16_t;
typedef unsigned           int uint32_t;
typedef unsigned       __int64 uint64_t;

     

     
     
typedef   signed          char int_least8_t;
typedef   signed short     int int_least16_t;
typedef   signed           int int_least32_t;
typedef   signed       __int64 int_least64_t;

     
typedef unsigned          char uint_least8_t;
typedef unsigned short     int uint_least16_t;
typedef unsigned           int uint_least32_t;
typedef unsigned       __int64 uint_least64_t;

     

     
typedef   signed           int int_fast8_t;
typedef   signed           int int_fast16_t;
typedef   signed           int int_fast32_t;
typedef   signed       __int64 int_fast64_t;

     
typedef unsigned           int uint_fast8_t;
typedef unsigned           int uint_fast16_t;
typedef unsigned           int uint_fast32_t;
typedef unsigned       __int64 uint_fast64_t;

     




typedef   signed           int intptr_t;
typedef unsigned           int uintptr_t;


     
typedef   signed     long long intmax_t;
typedef unsigned     long long uintmax_t;




     

     





     





     





     

     





     





     





     

     





     





     





     

     






     






     






     

     


     


     


     

     
#line 216 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"

     



     






     
    
 



#line 241 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"

     







     










     











#line 305 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"






 
#line 28 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Include\\freertos_evr.h"

#line 1 "E:\\MC\\2.STM32\\STMProjects\\GSM\\GSM_M590\\Project\\gsm_stm32f103\\MDK-ARM\\RTE\\RTE_Components.h"







 




#line 19 "E:\\MC\\2.STM32\\STMProjects\\GSM\\GSM_M590\\Project\\gsm_stm32f103\\MDK-ARM\\RTE\\RTE_Components.h"

#line 30 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Include\\freertos_evr.h"


   





 









 
extern void EvrFreeRTOSTasks_TaskCreate (void* pxNewTCB);



 
extern void EvrFreeRTOSTasks_TaskCreateFailed (void);




 
extern void EvrFreeRTOSTasks_TaskDelete (void* pxTCB);




 
extern void EvrFreeRTOSTasks_TaskDelayUntil (uint32_t xTimeToWake);




 
extern void EvrFreeRTOSTasks_TaskDelay (uint32_t xTicksToDelay);





 
extern void EvrFreeRTOSTasks_TaskPrioritySet (void* pxTCB, uint32_t uxNewPriority);




 
extern void EvrFreeRTOSTasks_TaskSuspend (void* pxTCB);




 
extern void EvrFreeRTOSTasks_TaskResume (void* pxTCB);




 
extern void EvrFreeRTOSTasks_TaskResumeFromIsr (void* pxTCB);




 
extern void EvrFreeRTOSTasks_TaskIncrementTick (uint32_t xTickCount);




 
extern void EvrFreeRTOSTasks_IncreaseTickCount (uint32_t xTicksToJump);




 
extern void EvrFreeRTOSTasks_TaskSwitchedOut (void* pxCurrentTCB);





 
extern void EvrFreeRTOSTasks_TaskSwitchedIn  (void* pxCurrentTCB, uint32_t uxTopPriority);





 
extern void EvrFreeRTOSTasks_TaskPriorityInherit (void* pxTCBOfMutexHolder, uint32_t uxInheritedPriority);





 
extern void EvrFreeRTOSTasks_TaskPriorityDisinherit (void* pxTCBOfMutexHolder, uint32_t uxOriginalPriority);




 
extern void EvrFreeRTOSTasks_MovedTaskToReadyState (void* pxTCB);




 
extern void EvrFreeRTOSTasks_PostMovedTaskToReadyState (void* pxTCB);




 
extern void EvrFreeRTOSTasks_LowPowerIdleBegin (uint32_t xExpectedIdleTime);



 
extern void EvrFreeRTOSTasks_LowPowerIdleEnd (void);




 
extern void EvrFreeRTOSTasks_TaskNotifyTakeBlock (uint32_t xTicksToWait);




 
extern void EvrFreeRTOSTasks_TaskNotifyTake (uint32_t ulNotifiedValue);




 
extern void EvrFreeRTOSTasks_TaskNotifyWaitBlock (uint32_t xTicksToWait);




 
extern void EvrFreeRTOSTasks_TaskNotifyWait (uint32_t ulNotifiedValue);







 
extern void EvrFreeRTOSTasks_TaskNotify (void* xTaskToNotify, uint32_t ulValue, uint32_t eAction, uint32_t ulNotifiedValue);







 
extern void EvrFreeRTOSTasks_TaskNotifyFromIsr (void* xTaskToNotify, uint32_t ulValue, uint32_t eAction, uint32_t ulNotifiedValue);





 
extern void EvrFreeRTOSTasks_TaskNotifyGiveFromIsr (void* xTaskToNotify, uint32_t ulNotifiedValue);




 
extern void EvrFreeRTOSQueue_QueueCreate (void* pxQueue);




 
extern void EvrFreeRTOSQueue_QueueCreateFailed (uint32_t ucQueueType);




 
extern void EvrFreeRTOSQueue_CreateMutex (void* pxNewQueue);



 
extern void EvrFreeRTOSQueue_CreateMutexFailed (void);




 
extern void EvrFreeRTOSQueue_GiveMutexRecursive (void* pxMutex);




 
extern void EvrFreeRTOSQueue_GiveMutexRecursiveFailed (void* pxMutex);




 
extern void EvrFreeRTOSQueue_TakeMutexRecursive (void* pxMutex);




 
extern void EvrFreeRTOSQueue_TakeMutexRecursiveFailed (void* pxMutex);




 
extern void EvrFreeRTOSQueue_CreateCountingSemaphore (void* xHandle);



 
extern void EvrFreeRTOSQueue_CreateCountingSemaphoreFailed (void);




 
extern void EvrFreeRTOSQueue_QueueSend (void* pxQueue);




 
extern void EvrFreeRTOSQueue_QueueSendFailed (void* pxQueue);




 
extern void EvrFreeRTOSQueue_QueueReceive (void* pxQueue);




 
extern void EvrFreeRTOSQueue_QueuePeek (void* pxQueue);




 
extern void EvrFreeRTOSQueue_QueuePeekFromIsr (void* pxQueue);




 
extern void EvrFreeRTOSQueue_QueueReceiveFailed (void* pxQueue);




 
extern void EvrFreeRTOSQueue_QueueSendFromIsr (void* pxQueue);




 
extern void EvrFreeRTOSQueue_QueueSendFromIsrFailed (void* pxQueue);




 
extern void EvrFreeRTOSQueue_QueueReceiveFromIsr (void* pxQueue);




 
extern void EvrFreeRTOSQueue_QueueReceiveFromIsrFailed (void* pxQueue);




 
extern void EvrFreeRTOSQueue_QueuePeekFromIsrFailed (void* pxQueue);




 
extern void EvrFreeRTOSQueue_QueueDelete (void* pxQueue);





 
extern void EvrFreeRTOSQueue_QueueRegistryAdd (void* pxQueue, const char *pcQueueName);




 
extern void EvrFreeRTOSQueue_BlockingOnQueueReceive (void* pxQueue);




 
extern void EvrFreeRTOSQueue_BlockingOnQueueSend (void* pxQueue);




 
extern void EvrFreeRTOSTimers_TimerCreate (void* pxNewTimer);



 
extern void EvrFreeRTOSTimers_TimerCreateFailed (void);







 
extern void EvrFreeRTOSTimers_TimerCommandSend (void* pxTimer, uint32_t xCommandID, uint32_t xOptionalValue, uint32_t xReturn);






 
extern void EvrFreeRTOSTimers_TimerCommandReceived (void* pxTimer, uint32_t xCommandID, uint32_t xOptionalValue);




 
extern void EvrFreeRTOSTimers_TimerExpired (void* pxTimer);







 
extern void EvrFreeRTOSTimers_PendFuncCall (void* pxFunctionToPend, void *pvParameter1, uint32_t ulParameter2, uint32_t xReturn);







 
extern void EvrFreeRTOSTimers_PendFuncCallFromIsr (void* pxFunctionToPend, void *pvParameter1, uint32_t ulParameter2, uint32_t xReturn);




 
extern void EvrFreeRTOSEventGroups_EventGroupCreate (void* pxEventGroup);



 
extern void EvrFreeRTOSEventGroups_EventGroupCreateFailed (void);






 
extern void EvrFreeRTOSEventGroups_EventGroupSyncBlock (void* pxEventGroup, uint32_t uxBitsToSet, uint32_t uxBitsToWaitFor);







 
extern void EvrFreeRTOSEventGroups_EventGroupSyncEnd (void* pxEventGroup, uint32_t uxBitsToSet, uint32_t uxBitsToWaitFor, uint32_t xTimeoutOccurred);





 
extern void EvrFreeRTOSEventGroups_EventGroupWaitBitsBlock (void* pxEventGroup, uint32_t uxBitsToWaitFor);






 
extern void EvrFreeRTOSEventGroups_EventGroupWaitBitsEnd (void* pxEventGroup, uint32_t uxBitsToWaitFor, uint32_t xTimeoutOccurred);





 
extern void EvrFreeRTOSEventGroups_EventGroupClearBits (void* pxEventGroup, uint32_t uxBitsToClear);





 
extern void EvrFreeRTOSEventGroups_EventGroupClearBitsFromIsr (void* pxEventGroup, uint32_t uxBitsToClear);





 
extern void EvrFreeRTOSEventGroups_EventGroupSetBits (void* pxEventGroup, uint32_t uxBitsToSet);





 
extern void EvrFreeRTOSEventGroups_EventGroupSetBitsFromIsr (void* pxEventGroup, uint32_t uxBitsToSet);




 
extern void EvrFreeRTOSEventGroups_EventGroupDelete (void* pxEventGroup);





 
extern void EvrFreeRTOSHeap_Malloc (void *pvAddress, uint32_t uiSize);





 
extern void EvrFreeRTOSHeap_Free (void *pvAddress, uint32_t uiSize);


 










































































































 






































































































 






























 














































 










 






#line 24 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"
#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_compiler.h"
 




 
















 




#line 29 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_compiler.h"



 
#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
 




 
















 









 













   
   


 
#line 82 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"


 



 





 
 






 
 





 
static __inline uint32_t __get_CONTROL(void)
{
  register uint32_t __regControl         __asm("control");
  return(__regControl);
}






 
static __inline void __set_CONTROL(uint32_t control)
{
  register uint32_t __regControl         __asm("control");
  __regControl = control;
}






 
static __inline uint32_t __get_IPSR(void)
{
  register uint32_t __regIPSR          __asm("ipsr");
  return(__regIPSR);
}






 
static __inline uint32_t __get_APSR(void)
{
  register uint32_t __regAPSR          __asm("apsr");
  return(__regAPSR);
}






 
static __inline uint32_t __get_xPSR(void)
{
  register uint32_t __regXPSR          __asm("xpsr");
  return(__regXPSR);
}






 
static __inline uint32_t __get_PSP(void)
{
  register uint32_t __regProcessStackPointer  __asm("psp");
  return(__regProcessStackPointer);
}






 
static __inline void __set_PSP(uint32_t topOfProcStack)
{
  register uint32_t __regProcessStackPointer  __asm("psp");
  __regProcessStackPointer = topOfProcStack;
}






 
static __inline uint32_t __get_MSP(void)
{
  register uint32_t __regMainStackPointer     __asm("msp");
  return(__regMainStackPointer);
}






 
static __inline void __set_MSP(uint32_t topOfMainStack)
{
  register uint32_t __regMainStackPointer     __asm("msp");
  __regMainStackPointer = topOfMainStack;
}






 
static __inline uint32_t __get_PRIMASK(void)
{
  register uint32_t __regPriMask         __asm("primask");
  return(__regPriMask);
}






 
static __inline void __set_PRIMASK(uint32_t priMask)
{
  register uint32_t __regPriMask         __asm("primask");
  __regPriMask = (priMask);
}









 







 







 
static __inline uint32_t  __get_BASEPRI(void)
{
  register uint32_t __regBasePri         __asm("basepri");
  return(__regBasePri);
}






 
static __inline void __set_BASEPRI(uint32_t basePri)
{
  register uint32_t __regBasePri         __asm("basepri");
  __regBasePri = (basePri & 0xFFU);
}







 
static __inline void __set_BASEPRI_MAX(uint32_t basePri)
{
  register uint32_t __regBasePriMax      __asm("basepri_max");
  __regBasePriMax = (basePri & 0xFFU);
}






 
static __inline uint32_t __get_FAULTMASK(void)
{
  register uint32_t __regFaultMask       __asm("faultmask");
  return(__regFaultMask);
}






 
static __inline void __set_FAULTMASK(uint32_t faultMask)
{
  register uint32_t __regFaultMask       __asm("faultmask");
  __regFaultMask = (faultMask & (uint32_t)1U);
}





#line 356 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"



 


 



 




 






 







 






 








 










 










 











 








 

__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
{
  rev16 r0, r0
  bx lr
}








 

__attribute__((section(".revsh_text"))) static __inline __asm int32_t __REVSH(int32_t value)
{
  revsh r0, r0
  bx lr
}









 









 








 
#line 516 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"







 











 












 












 














 














 














 










 









 









 









 

__attribute__((section(".rrx_text"))) static __inline __asm uint32_t __RRX(uint32_t value)
{
  rrx r0, r0
  bx lr
}








 








 








 








 








 








 





   


 



 

#line 794 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
 


#line 35 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_compiler.h"




 
#line 220 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_compiler.h"




#line 25 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\FreeRTOS.h"



































































 






 
#line 1 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stddef.h"
 






 

 
 
 





 





#line 34 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stddef.h"




  typedef signed int ptrdiff_t;



  



    typedef unsigned int size_t;    
#line 57 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stddef.h"



   



      typedef unsigned short wchar_t;  
#line 82 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stddef.h"



    




   




  typedef long double max_align_t;









#line 114 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stddef.h"



 

#line 77 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\FreeRTOS.h"













 
#line 92 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\FreeRTOS.h"





 
#line 1 "E:\\MC\\2.STM32\\STMProjects\\GSM\\GSM_M590\\Project\\gsm_stm32f103\\MDK-ARM\\RTE\\RTOS\\FreeRTOSConfig.h"



































































 














 

#line 86 "E:\\MC\\2.STM32\\STMProjects\\GSM\\GSM_M590\\Project\\gsm_stm32f103\\MDK-ARM\\RTE\\RTOS\\FreeRTOSConfig.h"

extern uint32_t SystemCoreClock;

#line 98 "E:\\MC\\2.STM32\\STMProjects\\GSM\\GSM_M590\\Project\\gsm_stm32f103\\MDK-ARM\\RTE\\RTOS\\FreeRTOSConfig.h"

 





#line 113 "E:\\MC\\2.STM32\\STMProjects\\GSM\\GSM_M590\\Project\\gsm_stm32f103\\MDK-ARM\\RTE\\RTOS\\FreeRTOSConfig.h"


 
#line 123 "E:\\MC\\2.STM32\\STMProjects\\GSM\\GSM_M590\\Project\\gsm_stm32f103\\MDK-ARM\\RTE\\RTOS\\FreeRTOSConfig.h"

 




   




 





 



 


 



 


 




 
#line 161 "E:\\MC\\2.STM32\\STMProjects\\GSM\\GSM_M590\\Project\\gsm_stm32f103\\MDK-ARM\\RTE\\RTOS\\FreeRTOSConfig.h"

#line 99 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\FreeRTOS.h"

 
#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\projdefs.h"



































































 







 
typedef void (*TaskFunction_t)( void * );



 












 




 











 
#line 152 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\projdefs.h"


 







#line 102 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\FreeRTOS.h"

 
#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\portable.h"



































































 



 













 
#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\deprecated_definitions.h"



































































 












 











































































































































































#line 260 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\deprecated_definitions.h"

#line 268 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\deprecated_definitions.h"







#line 282 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\deprecated_definitions.h"








































#line 88 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\portable.h"




 
#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\portable\\RVDS\\ARM_CM3\\portmacro.h"



































































 

















 

 
#line 96 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\portable\\RVDS\\ARM_CM3\\portmacro.h"

typedef uint32_t StackType_t;
typedef long BaseType_t;
typedef unsigned long UBaseType_t;





	typedef uint32_t TickType_t;


	
 


 

 




 


 

 
#line 135 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\portable\\RVDS\\ARM_CM3\\portmacro.h"
 





 

 
extern void vPortEnterCritical( void );
extern void vPortExitCritical( void );

#line 153 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\portable\\RVDS\\ARM_CM3\\portmacro.h"

 

 

	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );


 

 






	 




	 



	 




 



 


 


	void vPortValidateInterruptPriority( void );



 








 

static __forceinline void vPortSetBASEPRI( uint32_t ulBASEPRI )
{
	__asm
	{
		
 
		msr basepri, ulBASEPRI
	}
}
 

static __forceinline void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI = (10 << (8 - 4));

	__asm
	{
		
 
		msr basepri, ulNewBASEPRI
		dsb
		isb
	}
}
 

static __forceinline void vPortClearBASEPRIFromISR( void )
{
	__asm
	{
		

 
		msr basepri, #0
	}
}
 

static __forceinline uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulReturn, ulNewBASEPRI = (10 << (8 - 4));

	__asm
	{
		
 
		mrs ulReturn, basepri
		msr basepri, ulNewBASEPRI
		dsb
		isb
	}

	return ulReturn;
}
 

static __forceinline BaseType_t xPortIsInsideInterrupt( void )
{
uint32_t ulCurrentInterrupt;
BaseType_t xReturn;

	 
	__asm
	{
		mrs ulCurrentInterrupt, ipsr
	}

	if( ulCurrentInterrupt == 0 )
	{
		xReturn = ( ( BaseType_t ) 0 );
	}
	else
	{
		xReturn = ( ( BaseType_t ) 1 );
	}

	return xReturn;
}








#line 95 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\portable.h"






































#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\mpu_wrappers.h"



































































 





 
#line 192 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\mpu_wrappers.h"










#line 134 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\portable.h"






 



	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters ) ;


 
typedef struct HeapRegion
{
	uint8_t *pucStartAddress;
	size_t xSizeInBytes;
} HeapRegion_t;











 
void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) ;




 
void *pvPortMalloc( size_t xSize ) ;
void vPortFree( void *pv ) ;
void vPortInitialiseBlocks( void ) ;
size_t xPortGetFreeHeapSize( void ) ;
size_t xPortGetMinimumEverFreeHeapSize( void ) ;




 
BaseType_t xPortStartScheduler( void ) ;





 
void vPortEndScheduler( void ) ;







 











#line 105 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\FreeRTOS.h"

 




 







 



























































































































































#line 281 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\FreeRTOS.h"

 


















































 

	
 




	
 




	
 




	
 




	 




	 




	
 




	



 




	


 




	


 




	


 







 





























































































































































































































































#line 678 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\FreeRTOS.h"


































































































	 




	 



 














#line 809 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\FreeRTOS.h"
	
 







 




#line 843 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\FreeRTOS.h"

	
 













 













 
struct xSTATIC_LIST_ITEM
{
	TickType_t xDummy1;
	void *pvDummy2[ 4 ];
};
typedef struct xSTATIC_LIST_ITEM StaticListItem_t;

 
struct xSTATIC_MINI_LIST_ITEM
{
	TickType_t xDummy1;
	void *pvDummy2[ 2 ];
};
typedef struct xSTATIC_MINI_LIST_ITEM StaticMiniListItem_t;

 
typedef struct xSTATIC_LIST
{
	UBaseType_t uxDummy1;
	void *pvDummy2;
	StaticMiniListItem_t xDummy3;
} StaticList_t;













 
typedef struct xSTATIC_TCB
{
	void				*pxDummy1;



	StaticListItem_t	xDummy3[ 2 ];
	UBaseType_t			uxDummy5;
	void				*pxDummy6;
	uint8_t				ucDummy7[ (10) ];
#line 930 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\FreeRTOS.h"
		UBaseType_t		uxDummy12[ 2 ];
#line 945 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\FreeRTOS.h"
		uint32_t 		ulDummy18;
		uint8_t 		ucDummy19;





} StaticTask_t;














 
typedef struct xSTATIC_QUEUE
{
	void *pvDummy1[ 3 ];

	union
	{
		void *pvDummy2;
		UBaseType_t uxDummy2;
	} u;

	StaticList_t xDummy3[ 2 ];
	UBaseType_t uxDummy4[ 3 ];
	uint8_t ucDummy5[ 2 ];






		void *pvDummy7;







} StaticQueue_t;
typedef StaticQueue_t StaticSemaphore_t;














 
typedef struct xSTATIC_EVENT_GROUP
{
	TickType_t xDummy1;
	StaticList_t xDummy2;









} StaticEventGroup_t;














 
typedef struct xSTATIC_TIMER
{
	void				*pvDummy1;
	StaticListItem_t	xDummy2;
	TickType_t			xDummy3;
	UBaseType_t			uxDummy4;
	void 				*pvDummy5[ 2 ];








} StaticTimer_t;







#line 27 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"
#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\task.h"



































































 









#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\list.h"



































































 



























 



































 












 

	 
#line 176 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\list.h"




 
struct xLIST_ITEM
{
				 
	 TickType_t xItemValue;			 
	struct xLIST_ITEM *  pxNext;		 
	struct xLIST_ITEM *  pxPrevious;	 
	void * pvOwner;										 
	void *  pvContainer;				 
				 
};
typedef struct xLIST_ITEM ListItem_t;					 

struct xMINI_LIST_ITEM
{
				 
	 TickType_t xItemValue;
	struct xLIST_ITEM *  pxNext;
	struct xLIST_ITEM *  pxPrevious;
};
typedef struct xMINI_LIST_ITEM MiniListItem_t;



 
typedef struct xLIST
{
					 
	 UBaseType_t uxNumberOfItems;
	ListItem_t *  pxIndex;			 
	MiniListItem_t xListEnd;							 
					 
} List_t;







 








 








 









 








 







 







 







 








 




 





















 
#line 330 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\list.h"

















 










 







 






 











 
void vListInitialise( List_t * const pxList ) ;









 
void vListInitialiseItem( ListItem_t * const pxItem ) ;











 
void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem ) ;



















 
void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem ) ;













 
UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove ) ;







#line 79 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\task.h"







 















 
typedef void * TaskHandle_t;




 
typedef BaseType_t (*TaskHookFunction_t)( void * );

 
typedef enum
{
	eRunning = 0,	 
	eReady,			 
	eBlocked,		 
	eSuspended,		 
	eDeleted,		 
	eInvalid			 
} eTaskState;

 
typedef enum
{
	eNoAction = 0,				 
	eSetBits,					 
	eIncrement,					 
	eSetValueWithOverwrite,		 
	eSetValueWithoutOverwrite	 
} eNotifyAction;



 
typedef struct xTIME_OUT
{
	BaseType_t xOverflowCount;
	TickType_t xTimeOnEntering;
} TimeOut_t;



 
typedef struct xMEMORY_REGION
{
	void *pvBaseAddress;
	uint32_t ulLengthInBytes;
	uint32_t ulParameters;
} MemoryRegion_t;



 
typedef struct xTASK_PARAMETERS
{
	TaskFunction_t pvTaskCode;
	const char * const pcName;	 
	uint16_t usStackDepth;
	void *pvParameters;
	UBaseType_t uxPriority;
	StackType_t *puxStackBuffer;
	MemoryRegion_t xRegions[ 1 ];
} TaskParameters_t;


 
typedef struct xTASK_STATUS
{
	TaskHandle_t xHandle;			 
	const char *pcTaskName;			   
	UBaseType_t xTaskNumber;		 
	eTaskState eCurrentState;		 
	UBaseType_t uxCurrentPriority;	 
	UBaseType_t uxBasePriority;		 
	uint32_t ulRunTimeCounter;		 
	StackType_t *pxStackBase;		 
	uint16_t usStackHighWaterMark;	 
} TaskStatus_t;

 
typedef enum
{
	eAbortSleep = 0,		 
	eStandardSleep,			 
	eNoTasksWaitingTimeout	 
} eSleepModeStatus;





 









 













 














 









 









 




 







 





























































































 

	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) ;  












































































































 
#line 484 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\task.h"



































































 

















































 
void vTaskAllocateMPURegions( TaskHandle_t xTask, const MemoryRegion_t * const pxRegions ) ;







































 
void vTaskDelete( TaskHandle_t xTaskToDelete ) ;



 














































 
void vTaskDelay( const TickType_t xTicksToDelay ) ;

























































 
void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement ) ;























 
BaseType_t xTaskAbortDelay( TaskHandle_t xTask ) ;













































 
UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask ) ;






 
UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask ) ;
















 
eTaskState eTaskGetState( TaskHandle_t xTask ) ;






















































 
void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState ) ;








































 
void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority ) ;

















































 
void vTaskSuspend( TaskHandle_t xTaskToSuspend ) ;















































 
void vTaskResume( TaskHandle_t xTaskToResume ) ;



























 
BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume ) ;



 



























 
void vTaskStartScheduler( void ) ;






















































 
void vTaskEndScheduler( void ) ;

















































 
void vTaskSuspendAll( void ) ;




















































 
BaseType_t xTaskResumeAll( void ) ;



 









 
TickType_t xTaskGetTickCount( void ) ;














 
TickType_t xTaskGetTickCountFromISR( void ) ;












 
UBaseType_t uxTaskGetNumberOfTasks( void ) ;











 
char *pcTaskGetName( TaskHandle_t xTaskToQuery ) ;  














 
TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) ;  



















 
UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) ;






 
#line 1397 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\task.h"

#line 1409 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\task.h"











 
BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter ) ;







 
TaskHandle_t xTaskGetIdleTaskHandle( void ) ;

































































































 
UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime ) ;













































 
void vTaskList( char * pcWriteBuffer ) ;  




















































 
void vTaskGetRunTimeStats( char *pcWriteBuffer ) ;  















































































 
BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue ) ;

























































































 
BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken ) ;











































































 
BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait ) ;












































 






















































 
void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken ) ;



































































 
uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait ) ;














 
BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask );



 















 
BaseType_t xTaskIncrementTick( void ) ;































 
void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait ) ;
void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait ) ;











 
void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely ) ;
























 
BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList ) ;
BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue ) ;








 
void vTaskSwitchContext( void ) ;




 
TickType_t uxTaskResetEventItemValue( void ) ;



 
TaskHandle_t xTaskGetCurrentTaskHandle( void ) ;



 
void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut ) ;




 
BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait ) ;




 
void vTaskMissedYield( void ) ;




 
BaseType_t xTaskGetSchedulerState( void ) ;




 
void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder ) ;




 
BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder ) ;



 
UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask ) ;




 
void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle ) ;








 
void vTaskStepTick( const TickType_t xTicksToJump ) ;














 
eSleepModeStatus eTaskConfirmSleepModeStatus( void ) ;




 
void *pvTaskIncrementMutexHeldCount( void ) ;








#line 28 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"
#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\semphr.h"



































































 








#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\queue.h"



































































 


















 
typedef void * QueueHandle_t;





 
typedef void * QueueSetHandle_t;





 
typedef void * QueueSetMemberHandle_t;

 




 
#line 116 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\queue.h"




































































 





















































































 



















































































 

















































































 



















































































 


















































































 























































































 
BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition ) ;






























































































 
































 
BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue, void * const pvBuffer ) ;



























































































 


































































































 
BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeek ) ;













 
UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue ) ;















 
UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue ) ;












 
void vQueueDelete( QueueHandle_t xQueue ) ;




































































 






































































 






















































































 









































































 














































































 
BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition ) ;
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken ) ;























































































 
BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken ) ;




 
BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue ) ;
BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue ) ;
UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue ) ;









 
BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRoutinePreviouslyWoken );
BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxTaskWoken );
BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait );
BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait );





 
QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType ) ;
QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue ) ;
QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount ) ;
QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue ) ;
void* xQueueGetMutexHolder( QueueHandle_t xSemaphore ) ;




 
BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait ) ;
BaseType_t xQueueGiveMutexRecursive( QueueHandle_t pxMutex ) ;




 























 













 














 








 

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType ) ;






 



















































 
QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength ) ;






















 
BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet ) ;

















 
BaseType_t xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet ) ;


































 
QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, const TickType_t xTicksToWait ) ;



 
QueueSetMemberHandle_t xQueueSelectFromSetFromISR( QueueSetHandle_t xQueueSet ) ;

 
void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely ) ;
BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue ) ;
void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber ) ;
UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue ) ;
uint8_t ucQueueGetQueueType( QueueHandle_t xQueue ) ;








#line 78 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\semphr.h"

typedef QueueHandle_t SemaphoreHandle_t;






















































 
#line 145 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\semphr.h"

























































 


























































 




































































 




























































































 
































































 



















































































 




























































































 

































 
























































 




























































 



































































 








































































 















































































 




















































































 















 














 











 





#line 29 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"
#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\event_groups.h"



































































 








 
#line 1 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\timers.h"



































































 










 
#line 81 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\timers.h"
 







 





 
#line 104 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\timers.h"













 
typedef void * TimerHandle_t;



 
typedef void (*TimerCallbackFunction_t)( TimerHandle_t xTimer );




 
typedef void (*PendedFunction_t)( void *, uint32_t );









































































































































 

	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) ;  



























































































































 
#line 406 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\timers.h"




















 
void *pvTimerGetTimerID( const TimerHandle_t xTimer ) ;



















 
void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID ) ;



































 
BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer ) ;






 
TaskHandle_t xTimerGetTimerDaemonTaskHandle( void ) ;


















































 









































 















































































 





































 



























































































































 





















































































 






























































 








































































 





















































































 


























































































 
BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken ) ;

 






























 
BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait ) ;









 
const char * pcTimerGetName( TimerHandle_t xTimer ) ;  









 
TickType_t xTimerGetPeriod( TimerHandle_t xTimer ) ;













 
TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer ) ;




 
BaseType_t xTimerCreateTimerTask( void ) ;
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait ) ;








#line 79 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\Source\\include\\event_groups.h"






























 












 
typedef void * EventGroupHandle_t;








 
typedef TickType_t EventBits_t;




















































 

	EventGroupHandle_t xEventGroupCreate( void ) ;


















































 































































































 
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait ) ;























































 
EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear ) ;





















































 













































































 
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet ) ;








































































 

































































































































 
EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait ) ;

















 
















 
EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup ) ;












 
void vEventGroupDelete( EventGroupHandle_t xEventGroup ) ;

 
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet ) ;
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear ) ;













#line 30 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 124 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"


 

#line 137 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 145 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 155 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 165 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 175 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 186 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 196 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 206 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 216 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 226 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 236 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 246 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 257 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 268 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 279 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 289 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 299 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 309 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 317 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 327 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 337 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 347 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 357 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 370 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 383 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 394 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"


 

#line 407 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 417 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 427 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 435 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 445 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 455 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 465 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 475 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 485 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 493 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 503 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 513 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 523 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 533 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 543 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 553 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 563 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 573 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 583 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 593 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 603 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 613 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 624 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 634 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 644 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"


 

#line 657 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 665 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 678 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 690 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 700 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 713 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 726 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"


 

#line 739 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 747 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 759 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 772 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 783 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 795 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 806 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 817 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 828 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 839 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

#line 849 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"


 

#line 863 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS-FreeRTOS\\9.0.0\\CMSIS\\RTOS2\\FreeRTOS\\Source\\freertos_evr.c"

