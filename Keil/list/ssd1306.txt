; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -ogsm_stm32f103\ssd1306.o --asm_dir=..\..\list\ --list_dir=..\..\list\ --depend=gsm_stm32f103\ssd1306.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I..\Hardware\SSD1306 -I..\Hardware\delay -I..\Hardware\GSM_LIB\GENERAL -I..\Hardware\GSM_LIB\USART -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM3 -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS -IE:\MC\2.STM32\STMProjects\GSM\GSM_M590\Project\gsm_stm32f103\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=gsm_stm32f103\ssd1306.crf ..\Hardware\SSD1306\SSD1306.c]
                          THUMB

                          AREA ||i.pow||, CODE, READONLY, ALIGN=1

                  pow PROC
;;;339    }
;;;340    static uint32_t pow(uint8_t m, uint8_t n)
000000  4603              MOV      r3,r0
;;;341    {
;;;342    	uint32_t result = 1;	 
000002  2001              MOVS     r0,#1
000004  e000              B        |L1.8|
                  |L1.6|
;;;343    	while(n --) result *= m;    
000006  4358              MULS     r0,r3,r0
                  |L1.8|
000008  1e49              SUBS     r1,r1,#1
00000a  b2c9              UXTB     r1,r1
00000c  d2fb              BCS      |L1.6|
;;;344    	return result;
;;;345    }	
00000e  4770              BX       lr
;;;346    
                          ENDP


                          AREA ||i.spi_write_byte||, CODE, READONLY, ALIGN=2

                  spi_write_byte PROC
;;;63     
;;;64     void spi_write_byte(uint8_t data){
000000  4901              LDR      r1,|L2.8|
;;;65     	
;;;66     	SPI1->DR = data;
000002  60c8              STR      r0,[r1,#0xc]
;;;67     }								
000004  4770              BX       lr
;;;68     	
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      0x40013000

                          AREA ||i.ssd1306_clear_region||, CODE, READONLY, ALIGN=2

                  ssd1306_clear_region PROC
;;;246    
;;;247    void ssd1306_clear_region(uint8_t chXpos, uint8_t chYpos, uint8_t chWidth, uint8_t chHeight)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;248    {
;;;249    	uint8_t chPos, chBx, chTemp = 0;
;;;250    	
;;;251    	if (chXpos > 127 || chYpos > 63) {
000004  287f              CMP      r0,#0x7f
000006  d81c              BHI      |L3.66|
000008  293f              CMP      r1,#0x3f
00000a  d81a              BHI      |L3.66|
;;;252    		return;
;;;253    	}
;;;254    	
;;;255    	for (int i=0; i<chWidth; i++){
00000c  2500              MOVS     r5,#0
00000e  e016              B        |L3.62|
                  |L3.16|
;;;256    		for (int j=0; j<chHeight; j++){
000010  2400              MOVS     r4,#0
000012  e011              B        |L3.56|
                  |L3.20|
;;;257    			chPos = 7 - (chYpos+j) / 8; // 
000014  190e              ADDS     r6,r1,r4
000016  17f7              ASRS     r7,r6,#31
000018  eb067657          ADD      r6,r6,r7,LSR #29
00001c  10f6              ASRS     r6,r6,#3
00001e  f1c60607          RSB      r6,r6,#7
000022  b2f6              UXTB     r6,r6
;;;258    			chBx = (chYpos+j) % 8;
;;;259    			chTemp = 1 << (7 - chBx);
;;;260    			
;;;261    			
;;;262    			s_chDispalyBuffer[chXpos+i][chPos] = 0;
000024  f8df8020          LDR      r8,|L3.72|
000028  eb000c05          ADD      r12,r0,r5
00002c  eb080ccc          ADD      r12,r8,r12,LSL #3
000030  2700              MOVS     r7,#0
000032  f80c7006          STRB     r7,[r12,r6]
000036  1c64              ADDS     r4,r4,#1              ;256
                  |L3.56|
000038  429c              CMP      r4,r3                 ;256
00003a  dbeb              BLT      |L3.20|
00003c  1c6d              ADDS     r5,r5,#1              ;255
                  |L3.62|
00003e  4295              CMP      r5,r2                 ;255
000040  dbe6              BLT      |L3.16|
                  |L3.66|
;;;263    		}
;;;264    	}
;;;265    	
;;;266    }
000042  e8bd81f0          POP      {r4-r8,pc}
;;;267    	  
                          ENDP

000046  0000              DCW      0x0000
                  |L3.72|
                          DCD      ||.bss||

                          AREA ||i.ssd1306_clear_screen||, CODE, READONLY, ALIGN=2

                  ssd1306_clear_screen PROC
;;;202    
;;;203    void ssd1306_clear_screen(uint8_t chFill)  
000000  b570              PUSH     {r4-r6,lr}
;;;204    { 
000002  4605              MOV      r5,r0
;;;205    	uint8_t i, j;
;;;206    	
;;;207    	for (i = 0; i < 8; i ++) {
000004  2400              MOVS     r4,#0
;;;208    		ssd1306_write_byte(0xB0 + i, SSD1306_CMD);
;;;209    		__SET_COL_START_ADDR();
;;;210    		for (j = 0; j < 128; j ++) {
;;;211    			s_chDispalyBuffer[j][i] = chFill;
000006  4e0f              LDR      r6,|L4.68|
                  |L4.8|
000008  f10400b0          ADD      r0,r4,#0xb0           ;208
00000c  b2c0              UXTB     r0,r0                 ;208
00000e  2100              MOVS     r1,#0                 ;208
000010  f7fffffe          BL       ssd1306_write_byte
000014  2100              MOVS     r1,#0                 ;209
000016  2002              MOVS     r0,#2                 ;209
000018  f7fffffe          BL       ssd1306_write_byte
00001c  2100              MOVS     r1,#0                 ;209
00001e  2010              MOVS     r0,#0x10              ;209
000020  f7fffffe          BL       ssd1306_write_byte
000024  2100              MOVS     r1,#0                 ;210
                  |L4.38|
000026  eb0600c1          ADD      r0,r6,r1,LSL #3
00002a  5505              STRB     r5,[r0,r4]
00002c  1c49              ADDS     r1,r1,#1              ;210
00002e  b2c9              UXTB     r1,r1                 ;210
000030  2980              CMP      r1,#0x80              ;210
000032  d3f8              BCC      |L4.38|
000034  1c64              ADDS     r4,r4,#1              ;207
000036  b2e4              UXTB     r4,r4                 ;207
000038  2c08              CMP      r4,#8                 ;207
00003a  d3e5              BCC      |L4.8|
;;;212    		}
;;;213    	}
;;;214    	
;;;215    	ssd1306_refresh_gram();
00003c  e8bd4070          POP      {r4-r6,lr}
000040  f7ffbffe          B.W      ssd1306_refresh_gram
;;;216    }
;;;217    
                          ENDP

                  |L4.68|
                          DCD      ||.bss||

                          AREA ||i.ssd1306_display_char||, CODE, READONLY, ALIGN=2

                  ssd1306_display_char PROC
;;;301    **/
;;;302    void ssd1306_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint8_t chMode)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;303    {      	
000004  4683              MOV      r11,r0
000006  460e              MOV      r6,r1
000008  4699              MOV      r9,r3
;;;304    	uint8_t i, j;
;;;305    	uint8_t chTemp, chYpos0 = chYpos;
00000a  46b2              MOV      r10,r6
;;;306    	
;;;307    	chChr = chChr - ' ';				   
00000c  3a20              SUBS     r2,r2,#0x20
00000e  f00208ff          AND      r8,r2,#0xff
;;;308        for (i = 0; i < chSize; i ++) {   
000012  2500              MOVS     r5,#0
000014  e043              B        |L5.158|
                  |L5.22|
;;;309    		if (chSize == 12) {
000016  f1b90f0c          CMP      r9,#0xc
00001a  d006              BEQ      |L5.42|
;;;310    			if (chMode) {
;;;311    				chTemp = c_chFont1206[chChr][i];
;;;312    			} else {
;;;313    				chTemp = ~c_chFont1206[chChr][i];
;;;314    			}
;;;315    		} else {
;;;316    			if (chMode) {
00001c  9809              LDR      r0,[sp,#0x24]
00001e  b1b0              CBZ      r0,|L5.78|
;;;317    				chTemp = c_chFont1608[chChr][i];
000020  4821              LDR      r0,|L5.168|
000022  eb001008          ADD      r0,r0,r8,LSL #4
000026  5d44              LDRB     r4,[r0,r5]
000028  e017              B        |L5.90|
                  |L5.42|
00002a  9809              LDR      r0,[sp,#0x24]         ;310
00002c  b130              CBZ      r0,|L5.60|
00002e  481f              LDR      r0,|L5.172|
000030  eb080148          ADD      r1,r8,r8,LSL #1       ;311
000034  eb000081          ADD      r0,r0,r1,LSL #2       ;311
000038  5d44              LDRB     r4,[r0,r5]            ;311
00003a  e00e              B        |L5.90|
                  |L5.60|
00003c  481b              LDR      r0,|L5.172|
00003e  eb080148          ADD      r1,r8,r8,LSL #1       ;313
000042  eb000081          ADD      r0,r0,r1,LSL #2       ;313
000046  5d40              LDRB     r0,[r0,r5]            ;313
000048  43c0              MVNS     r0,r0                 ;313
00004a  b2c4              UXTB     r4,r0                 ;313
00004c  e005              B        |L5.90|
                  |L5.78|
;;;318    			} else {
;;;319    				chTemp = ~c_chFont1608[chChr][i];
00004e  4816              LDR      r0,|L5.168|
000050  eb001008          ADD      r0,r0,r8,LSL #4
000054  5d40              LDRB     r0,[r0,r5]
000056  43c0              MVNS     r0,r0
000058  b2c4              UXTB     r4,r0
                  |L5.90|
;;;320    			}
;;;321    		}
;;;322    		
;;;323            for (j = 0; j < 8; j ++) {
00005a  2700              MOVS     r7,#0
                  |L5.92|
;;;324    			if (chTemp & 0x80) {
00005c  0620              LSLS     r0,r4,#24
00005e  d505              BPL      |L5.108|
;;;325    				ssd1306_draw_point(chXpos, chYpos, 1);
000060  2201              MOVS     r2,#1
000062  4631              MOV      r1,r6
000064  4658              MOV      r0,r11
000066  f7fffffe          BL       ssd1306_draw_point
00006a  e004              B        |L5.118|
                  |L5.108|
;;;326    			} else {
;;;327    				ssd1306_draw_point(chXpos, chYpos, 0);
00006c  2200              MOVS     r2,#0
00006e  4631              MOV      r1,r6
000070  4658              MOV      r0,r11
000072  f7fffffe          BL       ssd1306_draw_point
                  |L5.118|
;;;328    			}
;;;329    			chTemp <<= 1;
000076  0660              LSLS     r0,r4,#25
000078  0e04              LSRS     r4,r0,#24
;;;330    			chYpos ++;
00007a  1c76              ADDS     r6,r6,#1
00007c  b2f6              UXTB     r6,r6
;;;331    			
;;;332    			if ((chYpos - chYpos0) == chSize) {
00007e  eba6000a          SUB      r0,r6,r10
000082  4548              CMP      r0,r9
000084  d105              BNE      |L5.146|
;;;333    				chYpos = chYpos0;
000086  4656              MOV      r6,r10
;;;334    				chXpos ++;
000088  f10b0b01          ADD      r11,r11,#1
00008c  f00b0bff          AND      r11,r11,#0xff
;;;335    				break;
000090  e003              B        |L5.154|
                  |L5.146|
000092  1c7f              ADDS     r7,r7,#1              ;323
000094  b2ff              UXTB     r7,r7                 ;323
000096  2f08              CMP      r7,#8                 ;323
000098  d3e0              BCC      |L5.92|
                  |L5.154|
00009a  1c6d              ADDS     r5,r5,#1              ;308
00009c  b2ed              UXTB     r5,r5                 ;308
                  |L5.158|
00009e  454d              CMP      r5,r9                 ;308
0000a0  d3b9              BCC      |L5.22|
;;;336    			}
;;;337    		}  	 
;;;338        } 
;;;339    }
0000a2  e8bd8ff0          POP      {r4-r11,pc}
;;;340    static uint32_t pow(uint8_t m, uint8_t n)
                          ENDP

0000a6  0000              DCW      0x0000
                  |L5.168|
                          DCD      c_chFont1608
                  |L5.172|
                          DCD      c_chFont1206

                          AREA ||i.ssd1306_display_num||, CODE, READONLY, ALIGN=1

                  ssd1306_display_num PROC
;;;347    
;;;348    void ssd1306_display_num(uint8_t chXpos, uint8_t chYpos, uint32_t chNum, uint8_t chLen, uint8_t chSize)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;349    {         	
000004  b081              SUB      sp,sp,#4
000006  4680              MOV      r8,r0
000008  f8ddb038          LDR      r11,[sp,#0x38]
00000c  4692              MOV      r10,r2
00000e  461d              MOV      r5,r3
;;;350    	uint8_t i;
;;;351    	uint8_t chTemp, chShow = 0;
000010  2600              MOVS     r6,#0
;;;352    	
;;;353    	for(i = 0; i < chLen; i ++) {
000012  2400              MOVS     r4,#0
;;;354    		chTemp = (chNum / pow(10, chLen - i - 1)) % 10;
;;;355    		if(chShow == 0 && i < (chLen - 1)) {
;;;356    			if(chTemp == 0) {
;;;357    				ssd1306_display_char(chXpos + (chSize / 2) * i, chYpos, ' ', chSize, 1);
000014  f04f0901          MOV      r9,#1
000018  ea4f075b          LSR      r7,r11,#1
00001c  e01f              B        |L6.94|
                  |L6.30|
00001e  1b28              SUBS     r0,r5,r4              ;354
000020  1e40              SUBS     r0,r0,#1              ;354
000022  b2c1              UXTB     r1,r0                 ;354
000024  200a              MOVS     r0,#0xa               ;354
000026  f7fffffe          BL       pow
00002a  fbbaf0f0          UDIV     r0,r10,r0             ;354
00002e  210a              MOVS     r1,#0xa               ;354
000030  fbb0f2f1          UDIV     r2,r0,r1              ;354
000034  fb010012          MLS      r0,r1,r2,r0           ;354
000038  b926              CBNZ     r6,|L6.68|
00003a  1e69              SUBS     r1,r5,#1              ;355
00003c  428c              CMP      r4,r1                 ;355
00003e  da01              BGE      |L6.68|
000040  b190              CBZ      r0,|L6.104|
;;;358    				continue;
;;;359    			} else {
;;;360    				chShow = 1;
000042  2601              MOVS     r6,#1
                  |L6.68|
;;;361    			}	 
;;;362    		}
;;;363    	 	ssd1306_display_char(chXpos + (chSize / 2) * i, chYpos, chTemp + '0', chSize, 1); 
000044  3030              ADDS     r0,r0,#0x30
000046  b2c2              UXTB     r2,r0
000048  fb078004          MLA      r0,r7,r4,r8
00004c  b2c0              UXTB     r0,r0
00004e  465b              MOV      r3,r11
000050  f8cd9000          STR      r9,[sp,#0]
000054  9902              LDR      r1,[sp,#8]
000056  f7fffffe          BL       ssd1306_display_char
                  |L6.90|
00005a  1c64              ADDS     r4,r4,#1              ;353
00005c  b2e4              UXTB     r4,r4                 ;353
                  |L6.94|
00005e  42ac              CMP      r4,r5                 ;353
000060  d3dd              BCC      |L6.30|
;;;364    	}
;;;365    } 
000062  b005              ADD      sp,sp,#0x14
000064  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.104|
000068  fb078004          MLA      r0,r7,r4,r8           ;357
00006c  b2c0              UXTB     r0,r0                 ;357
00006e  465b              MOV      r3,r11                ;357
000070  2220              MOVS     r2,#0x20              ;357
000072  f8cd9000          STR      r9,[sp,#0]            ;357
000076  9902              LDR      r1,[sp,#8]            ;357
000078  f7fffffe          BL       ssd1306_display_char
00007c  e7ed              B        |L6.90|
;;;366    
                          ENDP


                          AREA ||i.ssd1306_display_off||, CODE, READONLY, ALIGN=1

                  ssd1306_display_off PROC
;;;165    **/
;;;166    void ssd1306_display_off(void)
000000  b510              PUSH     {r4,lr}
;;;167    {
;;;168    	ssd1306_write_byte(0x8D, SSD1306_CMD);  
000002  2100              MOVS     r1,#0
000004  208d              MOVS     r0,#0x8d
000006  f7fffffe          BL       ssd1306_write_byte
;;;169    	ssd1306_write_byte(0x10, SSD1306_CMD); 
00000a  2100              MOVS     r1,#0
00000c  2010              MOVS     r0,#0x10
00000e  f7fffffe          BL       ssd1306_write_byte
;;;170    	ssd1306_write_byte(0xAE, SSD1306_CMD);  
000012  2100              MOVS     r1,#0
000014  e8bd4010          POP      {r4,lr}
000018  20ae              MOVS     r0,#0xae
00001a  f7ffbffe          B.W      ssd1306_write_byte
;;;171    }
;;;172    
                          ENDP


                          AREA ||i.ssd1306_display_on||, CODE, READONLY, ALIGN=1

                  ssd1306_display_on PROC
;;;151    **/ 
;;;152    void ssd1306_display_on(void)
000000  b510              PUSH     {r4,lr}
;;;153    {
;;;154    	ssd1306_write_byte(0x8D, SSD1306_CMD);  
000002  2100              MOVS     r1,#0
000004  208d              MOVS     r0,#0x8d
000006  f7fffffe          BL       ssd1306_write_byte
;;;155    	ssd1306_write_byte(0x14, SSD1306_CMD);  
00000a  2100              MOVS     r1,#0
00000c  2014              MOVS     r0,#0x14
00000e  f7fffffe          BL       ssd1306_write_byte
;;;156    	ssd1306_write_byte(0xAF, SSD1306_CMD);  
000012  2100              MOVS     r1,#0
000014  e8bd4010          POP      {r4,lr}
000018  20af              MOVS     r0,#0xaf
00001a  f7ffbffe          B.W      ssd1306_write_byte
;;;157    }
;;;158       
                          ENDP


                          AREA ||i.ssd1306_display_string||, CODE, READONLY, ALIGN=1

                  ssd1306_display_string PROC
;;;376    **/
;;;377    void ssd1306_display_string(uint8_t chXpos, uint8_t chYpos, const uint8_t *pchString, uint8_t chSize, uint8_t chMode)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;378    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;379        while (*pchString != '\0') {       
;;;380            if (chXpos > (SSD1306_WIDTH - chSize / 2)) {
;;;381    			chXpos = 0;
;;;382    			chYpos += chSize;
;;;383    			if (chYpos > (SSD1306_HEIGHT - chSize)) {
;;;384    				chYpos = chXpos = 0;
;;;385    				ssd1306_clear_screen(0x00);
;;;386    			}
;;;387    		}
;;;388    		
;;;389            ssd1306_display_char(chXpos, chYpos, *pchString, chSize, chMode);
;;;390            chXpos += chSize / 2;
;;;391            pchString ++;
000010  e01b              B        |L9.74|
                  |L9.18|
000012  2080              MOVS     r0,#0x80              ;380
000014  eba00057          SUB      r0,r0,r7,LSR #1       ;380
000018  42a0              CMP      r0,r4                 ;380
00001a  d20a              BCS      |L9.50|
00001c  2400              MOVS     r4,#0                 ;381
00001e  19e8              ADDS     r0,r5,r7              ;382
000020  b2c5              UXTB     r5,r0                 ;382
000022  f1c70040          RSB      r0,r7,#0x40           ;383
000026  42a8              CMP      r0,r5                 ;383
000028  da03              BGE      |L9.50|
00002a  2500              MOVS     r5,#0                 ;384
00002c  2000              MOVS     r0,#0                 ;385
00002e  f7fffffe          BL       ssd1306_clear_screen
                  |L9.50|
000032  f8cd8000          STR      r8,[sp,#0]            ;389
000036  7832              LDRB     r2,[r6,#0]            ;389
000038  463b              MOV      r3,r7                 ;389
00003a  4629              MOV      r1,r5                 ;389
00003c  4620              MOV      r0,r4                 ;389
00003e  f7fffffe          BL       ssd1306_display_char
000042  eb040057          ADD      r0,r4,r7,LSR #1       ;390
000046  b2c4              UXTB     r4,r0                 ;390
000048  1c76              ADDS     r6,r6,#1
                  |L9.74|
00004a  7830              LDRB     r0,[r6,#0]            ;379
00004c  2800              CMP      r0,#0                 ;379
00004e  d1e0              BNE      |L9.18|
;;;392        }
;;;393    }
000050  e8bd83f8          POP      {r3-r9,pc}
;;;394    
                          ENDP


                          AREA ||i.ssd1306_draw_1616char||, CODE, READONLY, ALIGN=2

                  ssd1306_draw_1616char PROC
;;;394    
;;;395    void ssd1306_draw_1616char(uint8_t chXpos, uint8_t chYpos, uint8_t chChar)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;396    {
000004  4681              MOV      r9,r0
000006  460c              MOV      r4,r1
;;;397    	uint8_t i, j;
;;;398    	uint8_t chTemp = 0, chYpos0 = chYpos, chMode = 0;
000008  46a0              MOV      r8,r4
;;;399    
;;;400    	for (i = 0; i < 32; i ++) {
00000a  2700              MOVS     r7,#0
;;;401    		chTemp = c_chFont1612[chChar - 0x30][i];
00000c  4811              LDR      r0,|L10.84|
00000e  3a30              SUBS     r2,r2,#0x30
000010  eb001a42          ADD      r10,r0,r2,LSL #5
                  |L10.20|
000014  f81a6007          LDRB     r6,[r10,r7]
;;;402    		for (j = 0; j < 8; j ++) {
000018  2500              MOVS     r5,#0
                  |L10.26|
;;;403    			chMode = chTemp & 0x80? 1 : 0; 
00001a  09f2              LSRS     r2,r6,#7
;;;404    			ssd1306_draw_point(chXpos, chYpos, chMode);
00001c  4621              MOV      r1,r4
00001e  4648              MOV      r0,r9
000020  f7fffffe          BL       ssd1306_draw_point
;;;405    			chTemp <<= 1;
000024  0670              LSLS     r0,r6,#25
000026  0e06              LSRS     r6,r0,#24
;;;406    			chYpos ++;
000028  1c64              ADDS     r4,r4,#1
00002a  b2e4              UXTB     r4,r4
;;;407    			if ((chYpos - chYpos0) == 16) {
00002c  eba40008          SUB      r0,r4,r8
000030  2810              CMP      r0,#0x10
000032  d009              BEQ      |L10.72|
000034  1c6d              ADDS     r5,r5,#1              ;402
000036  b2ed              UXTB     r5,r5                 ;402
000038  2d08              CMP      r5,#8                 ;402
00003a  d3ee              BCC      |L10.26|
                  |L10.60|
00003c  1c7f              ADDS     r7,r7,#1              ;400
00003e  b2ff              UXTB     r7,r7                 ;400
000040  2f20              CMP      r7,#0x20              ;400
;;;408    				chYpos = chYpos0;
;;;409    				chXpos ++;
;;;410    				break;
000042  d3e7              BCC      |L10.20|
;;;411    			}
;;;412    		}
;;;413    	}
;;;414    }
000044  e8bd87f0          POP      {r4-r10,pc}
                  |L10.72|
000048  4644              MOV      r4,r8                 ;408
00004a  f1090901          ADD      r9,r9,#1              ;409
00004e  f00909ff          AND      r9,r9,#0xff           ;409
000052  e7f3              B        |L10.60|
;;;415    
                          ENDP

                  |L10.84|
                          DCD      c_chFont1612

                          AREA ||i.ssd1306_draw_3216char||, CODE, READONLY, ALIGN=2

                  ssd1306_draw_3216char PROC
;;;415    
;;;416    void ssd1306_draw_3216char(uint8_t chXpos, uint8_t chYpos, uint8_t chChar)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;417    {
000004  4681              MOV      r9,r0
000006  460c              MOV      r4,r1
;;;418    	uint8_t i, j;
;;;419    	uint8_t chTemp = 0, chYpos0 = chYpos, chMode = 0;
000008  46a0              MOV      r8,r4
;;;420    
;;;421    	for (i = 0; i < 64; i ++) {
00000a  2700              MOVS     r7,#0
;;;422    		chTemp = c_chFont3216[chChar - 0x30][i];
00000c  4811              LDR      r0,|L11.84|
00000e  3a30              SUBS     r2,r2,#0x30
000010  eb001a82          ADD      r10,r0,r2,LSL #6
                  |L11.20|
000014  f81a6007          LDRB     r6,[r10,r7]
;;;423    		for (j = 0; j < 8; j ++) {
000018  2500              MOVS     r5,#0
                  |L11.26|
;;;424    			chMode = chTemp & 0x80? 1 : 0; 
00001a  09f2              LSRS     r2,r6,#7
;;;425    			ssd1306_draw_point(chXpos, chYpos, chMode);
00001c  4621              MOV      r1,r4
00001e  4648              MOV      r0,r9
000020  f7fffffe          BL       ssd1306_draw_point
;;;426    			chTemp <<= 1;
000024  0670              LSLS     r0,r6,#25
000026  0e06              LSRS     r6,r0,#24
;;;427    			chYpos ++;
000028  1c64              ADDS     r4,r4,#1
00002a  b2e4              UXTB     r4,r4
;;;428    			if ((chYpos - chYpos0) == 32) {
00002c  eba40008          SUB      r0,r4,r8
000030  2820              CMP      r0,#0x20
000032  d009              BEQ      |L11.72|
000034  1c6d              ADDS     r5,r5,#1              ;423
000036  b2ed              UXTB     r5,r5                 ;423
000038  2d08              CMP      r5,#8                 ;423
00003a  d3ee              BCC      |L11.26|
                  |L11.60|
00003c  1c7f              ADDS     r7,r7,#1              ;421
00003e  b2ff              UXTB     r7,r7                 ;421
000040  2f40              CMP      r7,#0x40              ;421
;;;429    				chYpos = chYpos0;
;;;430    				chXpos ++;
;;;431    				break;
000042  d3e7              BCC      |L11.20|
;;;432    			}
;;;433    		}
;;;434    	}
;;;435    }
000044  e8bd87f0          POP      {r4-r10,pc}
                  |L11.72|
000048  4644              MOV      r4,r8                 ;429
00004a  f1090901          ADD      r9,r9,#1              ;430
00004e  f00909ff          AND      r9,r9,#0xff           ;430
000052  e7f3              B        |L11.60|
;;;436    
                          ENDP

                  |L11.84|
                          DCD      c_chFont3216

                          AREA ||i.ssd1306_draw_antenna||, CODE, READONLY, ALIGN=2

                  ssd1306_draw_antenna PROC
;;;436    
;;;437    void ssd1306_draw_antenna(uint8_t chXpos, uint8_t chYpos, uint8_t level)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;438    {
000004  4682              MOV      r10,r0
000006  460e              MOV      r6,r1
000008  4693              MOV      r11,r2
;;;439    	const uint8_t c_chSingal[16] = //mobie singal
00000a  a020              ADR      r0,|L12.140|
00000c  e890000e          LDM      r0,{r1-r3}
000010  68c0              LDR      r0,[r0,#0xc]
000012  e88d000e          STM      sp,{r1-r3}
000016  9003              STR      r0,[sp,#0xc]
;;;440    {
;;;441    	0x00,0x03,0x05,0x09,0xFF,0x09,0x05,0x03,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF
;;;442    };
;;;443       for(int y = 0; y < 8; y++){
000018  2500              MOVS     r5,#0
00001a  46e8              MOV      r8,sp                 ;439
;;;444    			for(int i=0; i < 8; i++){ 
;;;445    					if (*(c_chSingal + y) & (1 << (i & 7))){
00001c  2701              MOVS     r7,#1
                  |L12.30|
00001e  2400              MOVS     r4,#0                 ;444
;;;446    						ssd1306_draw_point(chXpos + y, chYpos + i, 1);
000020  eb0a0905          ADD      r9,r10,r5
                  |L12.36|
000024  f8180005          LDRB     r0,[r8,r5]            ;445
000028  f0040107          AND      r1,r4,#7              ;445
00002c  fa07f101          LSL      r1,r7,r1              ;445
000030  4208              TST      r0,r1                 ;445
000032  d006              BEQ      |L12.66|
000034  1930              ADDS     r0,r6,r4
000036  b2c1              UXTB     r1,r0
000038  f00900ff          AND      r0,r9,#0xff
00003c  2201              MOVS     r2,#1
00003e  f7fffffe          BL       ssd1306_draw_point
                  |L12.66|
000042  1c64              ADDS     r4,r4,#1              ;444
000044  2c08              CMP      r4,#8                 ;444
000046  dbed              BLT      |L12.36|
000048  1c6d              ADDS     r5,r5,#1              ;443
00004a  2d08              CMP      r5,#8                 ;443
00004c  dbe7              BLT      |L12.30|
;;;447    					}
;;;448    				}
;;;449        }
;;;450    		
;;;451       for(int y = 7; y < level+7; y++){
00004e  2507              MOVS     r5,#7
000050  f10b0b07          ADD      r11,r11,#7
000054  e015              B        |L12.130|
                  |L12.86|
;;;452    			for(int i=0; i < 8; i++){ 
000056  2400              MOVS     r4,#0
;;;453    					if (*(c_chSingal + y) & (1 << (i & 7))){
;;;454    						ssd1306_draw_point(chXpos + y, chYpos + i, 1);
000058  eb0a0905          ADD      r9,r10,r5
                  |L12.92|
00005c  f8180005          LDRB     r0,[r8,r5]            ;453
000060  f0040107          AND      r1,r4,#7              ;453
000064  fa07f101          LSL      r1,r7,r1              ;453
000068  4208              TST      r0,r1                 ;453
00006a  d006              BEQ      |L12.122|
00006c  1930              ADDS     r0,r6,r4
00006e  b2c1              UXTB     r1,r0
000070  f00900ff          AND      r0,r9,#0xff
000074  2201              MOVS     r2,#1
000076  f7fffffe          BL       ssd1306_draw_point
                  |L12.122|
00007a  1c64              ADDS     r4,r4,#1              ;452
00007c  2c08              CMP      r4,#8                 ;452
00007e  dbed              BLT      |L12.92|
000080  1c6d              ADDS     r5,r5,#1              ;451
                  |L12.130|
000082  455d              CMP      r5,r11                ;451
000084  dbe7              BLT      |L12.86|
;;;455    					}
;;;456    				}
;;;457       }		
;;;458    }
000086  e8bd8fff          POP      {r0-r11,pc}
;;;459    
                          ENDP

00008a  0000              DCW      0x0000
                  |L12.140|
00008c  00                DCB      0
00008d  030509ff          DCB      3,5,"\t",255,"\t",5,3,128,192,224,240,248,252,254,255
000091  09050380
000095  c0e0f0f8
000099  fcfeff  

                          AREA ||i.ssd1306_draw_bitmap||, CODE, READONLY, ALIGN=1

                  ssd1306_draw_bitmap PROC
;;;459    
;;;460    void ssd1306_draw_bitmap(uint8_t chXpos, uint8_t chYpos, const uint8_t *pchBmp, uint8_t chWidth, uint8_t chHeight)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;461    {
000004  b081              SUB      sp,sp,#4
000006  4682              MOV      r10,r0
000008  4693              MOV      r11,r2
00000a  4698              MOV      r8,r3
;;;462    	uint16_t i, j, byteWidth = (chWidth + 7) / 8;
00000c  f1080007          ADD      r0,r8,#7
000010  08c0              LSRS     r0,r0,#3
000012  9000              STR      r0,[sp,#0]
;;;463    	
;;;464        for(j = 0; j < chHeight; j ++){
000014  2500              MOVS     r5,#0
000016  e01e              B        |L13.86|
                  |L13.24|
;;;465            for(i = 0; i < chWidth; i ++ ) {
000018  2400              MOVS     r4,#0
;;;466                if(*(pchBmp + j * byteWidth + i / 8) & (128 >> (i & 7))) {
00001a  9800              LDR      r0,[sp,#0]
00001c  f04f0980          MOV      r9,#0x80
000020  fb05f600          MUL      r6,r5,r0
;;;467                    ssd1306_draw_point(chXpos + i, chYpos + j, 1);
000024  9802              LDR      r0,[sp,#8]
000026  1947              ADDS     r7,r0,r5
000028  e011              B        |L13.78|
                  |L13.42|
00002a  eb0b00d4          ADD      r0,r11,r4,LSR #3      ;466
00002e  f0040107          AND      r1,r4,#7              ;466
000032  5c30              LDRB     r0,[r6,r0]            ;466
000034  fa29f101          LSR      r1,r9,r1              ;466
000038  4208              TST      r0,r1                 ;466
00003a  d006              BEQ      |L13.74|
00003c  eb0a0004          ADD      r0,r10,r4
000040  b2f9              UXTB     r1,r7
000042  b2c0              UXTB     r0,r0
000044  2201              MOVS     r2,#1
000046  f7fffffe          BL       ssd1306_draw_point
                  |L13.74|
00004a  1c64              ADDS     r4,r4,#1              ;465
00004c  b2a4              UXTH     r4,r4                 ;465
                  |L13.78|
00004e  4544              CMP      r4,r8                 ;465
000050  d3eb              BCC      |L13.42|
000052  1c6d              ADDS     r5,r5,#1              ;464
000054  b2ad              UXTH     r5,r5                 ;464
                  |L13.86|
000056  980e              LDR      r0,[sp,#0x38]         ;464
000058  4285              CMP      r5,r0                 ;464
00005a  d3dd              BCC      |L13.24|
;;;468                }
;;;469            }
;;;470        }
;;;471    		
;;;472    	
;;;473    }
00005c  b005              ADD      sp,sp,#0x14
00005e  e8bd8ff0          POP      {r4-r11,pc}
;;;474    
                          ENDP


                          AREA ||i.ssd1306_draw_point||, CODE, READONLY, ALIGN=2

                  ssd1306_draw_point PROC
;;;227    
;;;228    void ssd1306_draw_point(uint8_t chXpos, uint8_t chYpos, uint8_t chPoint)
000000  b510              PUSH     {r4,lr}
;;;229    {
;;;230    	uint8_t chPos, chBx, chTemp = 0;
;;;231    	
;;;232    	if (chXpos > 127 || chYpos > 63) {
000002  287f              CMP      r0,#0x7f
000004  d813              BHI      |L14.46|
000006  293f              CMP      r1,#0x3f
000008  d811              BHI      |L14.46|
;;;233    		return;
;;;234    	}
;;;235    	chPos = 7 - chYpos / 8; // 
00000a  2307              MOVS     r3,#7
00000c  eba303d1          SUB      r3,r3,r1,LSR #3
000010  b2db              UXTB     r3,r3
;;;236    	chBx = chYpos % 8;
000012  f0010107          AND      r1,r1,#7
;;;237    	chTemp = 1 << (7 - chBx);
000016  f1c10407          RSB      r4,r1,#7
00001a  2101              MOVS     r1,#1
00001c  40a1              LSLS     r1,r1,r4
00001e  b2c9              UXTB     r1,r1
;;;238    	
;;;239    	if (chPoint) {
;;;240    		s_chDispalyBuffer[chXpos][chPos] |= chTemp;
000020  4c05              LDR      r4,|L14.56|
000022  eb0400c0          ADD      r0,r4,r0,LSL #3
000026  b11a              CBZ      r2,|L14.48|
000028  5cc2              LDRB     r2,[r0,r3]
00002a  430a              ORRS     r2,r2,r1
00002c  54c2              STRB     r2,[r0,r3]
                  |L14.46|
;;;241    		
;;;242    	} else {
;;;243    		s_chDispalyBuffer[chXpos][chPos] &= ~chTemp;
;;;244    	}
;;;245    }
00002e  bd10              POP      {r4,pc}
                  |L14.48|
000030  5cc2              LDRB     r2,[r0,r3]            ;243
000032  438a              BICS     r2,r2,r1              ;243
000034  54c2              STRB     r2,[r0,r3]            ;243
000036  bd10              POP      {r4,pc}
;;;246    
                          ENDP

                  |L14.56|
                          DCD      ||.bss||

                          AREA ||i.ssd1306_fill_screen||, CODE, READONLY, ALIGN=1

                  ssd1306_fill_screen PROC
;;;278    
;;;279    void ssd1306_fill_screen(uint8_t chXpos1, uint8_t chYpos1, uint8_t chXpos2, uint8_t chYpos2, uint8_t chDot)  
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;280    {  
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  461e              MOV      r6,r3
00000c  f8dd9020          LDR      r9,[sp,#0x20]
;;;281    	uint8_t chXpos, chYpos; 
;;;282    	
;;;283    	for (chXpos = chXpos1; chXpos <= chXpos2; chXpos ++) {
000010  e00c              B        |L15.44|
                  |L15.18|
;;;284    		for (chYpos = chYpos1; chYpos <= chYpos2; chYpos ++) {
000012  463c              MOV      r4,r7
000014  e006              B        |L15.36|
                  |L15.22|
;;;285    			ssd1306_draw_point(chXpos, chYpos, chDot);
000016  464a              MOV      r2,r9
000018  4621              MOV      r1,r4
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       ssd1306_draw_point
000020  1c64              ADDS     r4,r4,#1              ;284
000022  b2e4              UXTB     r4,r4                 ;284
                  |L15.36|
000024  42b4              CMP      r4,r6                 ;284
000026  d9f6              BLS      |L15.22|
000028  1c6d              ADDS     r5,r5,#1              ;283
00002a  b2ed              UXTB     r5,r5                 ;283
                  |L15.44|
00002c  4545              CMP      r5,r8                 ;283
00002e  d9f0              BLS      |L15.18|
;;;286    		}
;;;287    	}	
;;;288    	
;;;289    	ssd1306_refresh_gram();
000030  e8bd47f0          POP      {r4-r10,lr}
000034  f7ffbffe          B.W      ssd1306_refresh_gram
;;;290    }
;;;291    
                          ENDP


                          AREA ||i.ssd1306_init||, CODE, READONLY, ALIGN=2

                  ssd1306_init PROC
;;;483    **/
;;;484    void ssd1306_init(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;485    {
;;;486    
;;;487    #ifdef INTERFACE_4WIRE_SPI	  
;;;488    	__SSD1306_CS_SET();   //CS set
000002  4c49              LDR      r4,|L16.296|
000004  2201              MOVS     r2,#1
000006  2180              MOVS     r1,#0x80
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       HAL_GPIO_WritePin
;;;489    	__SSD1306_DC_CLR();   //D/C reset
00000e  2200              MOVS     r2,#0
000010  2110              MOVS     r1,#0x10
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       HAL_GPIO_WritePin
;;;490    	__SSD1306_RES_SET();  //RES set
000018  2201              MOVS     r2,#1
00001a  2140              MOVS     r1,#0x40
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       HAL_GPIO_WritePin
;;;491    	
;;;492    	#ifdef HARDWARE_PROTOCOL
;;;493    		ssd1306_hw_init();
;;;494    	#elif defined(SOFTWARE_PROTOCOL)
;;;495    		GPIO_InitTypeDef GPIO_InitStruct;
;;;496    	
;;;497    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_3, GPIO_PIN_RESET);
000022  2200              MOVS     r2,#0
000024  2128              MOVS     r1,#0x28
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       HAL_GPIO_WritePin
;;;498    
;;;499    		/*Configure GPIO pins : PBPin PBPin PBPin */
;;;500    		GPIO_InitStruct.Pin 	= GPIO_PIN_5|GPIO_PIN_3;
00002c  2128              MOVS     r1,#0x28
00002e  9100              STR      r1,[sp,#0]
;;;501    		GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
000030  2101              MOVS     r1,#1
000032  9101              STR      r1,[sp,#4]
;;;502    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
000034  2102              MOVS     r1,#2
000036  9103              STR      r1,[sp,#0xc]
;;;503    		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);	
000038  4669              MOV      r1,sp
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       HAL_GPIO_Init
;;;504    	#endif
;;;505    
;;;506    #elif defined(INTERFACE_3WIRE_SPI)	
;;;507    	
;;;508    	GPIO_InitTypeDef GPIO_InitStruct;
;;;509    	
;;;510    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_3, GPIO_PIN_RESET);
;;;511    
;;;512      /*Configure GPIO pins : PBPin PBPin PBPin */
;;;513      GPIO_InitStruct.Pin 	= GPIO_PIN_5|GPIO_PIN_3;
;;;514      GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
;;;515      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
;;;516      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);	
;;;517    	
;;;518    	__SSD1306_CS_CLR();   //CS reset
;;;519    	__SSD1306_DC_CLR();   //D/C reset
;;;520    	__SSD1306_RES_SET();  //RES set
;;;521    	
;;;522    #elif defined(INTERFACE_IIC)	  
;;;523    	__SSD1306_CS_CLR();   //CS reset
;;;524    	__SSD1306_DC_CLR();   //D/C reset
;;;525    	__SSD1306_RES_SET();  //RES set
;;;526    
;;;527    #endif
;;;528    
;;;529    	ssd1306_write_byte(0xAE, SSD1306_CMD);//--turn off oled panel
000040  2100              MOVS     r1,#0
000042  20ae              MOVS     r0,#0xae
000044  f7fffffe          BL       ssd1306_write_byte
;;;530    	ssd1306_write_byte(0x00, SSD1306_CMD);//---set low column address
000048  2100              MOVS     r1,#0
00004a  4608              MOV      r0,r1
00004c  f7fffffe          BL       ssd1306_write_byte
;;;531    	ssd1306_write_byte(0x10, SSD1306_CMD);//---set high column address
000050  2100              MOVS     r1,#0
000052  2010              MOVS     r0,#0x10
000054  f7fffffe          BL       ssd1306_write_byte
;;;532    	ssd1306_write_byte(0x40, SSD1306_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
000058  2100              MOVS     r1,#0
00005a  2040              MOVS     r0,#0x40
00005c  f7fffffe          BL       ssd1306_write_byte
;;;533    	ssd1306_write_byte(0x81, SSD1306_CMD);//--set contrast control register
000060  2100              MOVS     r1,#0
000062  2081              MOVS     r0,#0x81
000064  f7fffffe          BL       ssd1306_write_byte
;;;534    	ssd1306_write_byte(0xCF, SSD1306_CMD);// Set SEG Output Current Brightness
000068  2100              MOVS     r1,#0
00006a  20cf              MOVS     r0,#0xcf
00006c  f7fffffe          BL       ssd1306_write_byte
;;;535    	ssd1306_write_byte(0xA1, SSD1306_CMD);//--Set SEG/Column Mapping     
000070  2100              MOVS     r1,#0
000072  20a1              MOVS     r0,#0xa1
000074  f7fffffe          BL       ssd1306_write_byte
;;;536    	ssd1306_write_byte(0xC0, SSD1306_CMD);//Set COM/Row Scan Direction   
000078  2100              MOVS     r1,#0
00007a  20c0              MOVS     r0,#0xc0
00007c  f7fffffe          BL       ssd1306_write_byte
;;;537    	ssd1306_write_byte(0xA6, SSD1306_CMD);//--set normal display
000080  2100              MOVS     r1,#0
000082  20a6              MOVS     r0,#0xa6
000084  f7fffffe          BL       ssd1306_write_byte
;;;538    	ssd1306_write_byte(0xA8, SSD1306_CMD);//--set multiplex ratio(1 to 64)
000088  2100              MOVS     r1,#0
00008a  20a8              MOVS     r0,#0xa8
00008c  f7fffffe          BL       ssd1306_write_byte
;;;539    	ssd1306_write_byte(0x3f, SSD1306_CMD);//--1/64 duty
000090  2100              MOVS     r1,#0
000092  203f              MOVS     r0,#0x3f
000094  f7fffffe          BL       ssd1306_write_byte
;;;540    	ssd1306_write_byte(0xD3, SSD1306_CMD);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
000098  2100              MOVS     r1,#0
00009a  20d3              MOVS     r0,#0xd3
00009c  f7fffffe          BL       ssd1306_write_byte
;;;541    	ssd1306_write_byte(0x00, SSD1306_CMD);//-not offset
0000a0  2100              MOVS     r1,#0
0000a2  4608              MOV      r0,r1
0000a4  f7fffffe          BL       ssd1306_write_byte
;;;542    	ssd1306_write_byte(0xd5, SSD1306_CMD);//--set display clock divide ratio/oscillator frequency
0000a8  2100              MOVS     r1,#0
0000aa  20d5              MOVS     r0,#0xd5
0000ac  f7fffffe          BL       ssd1306_write_byte
;;;543    	ssd1306_write_byte(0x80, SSD1306_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
0000b0  2100              MOVS     r1,#0
0000b2  2080              MOVS     r0,#0x80
0000b4  f7fffffe          BL       ssd1306_write_byte
;;;544    	ssd1306_write_byte(0xD9, SSD1306_CMD);//--set pre-charge period
0000b8  2100              MOVS     r1,#0
0000ba  20d9              MOVS     r0,#0xd9
0000bc  f7fffffe          BL       ssd1306_write_byte
;;;545    	ssd1306_write_byte(0xF1, SSD1306_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
0000c0  2100              MOVS     r1,#0
0000c2  20f1              MOVS     r0,#0xf1
0000c4  f7fffffe          BL       ssd1306_write_byte
;;;546    	ssd1306_write_byte(0xDA, SSD1306_CMD);//--set com pins hardware configuration
0000c8  2100              MOVS     r1,#0
0000ca  20da              MOVS     r0,#0xda
0000cc  f7fffffe          BL       ssd1306_write_byte
;;;547    	ssd1306_write_byte(0x12, SSD1306_CMD);
0000d0  2100              MOVS     r1,#0
0000d2  2012              MOVS     r0,#0x12
0000d4  f7fffffe          BL       ssd1306_write_byte
;;;548    	ssd1306_write_byte(0xDB, SSD1306_CMD);//--set vcomh
0000d8  2100              MOVS     r1,#0
0000da  20db              MOVS     r0,#0xdb
0000dc  f7fffffe          BL       ssd1306_write_byte
;;;549    	ssd1306_write_byte(0x40, SSD1306_CMD);//Set VCOM Deselect Level
0000e0  2100              MOVS     r1,#0
0000e2  2040              MOVS     r0,#0x40
0000e4  f7fffffe          BL       ssd1306_write_byte
;;;550    	ssd1306_write_byte(0x20, SSD1306_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
0000e8  2100              MOVS     r1,#0
0000ea  2020              MOVS     r0,#0x20
0000ec  f7fffffe          BL       ssd1306_write_byte
;;;551    	ssd1306_write_byte(0x02, SSD1306_CMD);//
0000f0  2100              MOVS     r1,#0
0000f2  2002              MOVS     r0,#2
0000f4  f7fffffe          BL       ssd1306_write_byte
;;;552    	ssd1306_write_byte(0x8D, SSD1306_CMD);//--set Charge Pump enable/disable
0000f8  2100              MOVS     r1,#0
0000fa  208d              MOVS     r0,#0x8d
0000fc  f7fffffe          BL       ssd1306_write_byte
;;;553    	ssd1306_write_byte(0x14, SSD1306_CMD);//--set(0x10) disable
000100  2100              MOVS     r1,#0
000102  2014              MOVS     r0,#0x14
000104  f7fffffe          BL       ssd1306_write_byte
;;;554    	ssd1306_write_byte(0xA4, SSD1306_CMD);// Disable Entire Display On (0xa4/0xa5)
000108  2100              MOVS     r1,#0
00010a  20a4              MOVS     r0,#0xa4
00010c  f7fffffe          BL       ssd1306_write_byte
;;;555    	ssd1306_write_byte(0xA6, SSD1306_CMD);// Disable Inverse Display On (0xa6/a7) 
000110  2100              MOVS     r1,#0
000112  20a6              MOVS     r0,#0xa6
000114  f7fffffe          BL       ssd1306_write_byte
;;;556    	ssd1306_write_byte(0xAF, SSD1306_CMD);//--turn on oled panel
000118  2100              MOVS     r1,#0
00011a  20af              MOVS     r0,#0xaf
00011c  f7fffffe          BL       ssd1306_write_byte
;;;557    	
;;;558    	ssd1306_clear_screen(0x00);
000120  2000              MOVS     r0,#0
000122  f7fffffe          BL       ssd1306_clear_screen
;;;559    }
000126  bd1f              POP      {r0-r4,pc}
;;;560    
                          ENDP

                  |L16.296|
                          DCD      0x40010c00

                          AREA ||i.ssd1306_refresh_gram||, CODE, READONLY, ALIGN=2

                  ssd1306_refresh_gram PROC
;;;180    
;;;181    void ssd1306_refresh_gram(void)
000000  b570              PUSH     {r4-r6,lr}
;;;182    {
;;;183    	uint8_t i, j;
;;;184    	
;;;185    	for (i = 0; i < 8; i ++) {  
000002  2500              MOVS     r5,#0
;;;186    		ssd1306_write_byte(0xB0 + i, SSD1306_CMD);    
;;;187    		__SET_COL_START_ADDR();      
;;;188    		for (j = 0; j < 128; j ++) {
;;;189    			ssd1306_write_byte(s_chDispalyBuffer[j][i], SSD1306_DAT); 
000004  4e0f              LDR      r6,|L17.68|
                  |L17.6|
000006  f10500b0          ADD      r0,r5,#0xb0           ;186
00000a  b2c0              UXTB     r0,r0                 ;186
00000c  2100              MOVS     r1,#0                 ;186
00000e  f7fffffe          BL       ssd1306_write_byte
000012  2100              MOVS     r1,#0                 ;187
000014  2002              MOVS     r0,#2                 ;187
000016  f7fffffe          BL       ssd1306_write_byte
00001a  2100              MOVS     r1,#0                 ;187
00001c  2010              MOVS     r0,#0x10              ;187
00001e  f7fffffe          BL       ssd1306_write_byte
000022  2400              MOVS     r4,#0                 ;188
                  |L17.36|
000024  eb0600c4          ADD      r0,r6,r4,LSL #3
000028  2101              MOVS     r1,#1
00002a  5d40              LDRB     r0,[r0,r5]
00002c  f7fffffe          BL       ssd1306_write_byte
000030  1c64              ADDS     r4,r4,#1              ;188
000032  b2e4              UXTB     r4,r4                 ;188
000034  2c80              CMP      r4,#0x80              ;188
000036  d3f5              BCC      |L17.36|
000038  1c6d              ADDS     r5,r5,#1              ;185
00003a  b2ed              UXTB     r5,r5                 ;185
00003c  2d08              CMP      r5,#8                 ;185
00003e  d3e2              BCC      |L17.6|
;;;190    		}
;;;191    	}   
;;;192    }
000040  bd70              POP      {r4-r6,pc}
;;;193    
                          ENDP

000042  0000              DCW      0x0000
                  |L17.68|
                          DCD      ||.bss||

                          AREA ||i.ssd1306_write_byte||, CODE, READONLY, ALIGN=2

                  ssd1306_write_byte PROC
;;;107    **/
;;;108    static void ssd1306_write_byte(uint8_t chData, uint8_t chCmd) 
000000  b570              PUSH     {r4-r6,lr}
;;;109    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;110    #ifdef INTERFACE_4WIRE_SPI
;;;111    	
;;;112    		__SSD1306_CS_CLR();
000006  4e1f              LDR      r6,|L18.132|
000008  2200              MOVS     r2,#0
00000a  2180              MOVS     r1,#0x80
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       HAL_GPIO_WritePin
;;;113    	
;;;114    	if (chCmd) {
000012  b12c              CBZ      r4,|L18.32|
;;;115    		__SSD1306_DC_SET();
000014  2201              MOVS     r2,#1
000016  2110              MOVS     r1,#0x10
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       HAL_GPIO_WritePin
00001e  e004              B        |L18.42|
                  |L18.32|
;;;116    	} else {
;;;117    		__SSD1306_DC_CLR();
000020  2200              MOVS     r2,#0
000022  2110              MOVS     r1,#0x10
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       HAL_GPIO_WritePin
                  |L18.42|
;;;118    	}	
;;;119    	
;;;120    	//__SSD1306_WRITE_BYTE(chData);
;;;121    
;;;122    	
;;;123    	for(int i = 0; i < 8; i ++) {
00002a  2400              MOVS     r4,#0
                  |L18.44|
;;;124    		__SSD1306_CLK_CLR();
00002c  2200              MOVS     r2,#0
00002e  2108              MOVS     r1,#8
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       HAL_GPIO_WritePin
;;;125    		
;;;126    		delay_us(10);
000036  200a              MOVS     r0,#0xa
000038  f7fffffe          BL       delay_us
;;;127    		
;;;128    		if(chData & 0x80) {
00003c  0628              LSLS     r0,r5,#24
00003e  d505              BPL      |L18.76|
;;;129    			__SSD1306_DIN_SET();
000040  2201              MOVS     r2,#1
000042  2120              MOVS     r1,#0x20
000044  4630              MOV      r0,r6
000046  f7fffffe          BL       HAL_GPIO_WritePin
00004a  e004              B        |L18.86|
                  |L18.76|
;;;130    		} else {
;;;131    			__SSD1306_DIN_CLR();
00004c  2200              MOVS     r2,#0
00004e  2120              MOVS     r1,#0x20
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       HAL_GPIO_WritePin
                  |L18.86|
;;;132    		}
;;;133    		__SSD1306_CLK_SET();
000056  2201              MOVS     r2,#1
000058  2108              MOVS     r1,#8
00005a  4630              MOV      r0,r6
00005c  f7fffffe          BL       HAL_GPIO_WritePin
;;;134    		chData <<= 1;
000060  0668              LSLS     r0,r5,#25
000062  0e05              LSRS     r5,r0,#24
000064  1c64              ADDS     r4,r4,#1              ;123
000066  2c08              CMP      r4,#8                 ;123
000068  dbe0              BLT      |L18.44|
;;;135    	}
;;;136    	
;;;137    	__SSD1306_DC_SET();
00006a  2201              MOVS     r2,#1
00006c  2110              MOVS     r1,#0x10
00006e  4630              MOV      r0,r6
000070  f7fffffe          BL       HAL_GPIO_WritePin
;;;138    	__SSD1306_CS_SET();
000074  4630              MOV      r0,r6
000076  e8bd4070          POP      {r4-r6,lr}
00007a  2201              MOVS     r2,#1
00007c  2180              MOVS     r1,#0x80
00007e  f7ffbffe          B.W      HAL_GPIO_WritePin
;;;139    	
;;;140    
;;;141    	
;;;142    #endif
;;;143    }   	  
;;;144    
                          ENDP

000082  0000              DCW      0x0000
                  |L18.132|
                          DCD      0x40010c00

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  s_chDispalyBuffer
                          %        1024

;*** Start embedded assembler ***

#line 1 "..\\Hardware\\SSD1306\\SSD1306.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_SSD1306_c_e041553d____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___9_SSD1306_c_e041553d____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_SSD1306_c_e041553d____REVSH|
#line 402
|__asm___9_SSD1306_c_e041553d____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_SSD1306_c_e041553d____RRX|
#line 587
|__asm___9_SSD1306_c_e041553d____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
