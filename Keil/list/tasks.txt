; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections -c --asm --interleave -ogsm_stm32f103\tasks.o --asm_dir=..\..\list\ --list_dir=..\..\list\ --depend=gsm_stm32f103\tasks.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I..\Hardware\SSD1306 -I..\Hardware\delay -I..\Hardware\GSM_LIB\GENERAL -I..\Hardware\GSM_LIB\USART -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM3 -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS -IE:\MC\2.STM32\STMProjects\GSM\GSM_M590\Project\gsm_stm32f103\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB ../Middlewares/Third_Party/FreeRTOS/Source/tasks.c]
                          THUMB

                          AREA ||i.pcTaskGetName||, CODE, READONLY, ALIGN=2

                  pcTaskGetName PROC
;;;2180   
;;;2181   char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
000000  2800              CMP      r0,#0
;;;2182   {
000002  d101              BNE      |L1.8|
;;;2183   TCB_t *pxTCB;
;;;2184   
;;;2185   	/* If null is passed in here then the name of the calling task is being
;;;2186   	queried. */
;;;2187   	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
000004  4806              LDR      r0,|L1.32|
000006  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
                  |L1.8|
;;;2188   	configASSERT( pxTCB );
000008  b108              CBZ      r0,|L1.14|
;;;2189   	return &( pxTCB->pcTaskName[ 0 ] );
00000a  3034              ADDS     r0,r0,#0x34
;;;2190   }
00000c  4770              BX       lr
                  |L1.14|
00000e  2050              MOVS     r0,#0x50
000010  f3808811          MSR      BASEPRI,r0
000014  f3bf8f4f          DSB      
000018  f3bf8f6f          ISB      
                  |L1.28|
00001c  e7fe              B        |L1.28|
;;;2191   /*-----------------------------------------------------------*/
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
                          DCD      ||.data||

                          AREA ||i.prvAddCurrentTaskToDelayedList||, CODE, READONLY, ALIGN=2

                  prvAddCurrentTaskToDelayedList PROC
;;;4691   
;;;4692   static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4693   {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;4694   TickType_t xTimeToWake;
;;;4695   const TickType_t xConstTickCount = xTickCount;
000008  4e17              LDR      r6,|L2.104|
00000a  68f5              LDR      r5,[r6,#0xc]  ; xTickCount
;;;4696   
;;;4697   	#if( INCLUDE_xTaskAbortDelay == 1 )
;;;4698   	{
;;;4699   		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
;;;4700   		reset to pdFALSE so it can be detected as having been set to pdTRUE
;;;4701   		when the task leaves the Blocked state. */
;;;4702   		pxCurrentTCB->ucDelayAborted = pdFALSE;
;;;4703   	}
;;;4704   	#endif
;;;4705   
;;;4706   	/* Remove the task from the ready list before adding it to the blocked list
;;;4707   	as the same list item is used for both lists. */
;;;4708   	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
00000c  6830              LDR      r0,[r6,#0]  ; pxCurrentTCB
00000e  1d00              ADDS     r0,r0,#4
000010  f7fffffe          BL       uxListRemove
000014  b938              CBNZ     r0,|L2.38|
;;;4709   	{
;;;4710   		/* The current task must be in a ready list, so there is no need to
;;;4711   		check, and the port reset macro can be called directly. */
;;;4712   		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
000016  6830              LDR      r0,[r6,#0]  ; pxCurrentTCB
000018  f890102c          LDRB     r1,[r0,#0x2c]
00001c  2001              MOVS     r0,#1
00001e  4088              LSLS     r0,r0,r1
000020  6931              LDR      r1,[r6,#0x10]  ; uxTopReadyPriority
000022  4381              BICS     r1,r1,r0
000024  6131              STR      r1,[r6,#0x10]  ; uxTopReadyPriority
                  |L2.38|
;;;4713   	}
;;;4714   	else
;;;4715   	{
;;;4716   		mtCOVERAGE_TEST_MARKER();
;;;4717   	}
;;;4718   
;;;4719   	#if ( INCLUDE_vTaskSuspend == 1 )
;;;4720   	{
;;;4721   		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
000026  1c60              ADDS     r0,r4,#1
000028  d107              BNE      |L2.58|
00002a  b137              CBZ      r7,|L2.58|
;;;4722   		{
;;;4723   			/* Add the task to the suspended task list instead of a delayed task
;;;4724   			list to ensure it is not woken by a timing event.  It will block
;;;4725   			indefinitely. */
;;;4726   			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
00002c  6831              LDR      r1,[r6,#0]  ; pxCurrentTCB
00002e  e8bd41f0          POP      {r4-r8,lr}
000032  1d09              ADDS     r1,r1,#4
000034  480d              LDR      r0,|L2.108|
000036  f7ffbffe          B.W      vListInsertEnd
                  |L2.58|
;;;4727   		}
;;;4728   		else
;;;4729   		{
;;;4730   			/* Calculate the time at which the task should be woken if the event
;;;4731   			does not occur.  This may overflow but this doesn't matter, the
;;;4732   			kernel will manage it correctly. */
;;;4733   			xTimeToWake = xConstTickCount + xTicksToWait;
00003a  442c              ADD      r4,r4,r5
;;;4734   
;;;4735   			/* The list item will be inserted in wake time order. */
;;;4736   			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
00003c  6830              LDR      r0,[r6,#0]  ; pxCurrentTCB
00003e  6044              STR      r4,[r0,#4]
;;;4737   
;;;4738   			if( xTimeToWake < xConstTickCount )
000040  42ac              CMP      r4,r5
000042  d206              BCS      |L2.82|
;;;4739   			{
;;;4740   				/* Wake time has overflowed.  Place this item in the overflow
;;;4741   				list. */
;;;4742   				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
000044  6831              LDR      r1,[r6,#0]  ; pxCurrentTCB
000046  6bb0              LDR      r0,[r6,#0x38]  ; pxOverflowDelayedTaskList
000048  1d09              ADDS     r1,r1,#4
00004a  e8bd41f0          POP      {r4-r8,lr}
00004e  f7ffbffe          B.W      vListInsert
                  |L2.82|
;;;4743   			}
;;;4744   			else
;;;4745   			{
;;;4746   				/* The wake time has not overflowed, so the current block list
;;;4747   				is used. */
;;;4748   				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
000052  6831              LDR      r1,[r6,#0]  ; pxCurrentTCB
000054  6b70              LDR      r0,[r6,#0x34]  ; pxDelayedTaskList
000056  1d09              ADDS     r1,r1,#4
000058  f7fffffe          BL       vListInsert
;;;4749   
;;;4750   				/* If the task entering the blocked state was placed at the
;;;4751   				head of the list of blocked tasks then xNextTaskUnblockTime
;;;4752   				needs to be updated too. */
;;;4753   				if( xTimeToWake < xNextTaskUnblockTime )
00005c  6ab0              LDR      r0,[r6,#0x28]  ; xNextTaskUnblockTime
00005e  4284              CMP      r4,r0
000060  d200              BCS      |L2.100|
;;;4754   				{
;;;4755   					xNextTaskUnblockTime = xTimeToWake;
000062  62b4              STR      r4,[r6,#0x28]  ; xNextTaskUnblockTime
                  |L2.100|
;;;4756   				}
;;;4757   				else
;;;4758   				{
;;;4759   					mtCOVERAGE_TEST_MARKER();
;;;4760   				}
;;;4761   			}
;;;4762   		}
;;;4763   	}
;;;4764   	#else /* INCLUDE_vTaskSuspend */
;;;4765   	{
;;;4766   		/* Calculate the time at which the task should be woken if the event
;;;4767   		does not occur.  This may overflow but this doesn't matter, the kernel
;;;4768   		will manage it correctly. */
;;;4769   		xTimeToWake = xConstTickCount + xTicksToWait;
;;;4770   
;;;4771   		/* The list item will be inserted in wake time order. */
;;;4772   		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
;;;4773   
;;;4774   		if( xTimeToWake < xConstTickCount )
;;;4775   		{
;;;4776   			/* Wake time has overflowed.  Place this item in the overflow list. */
;;;4777   			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
;;;4778   		}
;;;4779   		else
;;;4780   		{
;;;4781   			/* The wake time has not overflowed, so the current block list is used. */
;;;4782   			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
;;;4783   
;;;4784   			/* If the task entering the blocked state was placed at the head of the
;;;4785   			list of blocked tasks then xNextTaskUnblockTime needs to be updated
;;;4786   			too. */
;;;4787   			if( xTimeToWake < xNextTaskUnblockTime )
;;;4788   			{
;;;4789   				xNextTaskUnblockTime = xTimeToWake;
;;;4790   			}
;;;4791   			else
;;;4792   			{
;;;4793   				mtCOVERAGE_TEST_MARKER();
;;;4794   			}
;;;4795   		}
;;;4796   
;;;4797   		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
;;;4798   		( void ) xCanBlockIndefinitely;
;;;4799   	}
;;;4800   	#endif /* INCLUDE_vTaskSuspend */
;;;4801   }
000064  e8bd81f0          POP      {r4-r8,pc}
;;;4802   
                          ENDP

                  |L2.104|
                          DCD      ||.data||
                  |L2.108|
                          DCD      ||.bss||+0xdc

                          AREA ||i.prvAddNewTaskToReadyList||, CODE, READONLY, ALIGN=2

                  prvAddNewTaskToReadyList PROC
;;;962    
;;;963    static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
000000  b570              PUSH     {r4-r6,lr}
;;;964    {
000002  4604              MOV      r4,r0
;;;965    	/* Ensure interrupts don't access the task lists while the lists are being
;;;966    	updated. */
;;;967    	taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;968    	{
;;;969    		uxCurrentNumberOfTasks++;
000008  4d1c              LDR      r5,|L3.124|
00000a  68a8              LDR      r0,[r5,#8]  ; uxCurrentNumberOfTasks
00000c  1c40              ADDS     r0,r0,#1
00000e  60a8              STR      r0,[r5,#8]  ; uxCurrentNumberOfTasks
;;;970    		if( pxCurrentTCB == NULL )
000010  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000012  b110              CBZ      r0,|L3.26|
;;;971    		{
;;;972    			/* There are no other tasks, or all the other tasks are in
;;;973    			the suspended state - make this the current task. */
;;;974    			pxCurrentTCB = pxNewTCB;
;;;975    
;;;976    			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
;;;977    			{
;;;978    				/* This is the first task to be created so do the preliminary
;;;979    				initialisation required.  We will not recover if this call
;;;980    				fails, but we will report the failure. */
;;;981    				prvInitialiseTaskLists();
;;;982    			}
;;;983    			else
;;;984    			{
;;;985    				mtCOVERAGE_TEST_MARKER();
;;;986    			}
;;;987    		}
;;;988    		else
;;;989    		{
;;;990    			/* If the scheduler is not already running, make this task the
;;;991    			current task if it is the highest priority task to be created
;;;992    			so far. */
;;;993    			if( xSchedulerRunning == pdFALSE )
000014  6968              LDR      r0,[r5,#0x14]  ; xSchedulerRunning
000016  b138              CBZ      r0,|L3.40|
000018  e00c              B        |L3.52|
                  |L3.26|
00001a  602c              STR      r4,[r5,#0]            ;974  ; pxCurrentTCB
00001c  68a8              LDR      r0,[r5,#8]            ;976  ; uxCurrentNumberOfTasks
00001e  2801              CMP      r0,#1                 ;976
000020  d108              BNE      |L3.52|
000022  f7fffffe          BL       prvInitialiseTaskLists
000026  e005              B        |L3.52|
                  |L3.40|
;;;994    			{
;;;995    				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
000028  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
00002a  6ae1              LDR      r1,[r4,#0x2c]
00002c  6ac0              LDR      r0,[r0,#0x2c]
00002e  4288              CMP      r0,r1
000030  d800              BHI      |L3.52|
;;;996    				{
;;;997    					pxCurrentTCB = pxNewTCB;
000032  602c              STR      r4,[r5,#0]  ; pxCurrentTCB
                  |L3.52|
;;;998    				}
;;;999    				else
;;;1000   				{
;;;1001   					mtCOVERAGE_TEST_MARKER();
;;;1002   				}
;;;1003   			}
;;;1004   			else
;;;1005   			{
;;;1006   				mtCOVERAGE_TEST_MARKER();
;;;1007   			}
;;;1008   		}
;;;1009   
;;;1010   		uxTaskNumber++;
000034  6a68              LDR      r0,[r5,#0x24]  ; uxTaskNumber
000036  1c40              ADDS     r0,r0,#1
000038  6268              STR      r0,[r5,#0x24]  ; uxTaskNumber
;;;1011   
;;;1012   		#if ( configUSE_TRACE_FACILITY == 1 )
;;;1013   		{
;;;1014   			/* Add a counter into the TCB for tracing only. */
;;;1015   			pxNewTCB->uxTCBNumber = uxTaskNumber;
;;;1016   		}
;;;1017   		#endif /* configUSE_TRACE_FACILITY */
;;;1018   		traceTASK_CREATE( pxNewTCB );
;;;1019   
;;;1020   		prvAddTaskToReadyList( pxNewTCB );
00003a  6ae0              LDR      r0,[r4,#0x2c]
00003c  2101              MOVS     r1,#1
00003e  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
000040  4081              LSLS     r1,r1,r0
000042  4311              ORRS     r1,r1,r2
000044  6129              STR      r1,[r5,#0x10]  ; uxTopReadyPriority
000046  490e              LDR      r1,|L3.128|
000048  eb000080          ADD      r0,r0,r0,LSL #2
00004c  eb010080          ADD      r0,r1,r0,LSL #2
000050  1d21              ADDS     r1,r4,#4
000052  f7fffffe          BL       vListInsertEnd
;;;1021   
;;;1022   		portSETUP_TCB( pxNewTCB );
;;;1023   	}
;;;1024   	taskEXIT_CRITICAL();
000056  f7fffffe          BL       vPortExitCritical
;;;1025   
;;;1026   	if( xSchedulerRunning != pdFALSE )
00005a  6968              LDR      r0,[r5,#0x14]  ; xSchedulerRunning
00005c  2800              CMP      r0,#0
00005e  d00c              BEQ      |L3.122|
;;;1027   	{
;;;1028   		/* If the created task is of a higher priority than the current task
;;;1029   		then it should run now. */
;;;1030   		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
000060  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000062  6ae1              LDR      r1,[r4,#0x2c]
000064  6ac0              LDR      r0,[r0,#0x2c]
000066  4288              CMP      r0,r1
000068  d207              BCS      |L3.122|
;;;1031   		{
;;;1032   			taskYIELD_IF_USING_PREEMPTION();
00006a  4906              LDR      r1,|L3.132|
00006c  f04f5080          MOV      r0,#0x10000000
000070  6008              STR      r0,[r1,#0]
000072  f3bf8f4f          DSB      
000076  f3bf8f6f          ISB      
                  |L3.122|
;;;1033   		}
;;;1034   		else
;;;1035   		{
;;;1036   			mtCOVERAGE_TEST_MARKER();
;;;1037   		}
;;;1038   	}
;;;1039   	else
;;;1040   	{
;;;1041   		mtCOVERAGE_TEST_MARKER();
;;;1042   	}
;;;1043   }
00007a  bd70              POP      {r4-r6,pc}
;;;1044   /*-----------------------------------------------------------*/
                          ENDP

                  |L3.124|
                          DCD      ||.data||
                  |L3.128|
                          DCD      ||.bss||
                  |L3.132|
                          DCD      0xe000ed04

                          AREA ||i.prvCheckTasksWaitingTermination||, CODE, READONLY, ALIGN=2

                  prvCheckTasksWaitingTermination PROC
;;;3364   
;;;3365   static void prvCheckTasksWaitingTermination( void )
000000  b570              PUSH     {r4-r6,lr}
;;;3366   {
;;;3367   
;;;3368   	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
;;;3369   
;;;3370   	#if ( INCLUDE_vTaskDelete == 1 )
;;;3371   	{
;;;3372   		BaseType_t xListIsEmpty;
;;;3373   
;;;3374   		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
;;;3375   		too often in the idle task. */
;;;3376   		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
;;;3377   		{
;;;3378   			vTaskSuspendAll();
;;;3379   			{
;;;3380   				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
000002  4e12              LDR      r6,|L4.76|
;;;3381   			}
;;;3382   			( void ) xTaskResumeAll();
;;;3383   
;;;3384   			if( xListIsEmpty == pdFALSE )
;;;3385   			{
;;;3386   				TCB_t *pxTCB;
;;;3387   
;;;3388   				taskENTER_CRITICAL();
;;;3389   				{
;;;3390   					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
;;;3391   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
;;;3392   					--uxCurrentNumberOfTasks;
000004  4d12              LDR      r5,|L4.80|
000006  e01c              B        |L4.66|
                  |L4.8|
000008  f7fffffe          BL       vTaskSuspendAll
00000c  6830              LDR      r0,[r6,#0]            ;3380  ; xTasksWaitingTermination
00000e  b120              CBZ      r0,|L4.26|
000010  2400              MOVS     r4,#0                 ;3380
                  |L4.18|
000012  f7fffffe          BL       xTaskResumeAll
000016  b9a4              CBNZ     r4,|L4.66|
000018  e001              B        |L4.30|
                  |L4.26|
00001a  2401              MOVS     r4,#1                 ;3380
00001c  e7f9              B        |L4.18|
                  |L4.30|
00001e  f7fffffe          BL       vPortEnterCritical
000022  68f0              LDR      r0,[r6,#0xc]          ;3390  ; xTasksWaitingTermination
000024  68c4              LDR      r4,[r0,#0xc]          ;3390
000026  1d20              ADDS     r0,r4,#4              ;3391
000028  f7fffffe          BL       uxListRemove
00002c  68a8              LDR      r0,[r5,#8]  ; uxCurrentNumberOfTasks
00002e  1e40              SUBS     r0,r0,#1
000030  60a8              STR      r0,[r5,#8]  ; uxCurrentNumberOfTasks
;;;3393   					--uxDeletedTasksWaitingCleanUp;
000032  6868              LDR      r0,[r5,#4]  ; uxDeletedTasksWaitingCleanUp
000034  1e40              SUBS     r0,r0,#1
000036  6068              STR      r0,[r5,#4]  ; uxDeletedTasksWaitingCleanUp
;;;3394   				}
;;;3395   				taskEXIT_CRITICAL();
000038  f7fffffe          BL       vPortExitCritical
;;;3396   
;;;3397   				prvDeleteTCB( pxTCB );
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       prvDeleteTCB
                  |L4.66|
000042  6868              LDR      r0,[r5,#4]            ;3376  ; uxDeletedTasksWaitingCleanUp
000044  2800              CMP      r0,#0                 ;3376
000046  d1df              BNE      |L4.8|
;;;3398   			}
;;;3399   			else
;;;3400   			{
;;;3401   				mtCOVERAGE_TEST_MARKER();
;;;3402   			}
;;;3403   		}
;;;3404   	}
;;;3405   	#endif /* INCLUDE_vTaskDelete */
;;;3406   }
000048  bd70              POP      {r4-r6,pc}
;;;3407   /*-----------------------------------------------------------*/
                          ENDP

00004a  0000              DCW      0x0000
                  |L4.76|
                          DCD      ||.bss||+0xc8
                  |L4.80|
                          DCD      ||.data||

                          AREA ||i.prvDeleteTCB||, CODE, READONLY, ALIGN=1

                  prvDeleteTCB PROC
;;;3580   
;;;3581   	static void prvDeleteTCB( TCB_t *pxTCB )
000000  b510              PUSH     {r4,lr}
;;;3582   	{
000002  4604              MOV      r4,r0
;;;3583   		/* This call is required specifically for the TriCore port.  It must be
;;;3584   		above the vPortFree() calls.  The call is also used by ports/demos that
;;;3585   		want to allocate and clean RAM statically. */
;;;3586   		portCLEAN_UP_TCB( pxTCB );
;;;3587   
;;;3588   		/* Free up the memory allocated by the scheduler for the task.  It is up
;;;3589   		to the task to free any memory allocated at the application level. */
;;;3590   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;3591   		{
;;;3592   			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
;;;3593   		}
;;;3594   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;3595   
;;;3596   		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
;;;3597   		{
;;;3598   			/* The task can only have been allocated dynamically - free both
;;;3599   			the stack and TCB. */
;;;3600   			vPortFree( pxTCB->pxStack );
000004  6b20              LDR      r0,[r4,#0x30]
000006  f7fffffe          BL       vPortFree
;;;3601   			vPortFree( pxTCB );
00000a  4620              MOV      r0,r4
00000c  e8bd4010          POP      {r4,lr}
000010  f7ffbffe          B.W      vPortFree
;;;3602   		}
;;;3603   		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
;;;3604   		{
;;;3605   			/* The task could have been allocated statically or dynamically, so
;;;3606   			check what was statically allocated before trying to free the
;;;3607   			memory. */
;;;3608   			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
;;;3609   			{
;;;3610   				/* Both the stack and TCB were allocated dynamically, so both
;;;3611   				must be freed. */
;;;3612   				vPortFree( pxTCB->pxStack );
;;;3613   				vPortFree( pxTCB );
;;;3614   			}
;;;3615   			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
;;;3616   			{
;;;3617   				/* Only the stack was statically allocated, so the TCB is the
;;;3618   				only memory that must be freed. */
;;;3619   				vPortFree( pxTCB );
;;;3620   			}
;;;3621   			else
;;;3622   			{
;;;3623   				/* Neither the stack nor the TCB were allocated dynamically, so
;;;3624   				nothing needs to be freed. */
;;;3625   				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
;;;3626   				mtCOVERAGE_TEST_MARKER();
;;;3627   			}
;;;3628   		}
;;;3629   		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
;;;3630   	}
;;;3631   
                          ENDP


                          AREA ||i.prvIdleTask||, CODE, READONLY, ALIGN=2

                  prvIdleTask PROC
;;;3130    */
;;;3131   static portTASK_FUNCTION( prvIdleTask, pvParameters )
000000  4e07              LDR      r6,|L6.32|
;;;3132   {
;;;3133   	/* Stop warnings. */
;;;3134   	( void ) pvParameters;
;;;3135   
;;;3136   	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
;;;3137   	SCHEDULER IS STARTED. **/
;;;3138   
;;;3139   	for( ;; )
;;;3140   	{
;;;3141   		/* See if any tasks have deleted themselves - if so then the idle task
;;;3142   		is responsible for freeing the deleted task's TCB and stack. */
;;;3143   		prvCheckTasksWaitingTermination();
;;;3144   
;;;3145   		#if ( configUSE_PREEMPTION == 0 )
;;;3146   		{
;;;3147   			/* If we are not using preemption we keep forcing a task switch to
;;;3148   			see if any other task has become available.  If we are using
;;;3149   			preemption we don't need to do this as any task becoming available
;;;3150   			will automatically get the processor anyway. */
;;;3151   			taskYIELD();
;;;3152   		}
;;;3153   		#endif /* configUSE_PREEMPTION */
;;;3154   
;;;3155   		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
;;;3156   		{
;;;3157   			/* When using preemption tasks of equal priority will be
;;;3158   			timesliced.  If a task that is sharing the idle priority is ready
;;;3159   			to run then the idle task should yield before the end of the
;;;3160   			timeslice.
;;;3161   
;;;3162   			A critical region is not required here as we are just reading from
;;;3163   			the list, and an occasional incorrect value will not matter.  If
;;;3164   			the ready list at the idle priority contains more than one task
;;;3165   			then a task other than the idle task is ready to execute. */
;;;3166   			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
;;;3167   			{
;;;3168   				taskYIELD();
000002  f04f5480          MOV      r4,#0x10000000
000006  4d07              LDR      r5,|L6.36|
                  |L6.8|
000008  f7fffffe          BL       prvCheckTasksWaitingTermination
00000c  6830              LDR      r0,[r6,#0]            ;3166  ; pxReadyTasksLists
00000e  2801              CMP      r0,#1                 ;3166
000010  d9fa              BLS      |L6.8|
000012  602c              STR      r4,[r5,#0]
000014  f3bf8f4f          DSB      
000018  f3bf8f6f          ISB      
00001c  e7f4              B        |L6.8|
;;;3169   			}
;;;3170   			else
;;;3171   			{
;;;3172   				mtCOVERAGE_TEST_MARKER();
;;;3173   			}
;;;3174   		}
;;;3175   		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
;;;3176   
;;;3177   		#if ( configUSE_IDLE_HOOK == 1 )
;;;3178   		{
;;;3179   			extern void vApplicationIdleHook( void );
;;;3180   
;;;3181   			/* Call the user defined function from within the idle task.  This
;;;3182   			allows the application designer to add background functionality
;;;3183   			without the overhead of a separate task.
;;;3184   			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
;;;3185   			CALL A FUNCTION THAT MIGHT BLOCK. */
;;;3186   			vApplicationIdleHook();
;;;3187   		}
;;;3188   		#endif /* configUSE_IDLE_HOOK */
;;;3189   
;;;3190   		/* This conditional compilation should use inequality to 0, not equality
;;;3191   		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
;;;3192   		user defined low power mode	implementations require
;;;3193   		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
;;;3194   		#if ( configUSE_TICKLESS_IDLE != 0 )
;;;3195   		{
;;;3196   		TickType_t xExpectedIdleTime;
;;;3197   
;;;3198   			/* It is not desirable to suspend then resume the scheduler on
;;;3199   			each iteration of the idle task.  Therefore, a preliminary
;;;3200   			test of the expected idle time is performed without the
;;;3201   			scheduler suspended.  The result here is not necessarily
;;;3202   			valid. */
;;;3203   			xExpectedIdleTime = prvGetExpectedIdleTime();
;;;3204   
;;;3205   			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
;;;3206   			{
;;;3207   				vTaskSuspendAll();
;;;3208   				{
;;;3209   					/* Now the scheduler is suspended, the expected idle
;;;3210   					time can be sampled again, and this time its value can
;;;3211   					be used. */
;;;3212   					configASSERT( xNextTaskUnblockTime >= xTickCount );
;;;3213   					xExpectedIdleTime = prvGetExpectedIdleTime();
;;;3214   
;;;3215   					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
;;;3216   					{
;;;3217   						traceLOW_POWER_IDLE_BEGIN();
;;;3218   						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
;;;3219   						traceLOW_POWER_IDLE_END();
;;;3220   					}
;;;3221   					else
;;;3222   					{
;;;3223   						mtCOVERAGE_TEST_MARKER();
;;;3224   					}
;;;3225   				}
;;;3226   				( void ) xTaskResumeAll();
;;;3227   			}
;;;3228   			else
;;;3229   			{
;;;3230   				mtCOVERAGE_TEST_MARKER();
;;;3231   			}
;;;3232   		}
;;;3233   		#endif /* configUSE_TICKLESS_IDLE */
;;;3234   	}
;;;3235   }
;;;3236   /*-----------------------------------------------------------*/
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
                          DCD      ||.bss||
                  |L6.36|
                          DCD      0xe000ed04

                          AREA ||i.prvInitialiseNewTask||, CODE, READONLY, ALIGN=1

                  prvInitialiseNewTask PROC
;;;766    
;;;767    static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;768    									const char * const pcName,
;;;769    									const uint32_t ulStackDepth,
;;;770    									void * const pvParameters,
;;;771    									UBaseType_t uxPriority,
;;;772    									TaskHandle_t * const pxCreatedTask,
;;;773    									TCB_t *pxNewTCB,
;;;774    									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
;;;775    {
000004  4681              MOV      r9,r0
000006  e9dd5708          LDRD     r5,r7,[sp,#0x20]
00000a  9c0a              LDR      r4,[sp,#0x28]
00000c  4698              MOV      r8,r3
;;;776    StackType_t *pxTopOfStack;
;;;777    UBaseType_t x;
;;;778    
;;;779    	#if( portUSING_MPU_WRAPPERS == 1 )
;;;780    		/* Should the task be created in privileged mode? */
;;;781    		BaseType_t xRunPrivileged;
;;;782    		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
;;;783    		{
;;;784    			xRunPrivileged = pdTRUE;
;;;785    		}
;;;786    		else
;;;787    		{
;;;788    			xRunPrivileged = pdFALSE;
;;;789    		}
;;;790    		uxPriority &= ~portPRIVILEGE_BIT;
;;;791    	#endif /* portUSING_MPU_WRAPPERS == 1 */
;;;792    
;;;793    	/* Avoid dependency on memset() if it is not required. */
;;;794    	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
;;;795    	{
;;;796    		/* Fill the stack with a known value to assist debugging. */
;;;797    		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
;;;798    	}
;;;799    	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
;;;800    
;;;801    	/* Calculate the top of stack address.  This depends on whether the stack
;;;802    	grows from high memory to low (as per the 80x86) or vice versa.
;;;803    	portSTACK_GROWTH is used to make the result positive or negative as required
;;;804    	by the port. */
;;;805    	#if( portSTACK_GROWTH < 0 )
;;;806    	{
;;;807    		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
00000e  1e52              SUBS     r2,r2,#1
000010  6b20              LDR      r0,[r4,#0x30]
000012  eb000082          ADD      r0,r0,r2,LSL #2
;;;808    		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
000016  f0200607          BIC      r6,r0,#7
;;;809    
;;;810    		/* Check the alignment of the calculated top of stack is correct. */
;;;811    		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
00001a  0770              LSLS     r0,r6,#29
00001c  d007              BEQ      |L7.46|
00001e  2050              MOVS     r0,#0x50              ;775
000020  f3808811          MSR      BASEPRI,r0            ;775
000024  f3bf8f4f          DSB                            ;775
000028  f3bf8f6f          ISB                            ;775
                  |L7.44|
00002c  e7fe              B        |L7.44|
                  |L7.46|
;;;812    	}
;;;813    	#else /* portSTACK_GROWTH */
;;;814    	{
;;;815    		pxTopOfStack = pxNewTCB->pxStack;
;;;816    
;;;817    		/* Check the alignment of the stack buffer is correct. */
;;;818    		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
;;;819    
;;;820    		/* The other extreme of the stack space is required if stack checking is
;;;821    		performed. */
;;;822    		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
;;;823    	}
;;;824    	#endif /* portSTACK_GROWTH */
;;;825    
;;;826    	/* Store the task name in the TCB. */
;;;827    	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
00002e  2000              MOVS     r0,#0
                  |L7.48|
;;;828    	{
;;;829    		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
000030  1823              ADDS     r3,r4,r0
000032  5c0a              LDRB     r2,[r1,r0]
000034  f8832034          STRB     r2,[r3,#0x34]
;;;830    
;;;831    		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
;;;832    		configMAX_TASK_NAME_LEN characters just in case the memory after the
;;;833    		string is not accessible (extremely unlikely). */
;;;834    		if( pcName[ x ] == 0x00 )
000038  5c0a              LDRB     r2,[r1,r0]
00003a  b112              CBZ      r2,|L7.66|
00003c  1c40              ADDS     r0,r0,#1              ;827
00003e  2810              CMP      r0,#0x10              ;827
000040  d3f6              BCC      |L7.48|
                  |L7.66|
;;;835    		{
;;;836    			break;
;;;837    		}
;;;838    		else
;;;839    		{
;;;840    			mtCOVERAGE_TEST_MARKER();
;;;841    		}
;;;842    	}
;;;843    
;;;844    	/* Ensure the name string is terminated in the case that the string length
;;;845    	was greater or equal to configMAX_TASK_NAME_LEN. */
;;;846    	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
000042  f04f0a00          MOV      r10,#0
000046  f884a043          STRB     r10,[r4,#0x43]
;;;847    
;;;848    	/* This is used as an array index so must ensure it's not too large.  First
;;;849    	remove the privilege bit if one is present. */
;;;850    	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
00004a  2d07              CMP      r5,#7
00004c  d300              BCC      |L7.80|
;;;851    	{
;;;852    		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
00004e  2506              MOVS     r5,#6
                  |L7.80|
;;;853    	}
;;;854    	else
;;;855    	{
;;;856    		mtCOVERAGE_TEST_MARKER();
;;;857    	}
;;;858    
;;;859    	pxNewTCB->uxPriority = uxPriority;
000050  62e5              STR      r5,[r4,#0x2c]
;;;860    	#if ( configUSE_MUTEXES == 1 )
;;;861    	{
;;;862    		pxNewTCB->uxBasePriority = uxPriority;
000052  6465              STR      r5,[r4,#0x44]
;;;863    		pxNewTCB->uxMutexesHeld = 0;
000054  f8c4a048          STR      r10,[r4,#0x48]
;;;864    	}
;;;865    	#endif /* configUSE_MUTEXES */
;;;866    
;;;867    	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
000058  1d20              ADDS     r0,r4,#4
00005a  f7fffffe          BL       vListInitialiseItem
;;;868    	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
00005e  f1040018          ADD      r0,r4,#0x18
000062  f7fffffe          BL       vListInitialiseItem
;;;869    
;;;870    	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
;;;871    	back to	the containing TCB from a generic item in a list. */
;;;872    	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
000066  6124              STR      r4,[r4,#0x10]
;;;873    
;;;874    	/* Event lists are always in priority order. */
;;;875    	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000068  f1c50007          RSB      r0,r5,#7
00006c  61a0              STR      r0,[r4,#0x18]
;;;876    	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
00006e  6264              STR      r4,[r4,#0x24]
;;;877    
;;;878    	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
;;;879    	{
;;;880    		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
;;;881    	}
;;;882    	#endif /* portCRITICAL_NESTING_IN_TCB */
;;;883    
;;;884    	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
;;;885    	{
;;;886    		pxNewTCB->pxTaskTag = NULL;
;;;887    	}
;;;888    	#endif /* configUSE_APPLICATION_TASK_TAG */
;;;889    
;;;890    	#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;891    	{
;;;892    		pxNewTCB->ulRunTimeCounter = 0UL;
;;;893    	}
;;;894    	#endif /* configGENERATE_RUN_TIME_STATS */
;;;895    
;;;896    	#if ( portUSING_MPU_WRAPPERS == 1 )
;;;897    	{
;;;898    		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth );
;;;899    	}
;;;900    	#else
;;;901    	{
;;;902    		/* Avoid compiler warning about unreferenced parameter. */
;;;903    		( void ) xRegions;
;;;904    	}
;;;905    	#endif
;;;906    
;;;907    	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
;;;908    	{
;;;909    		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
;;;910    		{
;;;911    			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
;;;912    		}
;;;913    	}
;;;914    	#endif
;;;915    
;;;916    	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
;;;917    	{
;;;918    		pxNewTCB->ulNotifiedValue = 0;
000070  f8c4a04c          STR      r10,[r4,#0x4c]
;;;919    		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
000074  f884a050          STRB     r10,[r4,#0x50]
;;;920    	}
;;;921    	#endif
;;;922    
;;;923    	#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;924    	{
;;;925    		/* Initialise this task's Newlib reent structure. */
;;;926    		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
;;;927    	}
;;;928    	#endif
;;;929    
;;;930    	#if( INCLUDE_xTaskAbortDelay == 1 )
;;;931    	{
;;;932    		pxNewTCB->ucDelayAborted = pdFALSE;
;;;933    	}
;;;934    	#endif
;;;935    
;;;936    	/* Initialize the TCB stack to look as if the task was already running,
;;;937    	but had been interrupted by the scheduler.  The return address is set
;;;938    	to the start of the task function. Once the stack has been initialised
;;;939    	the	top of stack variable is updated. */
;;;940    	#if( portUSING_MPU_WRAPPERS == 1 )
;;;941    	{
;;;942    		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
;;;943    	}
;;;944    	#else /* portUSING_MPU_WRAPPERS */
;;;945    	{
;;;946    		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
000078  4642              MOV      r2,r8
00007a  4649              MOV      r1,r9
00007c  4630              MOV      r0,r6
00007e  f7fffffe          BL       pxPortInitialiseStack
000082  6020              STR      r0,[r4,#0]
;;;947    	}
;;;948    	#endif /* portUSING_MPU_WRAPPERS */
;;;949    
;;;950    	if( ( void * ) pxCreatedTask != NULL )
000084  2f00              CMP      r7,#0
000086  d000              BEQ      |L7.138|
;;;951    	{
;;;952    		/* Pass the handle out in an anonymous way.  The handle can be used to
;;;953    		change the created task's priority, delete the created task, etc.*/
;;;954    		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
000088  603c              STR      r4,[r7,#0]
                  |L7.138|
;;;955    	}
;;;956    	else
;;;957    	{
;;;958    		mtCOVERAGE_TEST_MARKER();
;;;959    	}
;;;960    }
00008a  e8bd87f0          POP      {r4-r10,pc}
;;;961    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvInitialiseTaskLists||, CODE, READONLY, ALIGN=2

                  prvInitialiseTaskLists PROC
;;;3332   
;;;3333   static void prvInitialiseTaskLists( void )
000000  b570              PUSH     {r4-r6,lr}
;;;3334   {
;;;3335   UBaseType_t uxPriority;
;;;3336   
;;;3337   	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
000002  2400              MOVS     r4,#0
;;;3338   	{
;;;3339   		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
000004  4d12              LDR      r5,|L8.80|
                  |L8.6|
000006  eb040084          ADD      r0,r4,r4,LSL #2
00000a  eb050080          ADD      r0,r5,r0,LSL #2
00000e  f7fffffe          BL       vListInitialise
000012  1c64              ADDS     r4,r4,#1              ;3337
000014  2c07              CMP      r4,#7                 ;3337
000016  d3f6              BCC      |L8.6|
;;;3340   	}
;;;3341   
;;;3342   	vListInitialise( &xDelayedTaskList1 );
000018  480d              LDR      r0,|L8.80|
00001a  308c              ADDS     r0,r0,#0x8c
00001c  f7fffffe          BL       vListInitialise
;;;3343   	vListInitialise( &xDelayedTaskList2 );
000020  480b              LDR      r0,|L8.80|
000022  30a0              ADDS     r0,r0,#0xa0
000024  f7fffffe          BL       vListInitialise
;;;3344   	vListInitialise( &xPendingReadyList );
000028  4809              LDR      r0,|L8.80|
00002a  30b4              ADDS     r0,r0,#0xb4
00002c  f7fffffe          BL       vListInitialise
;;;3345   
;;;3346   	#if ( INCLUDE_vTaskDelete == 1 )
;;;3347   	{
;;;3348   		vListInitialise( &xTasksWaitingTermination );
000030  4807              LDR      r0,|L8.80|
000032  30c8              ADDS     r0,r0,#0xc8
000034  f7fffffe          BL       vListInitialise
;;;3349   	}
;;;3350   	#endif /* INCLUDE_vTaskDelete */
;;;3351   
;;;3352   	#if ( INCLUDE_vTaskSuspend == 1 )
;;;3353   	{
;;;3354   		vListInitialise( &xSuspendedTaskList );
000038  4805              LDR      r0,|L8.80|
00003a  30dc              ADDS     r0,r0,#0xdc
00003c  f7fffffe          BL       vListInitialise
;;;3355   	}
;;;3356   	#endif /* INCLUDE_vTaskSuspend */
;;;3357   
;;;3358   	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
;;;3359   	using list2. */
;;;3360   	pxDelayedTaskList = &xDelayedTaskList1;
000040  4903              LDR      r1,|L8.80|
000042  4804              LDR      r0,|L8.84|
000044  318c              ADDS     r1,r1,#0x8c
000046  6341              STR      r1,[r0,#0x34]  ; pxDelayedTaskList
;;;3361   	pxOverflowDelayedTaskList = &xDelayedTaskList2;
000048  3114              ADDS     r1,r1,#0x14
00004a  6381              STR      r1,[r0,#0x38]  ; pxOverflowDelayedTaskList
;;;3362   }
00004c  bd70              POP      {r4-r6,pc}
;;;3363   /*-----------------------------------------------------------*/
                          ENDP

00004e  0000              DCW      0x0000
                  |L8.80|
                          DCD      ||.bss||
                  |L8.84|
                          DCD      ||.data||

                          AREA ||i.prvResetNextTaskUnblockTime||, CODE, READONLY, ALIGN=2

                  prvResetNextTaskUnblockTime PROC
;;;3634   
;;;3635   static void prvResetNextTaskUnblockTime( void )
000000  4807              LDR      r0,|L9.32|
;;;3636   {
;;;3637   TCB_t *pxTCB;
;;;3638   
;;;3639   	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
000002  6b41              LDR      r1,[r0,#0x34]  ; pxDelayedTaskList
000004  6809              LDR      r1,[r1,#0]
000006  2900              CMP      r1,#0
000008  d005              BEQ      |L9.22|
;;;3640   	{
;;;3641   		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
;;;3642   		the maximum possible value so it is	extremely unlikely that the
;;;3643   		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
;;;3644   		there is an item in the delayed list. */
;;;3645   		xNextTaskUnblockTime = portMAX_DELAY;
;;;3646   	}
;;;3647   	else
;;;3648   	{
;;;3649   		/* The new current delayed list is not empty, get the value of
;;;3650   		the item at the head of the delayed list.  This is the time at
;;;3651   		which the task at the head of the delayed list should be removed
;;;3652   		from the Blocked state. */
;;;3653   		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
00000a  6b41              LDR      r1,[r0,#0x34]  ; pxDelayedTaskList
00000c  68c9              LDR      r1,[r1,#0xc]
00000e  68c9              LDR      r1,[r1,#0xc]
;;;3654   		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
000010  6849              LDR      r1,[r1,#4]
000012  6281              STR      r1,[r0,#0x28]  ; xNextTaskUnblockTime
;;;3655   	}
;;;3656   }
000014  4770              BX       lr
                  |L9.22|
000016  f04f31ff          MOV      r1,#0xffffffff        ;3645
00001a  6281              STR      r1,[r0,#0x28]         ;3645  ; xNextTaskUnblockTime
00001c  4770              BX       lr
;;;3657   /*-----------------------------------------------------------*/
                          ENDP

00001e  0000              DCW      0x0000
                  |L9.32|
                          DCD      ||.data||

                          AREA ||i.prvTaskIsTaskSuspended||, CODE, READONLY, ALIGN=2

                  prvTaskIsTaskSuspended PROC
;;;1655   
;;;1656   	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
000000  2100              MOVS     r1,#0
;;;1657   	{
;;;1658   	BaseType_t xReturn = pdFALSE;
;;;1659   	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
;;;1660   
;;;1661   		/* Accesses xPendingReadyList so must be called from a critical
;;;1662   		section. */
;;;1663   
;;;1664   		/* It does not make sense to check if the calling task is suspended. */
;;;1665   		configASSERT( xTask );
000002  2800              CMP      r0,#0
000004  d00a              BEQ      |L10.28|
;;;1666   
;;;1667   		/* Is the task being resumed actually in the suspended list? */
;;;1668   		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
000006  4b0b              LDR      r3,|L10.52|
000008  6942              LDR      r2,[r0,#0x14]
00000a  429a              CMP      r2,r3
00000c  d10f              BNE      |L10.46|
;;;1669   		{
;;;1670   			/* Has the task already been resumed from within an ISR? */
;;;1671   			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
00000e  6a80              LDR      r0,[r0,#0x28]
000010  f1a30228          SUB      r2,r3,#0x28
000014  4290              CMP      r0,r2
000016  d00a              BEQ      |L10.46|
;;;1672   			{
;;;1673   				/* Is it in the suspended list because it is in the	Suspended
;;;1674   				state, or because is is blocked with no timeout? */
;;;1675   				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
000018  b140              CBZ      r0,|L10.44|
00001a  e008              B        |L10.46|
                  |L10.28|
00001c  2050              MOVS     r0,#0x50
00001e  f3808811          MSR      BASEPRI,r0
000022  f3bf8f4f          DSB      
000026  f3bf8f6f          ISB      
                  |L10.42|
00002a  e7fe              B        |L10.42|
                  |L10.44|
;;;1676   				{
;;;1677   					xReturn = pdTRUE;
00002c  2101              MOVS     r1,#1
                  |L10.46|
;;;1678   				}
;;;1679   				else
;;;1680   				{
;;;1681   					mtCOVERAGE_TEST_MARKER();
;;;1682   				}
;;;1683   			}
;;;1684   			else
;;;1685   			{
;;;1686   				mtCOVERAGE_TEST_MARKER();
;;;1687   			}
;;;1688   		}
;;;1689   		else
;;;1690   		{
;;;1691   			mtCOVERAGE_TEST_MARKER();
;;;1692   		}
;;;1693   
;;;1694   		return xReturn;
00002e  4608              MOV      r0,r1
;;;1695   	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
000030  4770              BX       lr
;;;1696   
                          ENDP

000032  0000              DCW      0x0000
                  |L10.52|
                          DCD      ||.bss||+0xdc

                          AREA ||i.pvTaskIncrementMutexHeldCount||, CODE, READONLY, ALIGN=2

                  pvTaskIncrementMutexHeldCount PROC
;;;4177   
;;;4178   	void *pvTaskIncrementMutexHeldCount( void )
000000  4904              LDR      r1,|L11.20|
;;;4179   	{
;;;4180   		/* If xSemaphoreCreateMutex() is called before any tasks have been created
;;;4181   		then pxCurrentTCB will be NULL. */
;;;4182   		if( pxCurrentTCB != NULL )
000002  6808              LDR      r0,[r1,#0]  ; pxCurrentTCB
000004  2800              CMP      r0,#0
000006  d003              BEQ      |L11.16|
;;;4183   		{
;;;4184   			( pxCurrentTCB->uxMutexesHeld )++;
000008  6808              LDR      r0,[r1,#0]  ; pxCurrentTCB
00000a  6c82              LDR      r2,[r0,#0x48]
00000c  1c52              ADDS     r2,r2,#1
00000e  6482              STR      r2,[r0,#0x48]
                  |L11.16|
;;;4185   		}
;;;4186   
;;;4187   		return pxCurrentTCB;
000010  6808              LDR      r0,[r1,#0]  ; pxCurrentTCB
;;;4188   	}
000012  4770              BX       lr
;;;4189   
                          ENDP

                  |L11.20|
                          DCD      ||.data||

                          AREA ||i.ulTaskNotifyTake||, CODE, READONLY, ALIGN=2

                  ulTaskNotifyTake PROC
;;;4194   
;;;4195   	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;4196   	{
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;4197   	uint32_t ulReturn;
;;;4198   
;;;4199   		taskENTER_CRITICAL();
000006  f7fffffe          BL       vPortEnterCritical
;;;4200   		{
;;;4201   			/* Only block if the notification count is not already non-zero. */
;;;4202   			if( pxCurrentTCB->ulNotifiedValue == 0UL )
00000a  4d15              LDR      r5,|L12.96|
00000c  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
00000e  6cc0              LDR      r0,[r0,#0x4c]
000010  b980              CBNZ     r0,|L12.52|
;;;4203   			{
;;;4204   				/* Mark this task as waiting for a notification. */
;;;4205   				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
000012  682a              LDR      r2,[r5,#0]  ; pxCurrentTCB
000014  2001              MOVS     r0,#1
000016  f8820050          STRB     r0,[r2,#0x50]
;;;4206   
;;;4207   				if( xTicksToWait > ( TickType_t ) 0 )
00001a  b15c              CBZ      r4,|L12.52|
;;;4208   				{
;;;4209   					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
00001c  2101              MOVS     r1,#1
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;4210   					traceTASK_NOTIFY_TAKE_BLOCK();
;;;4211   
;;;4212   					/* All ports are written to allow a yield in a critical
;;;4213   					section (some will yield immediately, others wait until the
;;;4214   					critical section exits) - but it is not something that
;;;4215   					application code should ever do. */
;;;4216   					portYIELD_WITHIN_API();
000024  490f              LDR      r1,|L12.100|
000026  f04f5080          MOV      r0,#0x10000000
00002a  6008              STR      r0,[r1,#0]
00002c  f3bf8f4f          DSB      
000030  f3bf8f6f          ISB      
                  |L12.52|
;;;4217   				}
;;;4218   				else
;;;4219   				{
;;;4220   					mtCOVERAGE_TEST_MARKER();
;;;4221   				}
;;;4222   			}
;;;4223   			else
;;;4224   			{
;;;4225   				mtCOVERAGE_TEST_MARKER();
;;;4226   			}
;;;4227   		}
;;;4228   		taskEXIT_CRITICAL();
000034  f7fffffe          BL       vPortExitCritical
;;;4229   
;;;4230   		taskENTER_CRITICAL();
000038  f7fffffe          BL       vPortEnterCritical
;;;4231   		{
;;;4232   			traceTASK_NOTIFY_TAKE();
;;;4233   			ulReturn = pxCurrentTCB->ulNotifiedValue;
00003c  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
00003e  6cc4              LDR      r4,[r0,#0x4c]
;;;4234   
;;;4235   			if( ulReturn != 0UL )
000040  2000              MOVS     r0,#0
000042  b134              CBZ      r4,|L12.82|
;;;4236   			{
;;;4237   				if( xClearCountOnExit != pdFALSE )
000044  b116              CBZ      r6,|L12.76|
;;;4238   				{
;;;4239   					pxCurrentTCB->ulNotifiedValue = 0UL;
000046  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000048  64c8              STR      r0,[r1,#0x4c]
00004a  e002              B        |L12.82|
                  |L12.76|
;;;4240   				}
;;;4241   				else
;;;4242   				{
;;;4243   					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
00004c  682a              LDR      r2,[r5,#0]  ; pxCurrentTCB
00004e  1e61              SUBS     r1,r4,#1
000050  64d1              STR      r1,[r2,#0x4c]
                  |L12.82|
;;;4244   				}
;;;4245   			}
;;;4246   			else
;;;4247   			{
;;;4248   				mtCOVERAGE_TEST_MARKER();
;;;4249   			}
;;;4250   
;;;4251   			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
000052  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000054  f8810050          STRB     r0,[r1,#0x50]
;;;4252   		}
;;;4253   		taskEXIT_CRITICAL();
000058  f7fffffe          BL       vPortExitCritical
;;;4254   
;;;4255   		return ulReturn;
00005c  4620              MOV      r0,r4
;;;4256   	}
00005e  bd70              POP      {r4-r6,pc}
;;;4257   
                          ENDP

                  |L12.96|
                          DCD      ||.data||
                  |L12.100|
                          DCD      0xe000ed04

                          AREA ||i.uxTaskGetNumberOfTasks||, CODE, READONLY, ALIGN=2

                  uxTaskGetNumberOfTasks PROC
;;;2172   
;;;2173   UBaseType_t uxTaskGetNumberOfTasks( void )
000000  4801              LDR      r0,|L13.8|
;;;2174   {
;;;2175   	/* A critical section is not required because the variables are of type
;;;2176   	BaseType_t. */
;;;2177   	return uxCurrentNumberOfTasks;
000002  6880              LDR      r0,[r0,#8]  ; uxCurrentNumberOfTasks
;;;2178   }
000004  4770              BX       lr
;;;2179   /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      ||.data||

                          AREA ||i.uxTaskPriorityGet||, CODE, READONLY, ALIGN=2

                  uxTaskPriorityGet PROC
;;;1339   
;;;1340   	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
000000  b510              PUSH     {r4,lr}
;;;1341   	{
000002  4604              MOV      r4,r0
;;;1342   	TCB_t *pxTCB;
;;;1343   	UBaseType_t uxReturn;
;;;1344   
;;;1345   		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1346   		{
;;;1347   			/* If null is passed in here then it is the priority of the that
;;;1348   			called uxTaskPriorityGet() that is being queried. */
;;;1349   			pxTCB = prvGetTCBFromHandle( xTask );
000008  b90c              CBNZ     r4,|L14.14|
00000a  4803              LDR      r0,|L14.24|
00000c  6804              LDR      r4,[r0,#0]  ; pxCurrentTCB
                  |L14.14|
;;;1350   			uxReturn = pxTCB->uxPriority;
00000e  6ae4              LDR      r4,[r4,#0x2c]
;;;1351   		}
;;;1352   		taskEXIT_CRITICAL();
000010  f7fffffe          BL       vPortExitCritical
;;;1353   
;;;1354   		return uxReturn;
000014  4620              MOV      r0,r4
;;;1355   	}
000016  bd10              POP      {r4,pc}
;;;1356   
                          ENDP

                  |L14.24|
                          DCD      ||.data||

                          AREA ||i.uxTaskPriorityGetFromISR||, CODE, READONLY, ALIGN=2

                  uxTaskPriorityGetFromISR PROC
;;;1361   
;;;1362   	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
000000  b510              PUSH     {r4,lr}
;;;1363   	{
000002  4604              MOV      r4,r0
;;;1364   	TCB_t *pxTCB;
;;;1365   	UBaseType_t uxReturn, uxSavedInterruptState;
;;;1366   
;;;1367   		/* RTOS ports that support interrupt nesting have the concept of a
;;;1368   		maximum	system call (or maximum API call) interrupt priority.
;;;1369   		Interrupts that are	above the maximum system call priority are keep
;;;1370   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;1371   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;1372   		is defined in FreeRTOSConfig.h then
;;;1373   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1374   		failure if a FreeRTOS API function is called from an interrupt that has
;;;1375   		been assigned a priority above the configured maximum system call
;;;1376   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;1377   		from interrupts	that have been assigned a priority at or (logically)
;;;1378   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;1379   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;1380   		simple as possible.  More information (albeit Cortex-M specific) is
;;;1381   		provided on the following link:
;;;1382   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1383   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000004  f7fffffe          BL       vPortValidateInterruptPriority
000008  2050              MOVS     r0,#0x50
00000a  f3ef8111          MRS      r1,BASEPRI
00000e  f3808811          MSR      BASEPRI,r0
000012  f3bf8f4f          DSB      
000016  f3bf8f6f          ISB      
;;;1384   
;;;1385   		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
;;;1386   		{
;;;1387   			/* If null is passed in here then it is the priority of the calling
;;;1388   			task that is being queried. */
;;;1389   			pxTCB = prvGetTCBFromHandle( xTask );
00001a  b90c              CBNZ     r4,|L15.32|
00001c  4802              LDR      r0,|L15.40|
00001e  6804              LDR      r4,[r0,#0]  ; pxCurrentTCB
                  |L15.32|
;;;1390   			uxReturn = pxTCB->uxPriority;
000020  6ae0              LDR      r0,[r4,#0x2c]
000022  f3818811          MSR      BASEPRI,r1
;;;1391   		}
;;;1392   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
;;;1393   
;;;1394   		return uxReturn;
;;;1395   	}
000026  bd10              POP      {r4,pc}
;;;1396   
                          ENDP

                  |L15.40|
                          DCD      ||.data||

                          AREA ||i.uxTaskResetEventItemValue||, CODE, READONLY, ALIGN=2

                  uxTaskResetEventItemValue PROC
;;;4161   
;;;4162   TickType_t uxTaskResetEventItemValue( void )
000000  4904              LDR      r1,|L16.20|
;;;4163   {
;;;4164   TickType_t uxReturn;
;;;4165   
;;;4166   	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
000002  6808              LDR      r0,[r1,#0]  ; pxCurrentTCB
000004  6980              LDR      r0,[r0,#0x18]
;;;4167   
;;;4168   	/* Reset the event list item to its normal value - so it can be used with
;;;4169   	queues and semaphores. */
;;;4170   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000006  680a              LDR      r2,[r1,#0]  ; pxCurrentTCB
000008  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00000a  6ad2              LDR      r2,[r2,#0x2c]
00000c  f1c20207          RSB      r2,r2,#7
000010  618a              STR      r2,[r1,#0x18]
;;;4171   
;;;4172   	return uxReturn;
;;;4173   }
000012  4770              BX       lr
;;;4174   /*-----------------------------------------------------------*/
                          ENDP

                  |L16.20|
                          DCD      ||.data||

                          AREA ||i.vTaskDelay||, CODE, READONLY, ALIGN=2

                  vTaskDelay PROC
;;;1223   
;;;1224   	void vTaskDelay( const TickType_t xTicksToDelay )
000000  b510              PUSH     {r4,lr}
;;;1225   	{
000002  4602              MOV      r2,r0
;;;1226   	BaseType_t xAlreadyYielded = pdFALSE;
000004  2000              MOVS     r0,#0
;;;1227   
;;;1228   		/* A delay time of zero just forces a reschedule. */
;;;1229   		if( xTicksToDelay > ( TickType_t ) 0U )
000006  2a00              CMP      r2,#0
000008  d012              BEQ      |L17.48|
;;;1230   		{
;;;1231   			configASSERT( uxSchedulerSuspended == 0 );
00000a  480f              LDR      r0,|L17.72|
00000c  6b00              LDR      r0,[r0,#0x30]  ; uxSchedulerSuspended
00000e  b138              CBZ      r0,|L17.32|
000010  2050              MOVS     r0,#0x50
000012  f3808811          MSR      BASEPRI,r0
000016  f3bf8f4f          DSB      
00001a  f3bf8f6f          ISB      
                  |L17.30|
00001e  e7fe              B        |L17.30|
                  |L17.32|
;;;1232   			vTaskSuspendAll();
000020  f7fffffe          BL       vTaskSuspendAll
;;;1233   			{
;;;1234   				traceTASK_DELAY();
;;;1235   
;;;1236   				/* A task that is removed from the event list while the
;;;1237   				scheduler is suspended will not get placed in the ready
;;;1238   				list or removed from the blocked list until the scheduler
;;;1239   				is resumed.
;;;1240   
;;;1241   				This task cannot be in an event list as it is the currently
;;;1242   				executing task. */
;;;1243   				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
000024  2100              MOVS     r1,#0
000026  4610              MOV      r0,r2
000028  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;1244   			}
;;;1245   			xAlreadyYielded = xTaskResumeAll();
00002c  f7fffffe          BL       xTaskResumeAll
                  |L17.48|
;;;1246   		}
;;;1247   		else
;;;1248   		{
;;;1249   			mtCOVERAGE_TEST_MARKER();
;;;1250   		}
;;;1251   
;;;1252   		/* Force a reschedule if xTaskResumeAll has not already done so, we may
;;;1253   		have put ourselves to sleep. */
;;;1254   		if( xAlreadyYielded == pdFALSE )
000030  2800              CMP      r0,#0
000032  d107              BNE      |L17.68|
;;;1255   		{
;;;1256   			portYIELD_WITHIN_API();
000034  4905              LDR      r1,|L17.76|
000036  f04f5080          MOV      r0,#0x10000000
00003a  6008              STR      r0,[r1,#0]
00003c  f3bf8f4f          DSB      
000040  f3bf8f6f          ISB      
                  |L17.68|
;;;1257   		}
;;;1258   		else
;;;1259   		{
;;;1260   			mtCOVERAGE_TEST_MARKER();
;;;1261   		}
;;;1262   	}
000044  bd10              POP      {r4,pc}
;;;1263   
                          ENDP

000046  0000              DCW      0x0000
                  |L17.72|
                          DCD      ||.data||
                  |L17.76|
                          DCD      0xe000ed04

                          AREA ||i.vTaskDelete||, CODE, READONLY, ALIGN=2

                  vTaskDelete PROC
;;;1047   
;;;1048   	void vTaskDelete( TaskHandle_t xTaskToDelete )
000000  b570              PUSH     {r4-r6,lr}
;;;1049   	{
000002  4604              MOV      r4,r0
;;;1050   	TCB_t *pxTCB;
;;;1051   
;;;1052   		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1053   		{
;;;1054   			/* If null is passed in here then it is the calling task that is
;;;1055   			being deleted. */
;;;1056   			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
000008  4d25              LDR      r5,|L18.160|
00000a  b904              CBNZ     r4,|L18.14|
00000c  682c              LDR      r4,[r5,#0]  ; pxCurrentTCB
                  |L18.14|
;;;1057   
;;;1058   			/* Remove task from the ready list. */
;;;1059   			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
00000e  1d20              ADDS     r0,r4,#4
000010  f7fffffe          BL       uxListRemove
000014  b958              CBNZ     r0,|L18.46|
;;;1060   			{
;;;1061   				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
000016  6ae0              LDR      r0,[r4,#0x2c]
000018  4a22              LDR      r2,|L18.164|
00001a  eb000180          ADD      r1,r0,r0,LSL #2
00001e  f8521021          LDR      r1,[r2,r1,LSL #2]
000022  b921              CBNZ     r1,|L18.46|
000024  2101              MOVS     r1,#1
000026  4081              LSLS     r1,r1,r0
000028  6928              LDR      r0,[r5,#0x10]  ; uxTopReadyPriority
00002a  4388              BICS     r0,r0,r1
00002c  6128              STR      r0,[r5,#0x10]  ; uxTopReadyPriority
                  |L18.46|
;;;1062   			}
;;;1063   			else
;;;1064   			{
;;;1065   				mtCOVERAGE_TEST_MARKER();
;;;1066   			}
;;;1067   
;;;1068   			/* Is the task waiting on an event also? */
;;;1069   			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
00002e  6aa0              LDR      r0,[r4,#0x28]
000030  b118              CBZ      r0,|L18.58|
;;;1070   			{
;;;1071   				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000032  f1040018          ADD      r0,r4,#0x18
000036  f7fffffe          BL       uxListRemove
                  |L18.58|
;;;1072   			}
;;;1073   			else
;;;1074   			{
;;;1075   				mtCOVERAGE_TEST_MARKER();
;;;1076   			}
;;;1077   
;;;1078   			/* Increment the uxTaskNumber also so kernel aware debuggers can
;;;1079   			detect that the task lists need re-generating.  This is done before
;;;1080   			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
;;;1081   			not return. */
;;;1082   			uxTaskNumber++;
00003a  6a68              LDR      r0,[r5,#0x24]  ; uxTaskNumber
00003c  1c40              ADDS     r0,r0,#1
00003e  6268              STR      r0,[r5,#0x24]  ; uxTaskNumber
;;;1083   
;;;1084   			if( pxTCB == pxCurrentTCB )
000040  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000042  4284              CMP      r4,r0
000044  d108              BNE      |L18.88|
;;;1085   			{
;;;1086   				/* A task is deleting itself.  This cannot complete within the
;;;1087   				task itself, as a context switch to another task is required.
;;;1088   				Place the task in the termination list.  The idle task will
;;;1089   				check the termination list and free up any memory allocated by
;;;1090   				the scheduler for the TCB and stack of the deleted task. */
;;;1091   				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
000046  4817              LDR      r0,|L18.164|
000048  1d21              ADDS     r1,r4,#4
00004a  30c8              ADDS     r0,r0,#0xc8
00004c  f7fffffe          BL       vListInsertEnd
;;;1092   
;;;1093   				/* Increment the ucTasksDeleted variable so the idle task knows
;;;1094   				there is a task that has been deleted and that it should therefore
;;;1095   				check the xTasksWaitingTermination list. */
;;;1096   				++uxDeletedTasksWaitingCleanUp;
000050  6868              LDR      r0,[r5,#4]  ; uxDeletedTasksWaitingCleanUp
000052  1c40              ADDS     r0,r0,#1
000054  6068              STR      r0,[r5,#4]  ; uxDeletedTasksWaitingCleanUp
000056  e007              B        |L18.104|
                  |L18.88|
;;;1097   
;;;1098   				/* The pre-delete hook is primarily for the Windows simulator,
;;;1099   				in which Windows specific clean up operations are performed,
;;;1100   				after which it is not possible to yield away from this task -
;;;1101   				hence xYieldPending is used to latch that a context switch is
;;;1102   				required. */
;;;1103   				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
;;;1104   			}
;;;1105   			else
;;;1106   			{
;;;1107   				--uxCurrentNumberOfTasks;
000058  68a8              LDR      r0,[r5,#8]  ; uxCurrentNumberOfTasks
00005a  1e40              SUBS     r0,r0,#1
00005c  60a8              STR      r0,[r5,#8]  ; uxCurrentNumberOfTasks
;;;1108   				prvDeleteTCB( pxTCB );
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       prvDeleteTCB
;;;1109   
;;;1110   				/* Reset the next expected unblock time in case it referred to
;;;1111   				the task that has just been deleted. */
;;;1112   				prvResetNextTaskUnblockTime();
000064  f7fffffe          BL       prvResetNextTaskUnblockTime
                  |L18.104|
;;;1113   			}
;;;1114   
;;;1115   			traceTASK_DELETE( pxTCB );
;;;1116   		}
;;;1117   		taskEXIT_CRITICAL();
000068  f7fffffe          BL       vPortExitCritical
;;;1118   
;;;1119   		/* Force a reschedule if it is the currently running task that has just
;;;1120   		been deleted. */
;;;1121   		if( xSchedulerRunning != pdFALSE )
00006c  6968              LDR      r0,[r5,#0x14]  ; xSchedulerRunning
00006e  2800              CMP      r0,#0
000070  d014              BEQ      |L18.156|
;;;1122   		{
;;;1123   			if( pxTCB == pxCurrentTCB )
000072  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000074  4284              CMP      r4,r0
000076  d111              BNE      |L18.156|
;;;1124   			{
;;;1125   				configASSERT( uxSchedulerSuspended == 0 );
000078  6b28              LDR      r0,[r5,#0x30]  ; uxSchedulerSuspended
00007a  b138              CBZ      r0,|L18.140|
00007c  2050              MOVS     r0,#0x50
00007e  f3808811          MSR      BASEPRI,r0
000082  f3bf8f4f          DSB      
000086  f3bf8f6f          ISB      
                  |L18.138|
00008a  e7fe              B        |L18.138|
                  |L18.140|
;;;1126   				portYIELD_WITHIN_API();
00008c  4906              LDR      r1,|L18.168|
00008e  f04f5080          MOV      r0,#0x10000000
000092  6008              STR      r0,[r1,#0]
000094  f3bf8f4f          DSB      
000098  f3bf8f6f          ISB      
                  |L18.156|
;;;1127   			}
;;;1128   			else
;;;1129   			{
;;;1130   				mtCOVERAGE_TEST_MARKER();
;;;1131   			}
;;;1132   		}
;;;1133   	}
00009c  bd70              POP      {r4-r6,pc}
;;;1134   
                          ENDP

00009e  0000              DCW      0x0000
                  |L18.160|
                          DCD      ||.data||
                  |L18.164|
                          DCD      ||.bss||
                  |L18.168|
                          DCD      0xe000ed04

                          AREA ||i.vTaskEndScheduler||, CODE, READONLY, ALIGN=2

                  vTaskEndScheduler PROC
;;;1932   
;;;1933   void vTaskEndScheduler( void )
000000  2050              MOVS     r0,#0x50
000002  f3808811          MSR      BASEPRI,r0
000006  f3bf8f4f          DSB      
00000a  f3bf8f6f          ISB      
;;;1934   {
;;;1935   	/* Stop the scheduler interrupts and call the portable scheduler end
;;;1936   	routine so the original ISRs can be restored if necessary.  The port
;;;1937   	layer must ensure interrupts enable	bit is left in the correct state. */
;;;1938   	portDISABLE_INTERRUPTS();
;;;1939   	xSchedulerRunning = pdFALSE;
00000e  4902              LDR      r1,|L19.24|
000010  2000              MOVS     r0,#0
000012  6148              STR      r0,[r1,#0x14]  ; xSchedulerRunning
;;;1940   	vPortEndScheduler();
000014  f7ffbffe          B.W      vPortEndScheduler
;;;1941   }
;;;1942   /*----------------------------------------------------------*/
                          ENDP

                  |L19.24|
                          DCD      ||.data||

                          AREA ||i.vTaskMissedYield||, CODE, READONLY, ALIGN=2

                  vTaskMissedYield PROC
;;;3075   
;;;3076   void vTaskMissedYield( void )
000000  4901              LDR      r1,|L20.8|
;;;3077   {
;;;3078   	xYieldPending = pdTRUE;
000002  2001              MOVS     r0,#1
000004  61c8              STR      r0,[r1,#0x1c]  ; xYieldPending
;;;3079   }
000006  4770              BX       lr
;;;3080   /*-----------------------------------------------------------*/
                          ENDP

                  |L20.8|
                          DCD      ||.data||

                          AREA ||i.vTaskNotifyGiveFromISR||, CODE, READONLY, ALIGN=2

                  vTaskNotifyGiveFromISR PROC
;;;4572   
;;;4573   	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4574   	{
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
;;;4575   	TCB_t * pxTCB;
;;;4576   	uint8_t ucOriginalNotifyState;
;;;4577   	UBaseType_t uxSavedInterruptStatus;
;;;4578   
;;;4579   		configASSERT( xTaskToNotify );
000008  2c00              CMP      r4,#0
00000a  d015              BEQ      |L21.56|
;;;4580   
;;;4581   		/* RTOS ports that support interrupt nesting have the concept of a
;;;4582   		maximum	system call (or maximum API call) interrupt priority.
;;;4583   		Interrupts that are	above the maximum system call priority are keep
;;;4584   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;4585   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;4586   		is defined in FreeRTOSConfig.h then
;;;4587   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;4588   		failure if a FreeRTOS API function is called from an interrupt that has
;;;4589   		been assigned a priority above the configured maximum system call
;;;4590   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;4591   		from interrupts	that have been assigned a priority at or (logically)
;;;4592   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;4593   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;4594   		simple as possible.  More information (albeit Cortex-M specific) is
;;;4595   		provided on the following link:
;;;4596   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;4597   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
00000c  f7fffffe          BL       vPortValidateInterruptPriority
000010  2050              MOVS     r0,#0x50
000012  f3ef8711          MRS      r7,BASEPRI
000016  f3808811          MSR      BASEPRI,r0
00001a  f3bf8f4f          DSB      
00001e  f3bf8f6f          ISB      
;;;4598   
;;;4599   		pxTCB = ( TCB_t * ) xTaskToNotify;
;;;4600   
;;;4601   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
;;;4602   		{
;;;4603   			ucOriginalNotifyState = pxTCB->ucNotifyState;
000022  f8940050          LDRB     r0,[r4,#0x50]
;;;4604   			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
000026  2102              MOVS     r1,#2
000028  f8841050          STRB     r1,[r4,#0x50]
;;;4605   
;;;4606   			/* 'Giving' is equivalent to incrementing a count in a counting
;;;4607   			semaphore. */
;;;4608   			( pxTCB->ulNotifiedValue )++;
00002c  6ce1              LDR      r1,[r4,#0x4c]
00002e  1c49              ADDS     r1,r1,#1
000030  64e1              STR      r1,[r4,#0x4c]
;;;4609   
;;;4610   			traceTASK_NOTIFY_GIVE_FROM_ISR();
;;;4611   
;;;4612   			/* If the task is in the blocked state specifically to wait for a
;;;4613   			notification then unblock it now. */
;;;4614   			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
000032  2801              CMP      r0,#1
000034  d008              BEQ      |L21.72|
000036  e039              B        |L21.172|
                  |L21.56|
000038  2050              MOVS     r0,#0x50
00003a  f3808811          MSR      BASEPRI,r0
00003e  f3bf8f4f          DSB      
000042  f3bf8f6f          ISB      
                  |L21.70|
000046  e7fe              B        |L21.70|
                  |L21.72|
;;;4615   			{
;;;4616   				/* The task should not have been on an event list. */
;;;4617   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
000048  6aa0              LDR      r0,[r4,#0x28]
00004a  b138              CBZ      r0,|L21.92|
00004c  2050              MOVS     r0,#0x50
00004e  f3808811          MSR      BASEPRI,r0
000052  f3bf8f4f          DSB      
000056  f3bf8f6f          ISB      
                  |L21.90|
00005a  e7fe              B        |L21.90|
                  |L21.92|
;;;4618   
;;;4619   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
00005c  4d15              LDR      r5,|L21.180|
00005e  6b28              LDR      r0,[r5,#0x30]  ; uxSchedulerSuspended
000060  2601              MOVS     r6,#1                 ;4576
000062  b178              CBZ      r0,|L21.132|
;;;4620   				{
;;;4621   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
;;;4622   					prvAddTaskToReadyList( pxTCB );
;;;4623   				}
;;;4624   				else
;;;4625   				{
;;;4626   					/* The delayed and ready lists cannot be accessed, so hold
;;;4627   					this task pending until the scheduler is resumed. */
;;;4628   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
000064  f1040118          ADD      r1,r4,#0x18
000068  4813              LDR      r0,|L21.184|
00006a  f7fffffe          BL       vListInsertEnd
                  |L21.110|
;;;4629   				}
;;;4630   
;;;4631   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
00006e  6ae0              LDR      r0,[r4,#0x2c]
000070  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000072  6ac9              LDR      r1,[r1,#0x2c]
000074  4288              CMP      r0,r1
000076  d919              BLS      |L21.172|
;;;4632   				{
;;;4633   					/* The notified task has a priority above the currently
;;;4634   					executing task so a yield is required. */
;;;4635   					if( pxHigherPriorityTaskWoken != NULL )
000078  f1b80f00          CMP      r8,#0
00007c  d015              BEQ      |L21.170|
;;;4636   					{
;;;4637   						*pxHigherPriorityTaskWoken = pdTRUE;
00007e  f8c86000          STR      r6,[r8,#0]
000082  e013              B        |L21.172|
                  |L21.132|
000084  1d20              ADDS     r0,r4,#4              ;4621
000086  f7fffffe          BL       uxListRemove
00008a  6ae0              LDR      r0,[r4,#0x2c]         ;4622
00008c  692a              LDR      r2,[r5,#0x10]         ;4622  ; uxTopReadyPriority
00008e  fa06f100          LSL      r1,r6,r0              ;4622
000092  4311              ORRS     r1,r1,r2              ;4622
000094  6129              STR      r1,[r5,#0x10]         ;4622  ; uxTopReadyPriority
000096  4908              LDR      r1,|L21.184|
000098  eb000080          ADD      r0,r0,r0,LSL #2       ;4622
00009c  39b4              SUBS     r1,r1,#0xb4           ;4622
00009e  eb010080          ADD      r0,r1,r0,LSL #2       ;4622
0000a2  1d21              ADDS     r1,r4,#4              ;4622
0000a4  f7fffffe          BL       vListInsertEnd
0000a8  e7e1              B        |L21.110|
                  |L21.170|
;;;4638   					}
;;;4639   					else
;;;4640   					{
;;;4641   						/* Mark that a yield is pending in case the user is not
;;;4642   						using the "xHigherPriorityTaskWoken" parameter in an ISR
;;;4643   						safe FreeRTOS function. */
;;;4644   						xYieldPending = pdTRUE;
0000aa  61ee              STR      r6,[r5,#0x1c]  ; xYieldPending
                  |L21.172|
0000ac  f3878811          MSR      BASEPRI,r7
;;;4645   					}
;;;4646   				}
;;;4647   				else
;;;4648   				{
;;;4649   					mtCOVERAGE_TEST_MARKER();
;;;4650   				}
;;;4651   			}
;;;4652   		}
;;;4653   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;4654   	}
0000b0  e8bd81f0          POP      {r4-r8,pc}
;;;4655   
                          ENDP

                  |L21.180|
                          DCD      ||.data||
                  |L21.184|
                          DCD      ||.bss||+0xb4

                          AREA ||i.vTaskPlaceOnEventList||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnEventList PROC
;;;2819   
;;;2820   void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
000000  b510              PUSH     {r4,lr}
;;;2821   {
000002  460c              MOV      r4,r1
;;;2822   	configASSERT( pxEventList );
000004  2800              CMP      r0,#0
000006  d00a              BEQ      |L22.30|
;;;2823   
;;;2824   	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
;;;2825   	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
;;;2826   
;;;2827   	/* Place the event list item of the TCB in the appropriate event list.
;;;2828   	This is placed in the list in priority order so the highest priority task
;;;2829   	is the first to be woken by the event.  The queue that contains the event
;;;2830   	list is locked, preventing simultaneous access from interrupts. */
;;;2831   	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
000008  4909              LDR      r1,|L22.48|
00000a  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00000c  3118              ADDS     r1,r1,#0x18
00000e  f7fffffe          BL       vListInsert
;;;2832   
;;;2833   	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
000012  4620              MOV      r0,r4
000014  e8bd4010          POP      {r4,lr}
000018  2101              MOVS     r1,#1
00001a  f7ffbffe          B.W      prvAddCurrentTaskToDelayedList
                  |L22.30|
00001e  2050              MOVS     r0,#0x50
000020  f3808811          MSR      BASEPRI,r0
000024  f3bf8f4f          DSB      
000028  f3bf8f6f          ISB      
                  |L22.44|
00002c  e7fe              B        |L22.44|
;;;2834   }
;;;2835   /*-----------------------------------------------------------*/
                          ENDP

00002e  0000              DCW      0x0000
                  |L22.48|
                          DCD      ||.data||

                          AREA ||i.vTaskPlaceOnUnorderedEventList||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnUnorderedEventList PROC
;;;2836   
;;;2837   void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
000000  b510              PUSH     {r4,lr}
;;;2838   {
000002  4614              MOV      r4,r2
;;;2839   	configASSERT( pxEventList );
000004  2800              CMP      r0,#0
000006  d010              BEQ      |L23.42|
;;;2840   
;;;2841   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
;;;2842   	the event groups implementation. */
;;;2843   	configASSERT( uxSchedulerSuspended != 0 );
000008  4b10              LDR      r3,|L23.76|
00000a  6b1a              LDR      r2,[r3,#0x30]  ; uxSchedulerSuspended
00000c  b1aa              CBZ      r2,|L23.58|
;;;2844   
;;;2845   	/* Store the item value in the event list item.  It is safe to access the
;;;2846   	event list item here as interrupts won't access the event list item of a
;;;2847   	task that is not in the Blocked state. */
;;;2848   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
00000e  681a              LDR      r2,[r3,#0]  ; pxCurrentTCB
000010  f0414100          ORR      r1,r1,#0x80000000
000014  6191              STR      r1,[r2,#0x18]
;;;2849   
;;;2850   	/* Place the event list item of the TCB at the end of the appropriate event
;;;2851   	list.  It is safe to access the event list here because it is part of an
;;;2852   	event group implementation - and interrupts don't access event groups
;;;2853   	directly (instead they access them indirectly by pending function calls to
;;;2854   	the task level). */
;;;2855   	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
000016  6819              LDR      r1,[r3,#0]  ; pxCurrentTCB
000018  3118              ADDS     r1,r1,#0x18
00001a  f7fffffe          BL       vListInsertEnd
;;;2856   
;;;2857   	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
00001e  4620              MOV      r0,r4
000020  e8bd4010          POP      {r4,lr}
000024  2101              MOVS     r1,#1
000026  f7ffbffe          B.W      prvAddCurrentTaskToDelayedList
                  |L23.42|
00002a  2050              MOVS     r0,#0x50
00002c  f3808811          MSR      BASEPRI,r0
000030  f3bf8f4f          DSB      
000034  f3bf8f6f          ISB      
                  |L23.56|
000038  e7fe              B        |L23.56|
                  |L23.58|
00003a  2050              MOVS     r0,#0x50              ;2839
00003c  f3808811          MSR      BASEPRI,r0            ;2839
000040  f3bf8f4f          DSB                            ;2839
000044  f3bf8f6f          ISB                            ;2839
                  |L23.72|
000048  e7fe              B        |L23.72|
;;;2858   }
;;;2859   /*-----------------------------------------------------------*/
                          ENDP

00004a  0000              DCW      0x0000
                  |L23.76|
                          DCD      ||.data||

                          AREA ||i.vTaskPriorityInherit||, CODE, READONLY, ALIGN=2

                  vTaskPriorityInherit PROC
;;;3705   
;;;3706   	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
000000  b570              PUSH     {r4-r6,lr}
;;;3707   	{
;;;3708   	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
000002  4604              MOV      r4,r0
;;;3709   
;;;3710   		/* If the mutex was given back by an interrupt while the queue was
;;;3711   		locked then the mutex holder might now be NULL. */
;;;3712   		if( pxMutexHolder != NULL )
000004  2800              CMP      r0,#0
000006  d039              BEQ      |L24.124|
;;;3713   		{
;;;3714   			/* If the holder of the mutex has a priority below the priority of
;;;3715   			the task attempting to obtain the mutex then it will temporarily
;;;3716   			inherit the priority of the task attempting to obtain the mutex. */
;;;3717   			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
000008  4d1d              LDR      r5,|L24.128|
00000a  6ae0              LDR      r0,[r4,#0x2c]
00000c  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
00000e  6ac9              LDR      r1,[r1,#0x2c]
000010  4288              CMP      r0,r1
000012  d233              BCS      |L24.124|
;;;3718   			{
;;;3719   				/* Adjust the mutex holder state to account for its new
;;;3720   				priority.  Only reset the event list item value if the value is
;;;3721   				not	being used for anything else. */
;;;3722   				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
000014  69a0              LDR      r0,[r4,#0x18]
000016  2800              CMP      r0,#0
000018  db04              BLT      |L24.36|
;;;3723   				{
;;;3724   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
00001a  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
00001c  6ac0              LDR      r0,[r0,#0x2c]
00001e  f1c00007          RSB      r0,r0,#7
000022  61a0              STR      r0,[r4,#0x18]
                  |L24.36|
;;;3725   				}
;;;3726   				else
;;;3727   				{
;;;3728   					mtCOVERAGE_TEST_MARKER();
;;;3729   				}
;;;3730   
;;;3731   				/* If the task being modified is in the ready state it will need
;;;3732   				to be moved into a new list. */
;;;3733   				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
000024  6ae0              LDR      r0,[r4,#0x2c]
000026  4e17              LDR      r6,|L24.132|
000028  eb000080          ADD      r0,r0,r0,LSL #2
00002c  6961              LDR      r1,[r4,#0x14]
00002e  eb060080          ADD      r0,r6,r0,LSL #2
000032  4281              CMP      r1,r0
000034  d11f              BNE      |L24.118|
;;;3734   				{
;;;3735   					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
000036  1d20              ADDS     r0,r4,#4
000038  f7fffffe          BL       uxListRemove
;;;3736   					{
;;;3737   						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
00003c  2101              MOVS     r1,#1
00003e  b950              CBNZ     r0,|L24.86|
000040  6ae0              LDR      r0,[r4,#0x2c]
000042  eb000280          ADD      r2,r0,r0,LSL #2
000046  f8562022          LDR      r2,[r6,r2,LSL #2]
00004a  b922              CBNZ     r2,|L24.86|
00004c  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
00004e  fa01f000          LSL      r0,r1,r0
000052  4382              BICS     r2,r2,r0
000054  612a              STR      r2,[r5,#0x10]  ; uxTopReadyPriority
                  |L24.86|
;;;3738   					}
;;;3739   					else
;;;3740   					{
;;;3741   						mtCOVERAGE_TEST_MARKER();
;;;3742   					}
;;;3743   
;;;3744   					/* Inherit the priority before being moved into the new list. */
;;;3745   					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
000056  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000058  6ac0              LDR      r0,[r0,#0x2c]
00005a  62e0              STR      r0,[r4,#0x2c]
;;;3746   					prvAddTaskToReadyList( pxTCB );
00005c  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
00005e  4081              LSLS     r1,r1,r0
000060  4311              ORRS     r1,r1,r2
000062  6129              STR      r1,[r5,#0x10]  ; uxTopReadyPriority
000064  eb000080          ADD      r0,r0,r0,LSL #2
000068  eb060080          ADD      r0,r6,r0,LSL #2
00006c  1d21              ADDS     r1,r4,#4
00006e  e8bd4070          POP      {r4-r6,lr}
000072  f7ffbffe          B.W      vListInsertEnd
                  |L24.118|
;;;3747   				}
;;;3748   				else
;;;3749   				{
;;;3750   					/* Just inherit the priority. */
;;;3751   					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
000076  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000078  6ac0              LDR      r0,[r0,#0x2c]
00007a  62e0              STR      r0,[r4,#0x2c]
                  |L24.124|
;;;3752   				}
;;;3753   
;;;3754   				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
;;;3755   			}
;;;3756   			else
;;;3757   			{
;;;3758   				mtCOVERAGE_TEST_MARKER();
;;;3759   			}
;;;3760   		}
;;;3761   		else
;;;3762   		{
;;;3763   			mtCOVERAGE_TEST_MARKER();
;;;3764   		}
;;;3765   	}
00007c  bd70              POP      {r4-r6,pc}
;;;3766   
                          ENDP

00007e  0000              DCW      0x0000
                  |L24.128|
                          DCD      ||.data||
                  |L24.132|
                          DCD      ||.bss||

                          AREA ||i.vTaskPrioritySet||, CODE, READONLY, ALIGN=2

                  vTaskPrioritySet PROC
;;;1401   
;;;1402   	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1403   	{
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;1404   	TCB_t *pxTCB;
;;;1405   	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
;;;1406   	BaseType_t xYieldRequired = pdFALSE;
000008  2600              MOVS     r6,#0
;;;1407   
;;;1408   		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
00000a  2d07              CMP      r5,#7
00000c  d307              BCC      |L25.30|
00000e  2050              MOVS     r0,#0x50              ;1403
000010  f3808811          MSR      BASEPRI,r0            ;1403
000014  f3bf8f4f          DSB                            ;1403
000018  f3bf8f6f          ISB                            ;1403
                  |L25.28|
00001c  e7fe              B        |L25.28|
                  |L25.30|
;;;1409   
;;;1410   		/* Ensure the new priority is valid. */
;;;1411   		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
;;;1412   		{
;;;1413   			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
;;;1414   		}
;;;1415   		else
;;;1416   		{
;;;1417   			mtCOVERAGE_TEST_MARKER();
;;;1418   		}
;;;1419   
;;;1420   		taskENTER_CRITICAL();
00001e  f7fffffe          BL       vPortEnterCritical
;;;1421   		{
;;;1422   			/* If null is passed in here then it is the priority of the calling
;;;1423   			task that is being changed. */
;;;1424   			pxTCB = prvGetTCBFromHandle( xTask );
000022  4f26              LDR      r7,|L25.188|
000024  b904              CBNZ     r4,|L25.40|
000026  683c              LDR      r4,[r7,#0]  ; pxCurrentTCB
                  |L25.40|
;;;1425   
;;;1426   			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
;;;1427   
;;;1428   			#if ( configUSE_MUTEXES == 1 )
;;;1429   			{
;;;1430   				uxCurrentBasePriority = pxTCB->uxBasePriority;
000028  6c60              LDR      r0,[r4,#0x44]
;;;1431   			}
;;;1432   			#else
;;;1433   			{
;;;1434   				uxCurrentBasePriority = pxTCB->uxPriority;
;;;1435   			}
;;;1436   			#endif
;;;1437   
;;;1438   			if( uxCurrentBasePriority != uxNewPriority )
00002a  42a8              CMP      r0,r5
00002c  d041              BEQ      |L25.178|
;;;1439   			{
;;;1440   				/* The priority change may have readied a task of higher
;;;1441   				priority than the calling task. */
;;;1442   				if( uxNewPriority > uxCurrentBasePriority )
00002e  4285              CMP      r5,r0
000030  d908              BLS      |L25.68|
;;;1443   				{
;;;1444   					if( pxTCB != pxCurrentTCB )
000032  6839              LDR      r1,[r7,#0]  ; pxCurrentTCB
000034  428c              CMP      r4,r1
000036  d009              BEQ      |L25.76|
;;;1445   					{
;;;1446   						/* The priority of a task other than the currently
;;;1447   						running task is being raised.  Is the priority being
;;;1448   						raised above that of the running task? */
;;;1449   						if( uxNewPriority >= pxCurrentTCB->uxPriority )
000038  6839              LDR      r1,[r7,#0]  ; pxCurrentTCB
00003a  6ac9              LDR      r1,[r1,#0x2c]
00003c  42a9              CMP      r1,r5
00003e  d805              BHI      |L25.76|
;;;1450   						{
;;;1451   							xYieldRequired = pdTRUE;
000040  2601              MOVS     r6,#1
000042  e003              B        |L25.76|
                  |L25.68|
;;;1452   						}
;;;1453   						else
;;;1454   						{
;;;1455   							mtCOVERAGE_TEST_MARKER();
;;;1456   						}
;;;1457   					}
;;;1458   					else
;;;1459   					{
;;;1460   						/* The priority of the running task is being raised,
;;;1461   						but the running task must already be the highest
;;;1462   						priority task able to run so no yield is required. */
;;;1463   					}
;;;1464   				}
;;;1465   				else if( pxTCB == pxCurrentTCB )
000044  6839              LDR      r1,[r7,#0]  ; pxCurrentTCB
000046  428c              CMP      r4,r1
000048  d100              BNE      |L25.76|
;;;1466   				{
;;;1467   					/* Setting the priority of the running task down means
;;;1468   					there may now be another task of higher priority that
;;;1469   					is ready to execute. */
;;;1470   					xYieldRequired = pdTRUE;
00004a  2601              MOVS     r6,#1
                  |L25.76|
;;;1471   				}
;;;1472   				else
;;;1473   				{
;;;1474   					/* Setting the priority of any other task down does not
;;;1475   					require a yield as the running task must be above the
;;;1476   					new priority of the task being modified. */
;;;1477   				}
;;;1478   
;;;1479   				/* Remember the ready list the task might be referenced from
;;;1480   				before its uxPriority member is changed so the
;;;1481   				taskRESET_READY_PRIORITY() macro can function correctly. */
;;;1482   				uxPriorityUsedOnEntry = pxTCB->uxPriority;
00004c  f8d4802c          LDR      r8,[r4,#0x2c]
;;;1483   
;;;1484   				#if ( configUSE_MUTEXES == 1 )
;;;1485   				{
;;;1486   					/* Only change the priority being used if the task is not
;;;1487   					currently using an inherited priority. */
;;;1488   					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
000050  4540              CMP      r0,r8
000052  d100              BNE      |L25.86|
;;;1489   					{
;;;1490   						pxTCB->uxPriority = uxNewPriority;
000054  62e5              STR      r5,[r4,#0x2c]
                  |L25.86|
;;;1491   					}
;;;1492   					else
;;;1493   					{
;;;1494   						mtCOVERAGE_TEST_MARKER();
;;;1495   					}
;;;1496   
;;;1497   					/* The base priority gets set whatever. */
;;;1498   					pxTCB->uxBasePriority = uxNewPriority;
000056  6465              STR      r5,[r4,#0x44]
;;;1499   				}
;;;1500   				#else
;;;1501   				{
;;;1502   					pxTCB->uxPriority = uxNewPriority;
;;;1503   				}
;;;1504   				#endif
;;;1505   
;;;1506   				/* Only reset the event list item value if the value is not
;;;1507   				being used for anything else. */
;;;1508   				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
000058  69a0              LDR      r0,[r4,#0x18]
00005a  2800              CMP      r0,#0
00005c  db02              BLT      |L25.100|
;;;1509   				{
;;;1510   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
00005e  f1c50007          RSB      r0,r5,#7
000062  61a0              STR      r0,[r4,#0x18]
                  |L25.100|
;;;1511   				}
;;;1512   				else
;;;1513   				{
;;;1514   					mtCOVERAGE_TEST_MARKER();
;;;1515   				}
;;;1516   
;;;1517   				/* If the task is in the blocked or suspended list we need do
;;;1518   				nothing more than change it's priority variable. However, if
;;;1519   				the task is in a ready list it needs to be removed and placed
;;;1520   				in the list appropriate to its new priority. */
;;;1521   				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
000064  4d16              LDR      r5,|L25.192|
000066  eb080188          ADD      r1,r8,r8,LSL #2
00006a  6960              LDR      r0,[r4,#0x14]
00006c  eb050181          ADD      r1,r5,r1,LSL #2
000070  4288              CMP      r0,r1
000072  d115              BNE      |L25.160|
;;;1522   				{
;;;1523   					/* The task is currently in its ready list - remove before adding
;;;1524   					it to it's new ready list.  As we are in a critical section we
;;;1525   					can do this even if the scheduler is suspended. */
;;;1526   					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
000074  1d20              ADDS     r0,r4,#4
000076  f7fffffe          BL       uxListRemove
00007a  2101              MOVS     r1,#1                 ;1451
00007c  b920              CBNZ     r0,|L25.136|
;;;1527   					{
;;;1528   						/* It is known that the task is in its ready list so
;;;1529   						there is no need to check again and the port level
;;;1530   						reset macro can be called directly. */
;;;1531   						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
00007e  693a              LDR      r2,[r7,#0x10]  ; uxTopReadyPriority
000080  fa01f008          LSL      r0,r1,r8
000084  4382              BICS     r2,r2,r0
000086  613a              STR      r2,[r7,#0x10]  ; uxTopReadyPriority
                  |L25.136|
;;;1532   					}
;;;1533   					else
;;;1534   					{
;;;1535   						mtCOVERAGE_TEST_MARKER();
;;;1536   					}
;;;1537   					prvAddTaskToReadyList( pxTCB );
000088  6ae0              LDR      r0,[r4,#0x2c]
00008a  693a              LDR      r2,[r7,#0x10]  ; uxTopReadyPriority
00008c  4081              LSLS     r1,r1,r0
00008e  4311              ORRS     r1,r1,r2
000090  6139              STR      r1,[r7,#0x10]  ; uxTopReadyPriority
000092  eb000080          ADD      r0,r0,r0,LSL #2
000096  eb050080          ADD      r0,r5,r0,LSL #2
00009a  1d21              ADDS     r1,r4,#4
00009c  f7fffffe          BL       vListInsertEnd
                  |L25.160|
;;;1538   				}
;;;1539   				else
;;;1540   				{
;;;1541   					mtCOVERAGE_TEST_MARKER();
;;;1542   				}
;;;1543   
;;;1544   				if( xYieldRequired != pdFALSE )
0000a0  b13e              CBZ      r6,|L25.178|
;;;1545   				{
;;;1546   					taskYIELD_IF_USING_PREEMPTION();
0000a2  4908              LDR      r1,|L25.196|
0000a4  f04f5080          MOV      r0,#0x10000000
0000a8  6008              STR      r0,[r1,#0]
0000aa  f3bf8f4f          DSB      
0000ae  f3bf8f6f          ISB      
                  |L25.178|
;;;1547   				}
;;;1548   				else
;;;1549   				{
;;;1550   					mtCOVERAGE_TEST_MARKER();
;;;1551   				}
;;;1552   
;;;1553   				/* Remove compiler warning about unused variables when the port
;;;1554   				optimised task selection is not being used. */
;;;1555   				( void ) uxPriorityUsedOnEntry;
;;;1556   			}
;;;1557   		}
;;;1558   		taskEXIT_CRITICAL();
0000b2  e8bd41f0          POP      {r4-r8,lr}
0000b6  f7ffbffe          B.W      vPortExitCritical
;;;1559   	}
;;;1560   
                          ENDP

0000ba  0000              DCW      0x0000
                  |L25.188|
                          DCD      ||.data||
                  |L25.192|
                          DCD      ||.bss||
                  |L25.196|
                          DCD      0xe000ed04

                          AREA ||i.vTaskResume||, CODE, READONLY, ALIGN=2

                  vTaskResume PROC
;;;1701   
;;;1702   	void vTaskResume( TaskHandle_t xTaskToResume )
000000  b570              PUSH     {r4-r6,lr}
;;;1703   	{
;;;1704   	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
000002  4604              MOV      r4,r0
;;;1705   
;;;1706   		/* It does not make sense to resume the calling task. */
;;;1707   		configASSERT( xTaskToResume );
000004  2800              CMP      r0,#0
000006  d02b              BEQ      |L26.96|
;;;1708   
;;;1709   		/* The parameter cannot be NULL as it is impossible to resume the
;;;1710   		currently executing task. */
;;;1711   		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
000008  4d1a              LDR      r5,|L26.116|
00000a  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
00000c  4284              CMP      r4,r0
00000e  d02f              BEQ      |L26.112|
;;;1712   		{
;;;1713   			taskENTER_CRITICAL();
000010  f7fffffe          BL       vPortEnterCritical
;;;1714   			{
;;;1715   				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       prvTaskIsTaskSuspended
00001a  b1e8              CBZ      r0,|L26.88|
;;;1716   				{
;;;1717   					traceTASK_RESUME( pxTCB );
;;;1718   
;;;1719   					/* As we are in a critical section we can access the ready
;;;1720   					lists even if the scheduler is suspended. */
;;;1721   					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
00001c  1d20              ADDS     r0,r4,#4
00001e  f7fffffe          BL       uxListRemove
;;;1722   					prvAddTaskToReadyList( pxTCB );
000022  6ae0              LDR      r0,[r4,#0x2c]
000024  2101              MOVS     r1,#1
000026  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
000028  4081              LSLS     r1,r1,r0
00002a  4311              ORRS     r1,r1,r2
00002c  6129              STR      r1,[r5,#0x10]  ; uxTopReadyPriority
00002e  4912              LDR      r1,|L26.120|
000030  eb000080          ADD      r0,r0,r0,LSL #2
000034  eb010080          ADD      r0,r1,r0,LSL #2
000038  1d21              ADDS     r1,r4,#4
00003a  f7fffffe          BL       vListInsertEnd
;;;1723   
;;;1724   					/* We may have just resumed a higher priority task. */
;;;1725   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
00003e  6ae0              LDR      r0,[r4,#0x2c]
000040  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000042  6ac9              LDR      r1,[r1,#0x2c]
000044  4288              CMP      r0,r1
000046  d307              BCC      |L26.88|
;;;1726   					{
;;;1727   						/* This yield may not cause the task just resumed to run,
;;;1728   						but will leave the lists in the correct state for the
;;;1729   						next yield. */
;;;1730   						taskYIELD_IF_USING_PREEMPTION();
000048  490c              LDR      r1,|L26.124|
00004a  f04f5080          MOV      r0,#0x10000000
00004e  6008              STR      r0,[r1,#0]
000050  f3bf8f4f          DSB      
000054  f3bf8f6f          ISB      
                  |L26.88|
;;;1731   					}
;;;1732   					else
;;;1733   					{
;;;1734   						mtCOVERAGE_TEST_MARKER();
;;;1735   					}
;;;1736   				}
;;;1737   				else
;;;1738   				{
;;;1739   					mtCOVERAGE_TEST_MARKER();
;;;1740   				}
;;;1741   			}
;;;1742   			taskEXIT_CRITICAL();
000058  e8bd4070          POP      {r4-r6,lr}
00005c  f7ffbffe          B.W      vPortExitCritical
                  |L26.96|
000060  2050              MOVS     r0,#0x50
000062  f3808811          MSR      BASEPRI,r0
000066  f3bf8f4f          DSB      
00006a  f3bf8f6f          ISB      
                  |L26.110|
00006e  e7fe              B        |L26.110|
                  |L26.112|
;;;1743   		}
;;;1744   		else
;;;1745   		{
;;;1746   			mtCOVERAGE_TEST_MARKER();
;;;1747   		}
;;;1748   	}
000070  bd70              POP      {r4-r6,pc}
;;;1749   
                          ENDP

000072  0000              DCW      0x0000
                  |L26.116|
                          DCD      ||.data||
                  |L26.120|
                          DCD      ||.bss||
                  |L26.124|
                          DCD      0xe000ed04

                          AREA ||i.vTaskSetTimeOutState||, CODE, READONLY, ALIGN=2

                  vTaskSetTimeOutState PROC
;;;3006   
;;;3007   void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
000000  2800              CMP      r0,#0
;;;3008   {
000002  d005              BEQ      |L27.16|
;;;3009   	configASSERT( pxTimeOut );
;;;3010   	pxTimeOut->xOverflowCount = xNumOfOverflows;
000004  4906              LDR      r1,|L27.32|
000006  6a0a              LDR      r2,[r1,#0x20]  ; xNumOfOverflows
000008  6002              STR      r2,[r0,#0]
;;;3011   	pxTimeOut->xTimeOnEntering = xTickCount;
00000a  68c9              LDR      r1,[r1,#0xc]  ; xTickCount
00000c  6041              STR      r1,[r0,#4]
;;;3012   }
00000e  4770              BX       lr
                  |L27.16|
000010  2050              MOVS     r0,#0x50
000012  f3808811          MSR      BASEPRI,r0
000016  f3bf8f4f          DSB      
00001a  f3bf8f6f          ISB      
                  |L27.30|
00001e  e7fe              B        |L27.30|
;;;3013   /*-----------------------------------------------------------*/
                          ENDP

                  |L27.32|
                          DCD      ||.data||

                          AREA ||i.vTaskStartScheduler||, CODE, READONLY, ALIGN=2

                  vTaskStartScheduler PROC
;;;1825   
;;;1826   void vTaskStartScheduler( void )
000000  b51c              PUSH     {r2-r4,lr}
;;;1827   {
;;;1828   BaseType_t xReturn;
;;;1829   
;;;1830   	/* Add the idle task at the lowest priority. */
;;;1831   	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;1832   	{
;;;1833   		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
;;;1834   		StackType_t *pxIdleTaskStackBuffer = NULL;
;;;1835   		uint32_t ulIdleTaskStackSize;
;;;1836   
;;;1837   		/* The Idle task is created using user provided RAM - obtain the
;;;1838   		address of the RAM then create the idle task. */
;;;1839   		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
;;;1840   		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
;;;1841   												"IDLE",
;;;1842   												ulIdleTaskStackSize,
;;;1843   												( void * ) NULL,
;;;1844   												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
;;;1845   												pxIdleTaskStackBuffer,
;;;1846   												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
;;;1847   
;;;1848   		if( xIdleTaskHandle != NULL )
;;;1849   		{
;;;1850   			xReturn = pdPASS;
;;;1851   		}
;;;1852   		else
;;;1853   		{
;;;1854   			xReturn = pdFAIL;
;;;1855   		}
;;;1856   	}
;;;1857   	#else
;;;1858   	{
;;;1859   		/* The Idle task is being created using dynamically allocated RAM. */
;;;1860   		xReturn = xTaskCreate(	prvIdleTask,
000002  4815              LDR      r0,|L28.88|
000004  2400              MOVS     r4,#0
000006  e9cd4000          STRD     r4,r0,[sp,#0]
00000a  4623              MOV      r3,r4
00000c  f44f7280          MOV      r2,#0x100
000010  a112              ADR      r1,|L28.92|
000012  4814              LDR      r0,|L28.100|
000014  f7fffffe          BL       xTaskCreate
;;;1861   								"IDLE", configMINIMAL_STACK_SIZE,
;;;1862   								( void * ) NULL,
;;;1863   								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
;;;1864   								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
;;;1865   	}
;;;1866   	#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;1867   
;;;1868   	#if ( configUSE_TIMERS == 1 )
;;;1869   	{
;;;1870   		if( xReturn == pdPASS )
;;;1871   		{
;;;1872   			xReturn = xTimerCreateTimerTask();
;;;1873   		}
;;;1874   		else
;;;1875   		{
;;;1876   			mtCOVERAGE_TEST_MARKER();
;;;1877   		}
;;;1878   	}
;;;1879   	#endif /* configUSE_TIMERS */
;;;1880   
;;;1881   	if( xReturn == pdPASS )
000018  2801              CMP      r0,#1
00001a  d009              BEQ      |L28.48|
;;;1882   	{
;;;1883   		/* Interrupts are turned off here, to ensure a tick does not occur
;;;1884   		before or during the call to xPortStartScheduler().  The stacks of
;;;1885   		the created tasks contain a status word with interrupts switched on
;;;1886   		so interrupts will automatically get re-enabled when the first task
;;;1887   		starts to run. */
;;;1888   		portDISABLE_INTERRUPTS();
;;;1889   
;;;1890   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;1891   		{
;;;1892   			/* Switch Newlib's _impure_ptr variable to point to the _reent
;;;1893   			structure specific to the task that will run first. */
;;;1894   			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
;;;1895   		}
;;;1896   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;1897   
;;;1898   		xNextTaskUnblockTime = portMAX_DELAY;
;;;1899   		xSchedulerRunning = pdTRUE;
;;;1900   		xTickCount = ( TickType_t ) 0U;
;;;1901   
;;;1902   		/* If configGENERATE_RUN_TIME_STATS is defined then the following
;;;1903   		macro must be defined to configure the timer/counter used to generate
;;;1904   		the run time counter time base. */
;;;1905   		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
;;;1906   
;;;1907   		/* Setting up the timer tick is hardware specific and thus in the
;;;1908   		portable interface. */
;;;1909   		if( xPortStartScheduler() != pdFALSE )
;;;1910   		{
;;;1911   			/* Should not reach here as if the scheduler is running the
;;;1912   			function will not return. */
;;;1913   		}
;;;1914   		else
;;;1915   		{
;;;1916   			/* Should only reach here if a task calls xTaskEndScheduler(). */
;;;1917   		}
;;;1918   	}
;;;1919   	else
;;;1920   	{
;;;1921   		/* This line will only be reached if the kernel could not be started,
;;;1922   		because there was not enough FreeRTOS heap to create the idle task
;;;1923   		or the timer task. */
;;;1924   		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
00001c  1c40              ADDS     r0,r0,#1
00001e  d11a              BNE      |L28.86|
000020  2050              MOVS     r0,#0x50
000022  f3808811          MSR      BASEPRI,r0
000026  f3bf8f4f          DSB      
00002a  f3bf8f6f          ISB      
                  |L28.46|
00002e  e7fe              B        |L28.46|
                  |L28.48|
000030  2050              MOVS     r0,#0x50
000032  f3808811          MSR      BASEPRI,r0
000036  f3bf8f4f          DSB      
00003a  f3bf8f6f          ISB      
00003e  4806              LDR      r0,|L28.88|
000040  f04f31ff          MOV      r1,#0xffffffff        ;1898
000044  382c              SUBS     r0,r0,#0x2c           ;1898
000046  6281              STR      r1,[r0,#0x28]         ;1898  ; xNextTaskUnblockTime
000048  2101              MOVS     r1,#1                 ;1899
00004a  6141              STR      r1,[r0,#0x14]         ;1899  ; xSchedulerRunning
00004c  60c4              STR      r4,[r0,#0xc]          ;1900  ; xTickCount
00004e  e8bd401c          POP      {r2-r4,lr}            ;1909
000052  f7ffbffe          B.W      xPortStartScheduler
                  |L28.86|
;;;1925   	}
;;;1926   
;;;1927   	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
;;;1928   	meaning xIdleTaskHandle is not used anywhere else. */
;;;1929   	( void ) xIdleTaskHandle;
;;;1930   }
000056  bd1c              POP      {r2-r4,pc}
;;;1931   /*-----------------------------------------------------------*/
                          ENDP

                  |L28.88|
                          DCD      ||.data||+0x2c
                  |L28.92|
00005c  49444c45          DCB      "IDLE",0
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0
                  |L28.100|
                          DCD      prvIdleTask

                          AREA ||i.vTaskSuspend||, CODE, READONLY, ALIGN=2

                  vTaskSuspend PROC
;;;1565   
;;;1566   	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
000000  b570              PUSH     {r4-r6,lr}
;;;1567   	{
000002  4604              MOV      r4,r0
;;;1568   	TCB_t *pxTCB;
;;;1569   
;;;1570   		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1571   		{
;;;1572   			/* If null is passed in here then it is the running task that is
;;;1573   			being suspended. */
;;;1574   			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
000008  4d26              LDR      r5,|L29.164|
00000a  b904              CBNZ     r4,|L29.14|
00000c  682c              LDR      r4,[r5,#0]  ; pxCurrentTCB
                  |L29.14|
;;;1575   
;;;1576   			traceTASK_SUSPEND( pxTCB );
;;;1577   
;;;1578   			/* Remove task from the ready/delayed list and place in the
;;;1579   			suspended list. */
;;;1580   			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
00000e  1d20              ADDS     r0,r4,#4
000010  f7fffffe          BL       uxListRemove
000014  b958              CBNZ     r0,|L29.46|
;;;1581   			{
;;;1582   				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
000016  6ae0              LDR      r0,[r4,#0x2c]
000018  4a23              LDR      r2,|L29.168|
00001a  eb000180          ADD      r1,r0,r0,LSL #2
00001e  f8521021          LDR      r1,[r2,r1,LSL #2]
000022  b921              CBNZ     r1,|L29.46|
000024  2101              MOVS     r1,#1
000026  4081              LSLS     r1,r1,r0
000028  6928              LDR      r0,[r5,#0x10]  ; uxTopReadyPriority
00002a  4388              BICS     r0,r0,r1
00002c  6128              STR      r0,[r5,#0x10]  ; uxTopReadyPriority
                  |L29.46|
;;;1583   			}
;;;1584   			else
;;;1585   			{
;;;1586   				mtCOVERAGE_TEST_MARKER();
;;;1587   			}
;;;1588   
;;;1589   			/* Is the task waiting on an event also? */
;;;1590   			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
00002e  6aa0              LDR      r0,[r4,#0x28]
000030  b118              CBZ      r0,|L29.58|
;;;1591   			{
;;;1592   				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000032  f1040018          ADD      r0,r4,#0x18
000036  f7fffffe          BL       uxListRemove
                  |L29.58|
;;;1593   			}
;;;1594   			else
;;;1595   			{
;;;1596   				mtCOVERAGE_TEST_MARKER();
;;;1597   			}
;;;1598   
;;;1599   			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
00003a  481b              LDR      r0,|L29.168|
00003c  1d21              ADDS     r1,r4,#4
00003e  30dc              ADDS     r0,r0,#0xdc
000040  f7fffffe          BL       vListInsertEnd
;;;1600   		}
;;;1601   		taskEXIT_CRITICAL();
000044  f7fffffe          BL       vPortExitCritical
;;;1602   
;;;1603   		if( xSchedulerRunning != pdFALSE )
000048  6968              LDR      r0,[r5,#0x14]  ; xSchedulerRunning
00004a  b128              CBZ      r0,|L29.88|
;;;1604   		{
;;;1605   			/* Reset the next expected unblock time in case it referred to the
;;;1606   			task that is now in the Suspended state. */
;;;1607   			taskENTER_CRITICAL();
00004c  f7fffffe          BL       vPortEnterCritical
;;;1608   			{
;;;1609   				prvResetNextTaskUnblockTime();
000050  f7fffffe          BL       prvResetNextTaskUnblockTime
;;;1610   			}
;;;1611   			taskEXIT_CRITICAL();
000054  f7fffffe          BL       vPortExitCritical
                  |L29.88|
;;;1612   		}
;;;1613   		else
;;;1614   		{
;;;1615   			mtCOVERAGE_TEST_MARKER();
;;;1616   		}
;;;1617   
;;;1618   		if( pxTCB == pxCurrentTCB )
000058  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
00005a  4284              CMP      r4,r0
00005c  d113              BNE      |L29.134|
;;;1619   		{
;;;1620   			if( xSchedulerRunning != pdFALSE )
00005e  6968              LDR      r0,[r5,#0x14]  ; xSchedulerRunning
000060  b190              CBZ      r0,|L29.136|
;;;1621   			{
;;;1622   				/* The current task has just been suspended. */
;;;1623   				configASSERT( uxSchedulerSuspended == 0 );
000062  6b28              LDR      r0,[r5,#0x30]  ; uxSchedulerSuspended
000064  b138              CBZ      r0,|L29.118|
000066  2050              MOVS     r0,#0x50
000068  f3808811          MSR      BASEPRI,r0
00006c  f3bf8f4f          DSB      
000070  f3bf8f6f          ISB      
                  |L29.116|
000074  e7fe              B        |L29.116|
                  |L29.118|
;;;1624   				portYIELD_WITHIN_API();
000076  490d              LDR      r1,|L29.172|
000078  f04f5080          MOV      r0,#0x10000000
00007c  6008              STR      r0,[r1,#0]
00007e  f3bf8f4f          DSB      
000082  f3bf8f6f          ISB      
                  |L29.134|
;;;1625   			}
;;;1626   			else
;;;1627   			{
;;;1628   				/* The scheduler is not running, but the task that was pointed
;;;1629   				to by pxCurrentTCB has just been suspended and pxCurrentTCB
;;;1630   				must be adjusted to point to a different task. */
;;;1631   				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
;;;1632   				{
;;;1633   					/* No other tasks are ready, so set pxCurrentTCB back to
;;;1634   					NULL so when the next task is created pxCurrentTCB will
;;;1635   					be set to point to it no matter what its relative priority
;;;1636   					is. */
;;;1637   					pxCurrentTCB = NULL;
;;;1638   				}
;;;1639   				else
;;;1640   				{
;;;1641   					vTaskSwitchContext();
;;;1642   				}
;;;1643   			}
;;;1644   		}
;;;1645   		else
;;;1646   		{
;;;1647   			mtCOVERAGE_TEST_MARKER();
;;;1648   		}
;;;1649   	}
000086  bd70              POP      {r4-r6,pc}
                  |L29.136|
000088  4807              LDR      r0,|L29.168|
00008a  68a9              LDR      r1,[r5,#8]            ;1631  ; uxCurrentNumberOfTasks
00008c  30dc              ADDS     r0,r0,#0xdc           ;1631
00008e  6800              LDR      r0,[r0,#0]            ;1631  ; xSuspendedTaskList
000090  4288              CMP      r0,r1                 ;1631
000092  d102              BNE      |L29.154|
000094  2000              MOVS     r0,#0                 ;1637
000096  6028              STR      r0,[r5,#0]            ;1637  ; pxCurrentTCB
000098  bd70              POP      {r4-r6,pc}
                  |L29.154|
00009a  e8bd4070          POP      {r4-r6,lr}            ;1641
00009e  f7ffbffe          B.W      vTaskSwitchContext
;;;1650   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L29.164|
                          DCD      ||.data||
                  |L29.168|
                          DCD      ||.bss||
                  |L29.172|
                          DCD      0xe000ed04

                          AREA ||i.vTaskSuspendAll||, CODE, READONLY, ALIGN=2

                  vTaskSuspendAll PROC
;;;1943   
;;;1944   void vTaskSuspendAll( void )
000000  4802              LDR      r0,|L30.12|
;;;1945   {
;;;1946   	/* A critical section is not required as the variable is of type
;;;1947   	BaseType_t.  Please read Richard Barry's reply in the following link to a
;;;1948   	post in the FreeRTOS support forum before reporting this as a bug! -
;;;1949   	http://goo.gl/wu4acr */
;;;1950   	++uxSchedulerSuspended;
000002  6b01              LDR      r1,[r0,#0x30]  ; uxSchedulerSuspended
000004  1c49              ADDS     r1,r1,#1
000006  6301              STR      r1,[r0,#0x30]  ; uxSchedulerSuspended
;;;1951   }
000008  4770              BX       lr
;;;1952   /*----------------------------------------------------------*/
                          ENDP

00000a  0000              DCW      0x0000
                  |L30.12|
                          DCD      ||.data||

                          AREA ||i.vTaskSwitchContext||, CODE, READONLY, ALIGN=2

                  vTaskSwitchContext PROC
;;;2760   
;;;2761   void vTaskSwitchContext( void )
000000  4a15              LDR      r2,|L31.88|
;;;2762   {
;;;2763   	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
000002  6b10              LDR      r0,[r2,#0x30]  ; uxSchedulerSuspended
000004  2800              CMP      r0,#0
000006  d002              BEQ      |L31.14|
;;;2764   	{
;;;2765   		/* The scheduler is currently suspended - do not allow a context
;;;2766   		switch. */
;;;2767   		xYieldPending = pdTRUE;
000008  2001              MOVS     r0,#1
00000a  61d0              STR      r0,[r2,#0x1c]  ; xYieldPending
;;;2768   	}
;;;2769   	else
;;;2770   	{
;;;2771   		xYieldPending = pdFALSE;
;;;2772   		traceTASK_SWITCHED_OUT();
;;;2773   
;;;2774   		#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;2775   		{
;;;2776   				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
;;;2777   					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
;;;2778   				#else
;;;2779   					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
;;;2780   				#endif
;;;2781   
;;;2782   				/* Add the amount of time the task has been running to the
;;;2783   				accumulated time so far.  The time the task started running was
;;;2784   				stored in ulTaskSwitchedInTime.  Note that there is no overflow
;;;2785   				protection here so count values are only valid until the timer
;;;2786   				overflows.  The guard against negative values is to protect
;;;2787   				against suspect run time stat counter implementations - which
;;;2788   				are provided by the application, not the kernel. */
;;;2789   				if( ulTotalRunTime > ulTaskSwitchedInTime )
;;;2790   				{
;;;2791   					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
;;;2792   				}
;;;2793   				else
;;;2794   				{
;;;2795   					mtCOVERAGE_TEST_MARKER();
;;;2796   				}
;;;2797   				ulTaskSwitchedInTime = ulTotalRunTime;
;;;2798   		}
;;;2799   		#endif /* configGENERATE_RUN_TIME_STATS */
;;;2800   
;;;2801   		/* Check for stack overflow, if configured. */
;;;2802   		taskCHECK_FOR_STACK_OVERFLOW();
;;;2803   
;;;2804   		/* Select a new task to run using either the generic C or port
;;;2805   		optimised asm code. */
;;;2806   		taskSELECT_HIGHEST_PRIORITY_TASK();
;;;2807   		traceTASK_SWITCHED_IN();
;;;2808   
;;;2809   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;2810   		{
;;;2811   			/* Switch Newlib's _impure_ptr variable to point to the _reent
;;;2812   			structure specific to this task. */
;;;2813   			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
;;;2814   		}
;;;2815   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;2816   	}
;;;2817   }
00000c  4770              BX       lr
                  |L31.14|
00000e  2000              MOVS     r0,#0                 ;2771
000010  61d0              STR      r0,[r2,#0x1c]         ;2771  ; xYieldPending
000012  6910              LDR      r0,[r2,#0x10]         ;2806  ; uxTopReadyPriority
000014  fab0f080          CLZ      r0,r0                 ;2806
000018  f1c0001f          RSB      r0,r0,#0x1f           ;2806
00001c  490f              LDR      r1,|L31.92|
00001e  eb000080          ADD      r0,r0,r0,LSL #2       ;2806
000022  f8513020          LDR      r3,[r1,r0,LSL #2]     ;2806
000026  b173              CBZ      r3,|L31.70|
000028  eb010080          ADD      r0,r1,r0,LSL #2       ;2806
00002c  6841              LDR      r1,[r0,#4]            ;2806
00002e  6849              LDR      r1,[r1,#4]            ;2806
000030  6041              STR      r1,[r0,#4]            ;2806
000032  f1000308          ADD      r3,r0,#8              ;2806
000036  4299              CMP      r1,r3                 ;2806
000038  d101              BNE      |L31.62|
00003a  6849              LDR      r1,[r1,#4]            ;2806
00003c  6041              STR      r1,[r0,#4]            ;2806
                  |L31.62|
00003e  6840              LDR      r0,[r0,#4]            ;2806
000040  68c0              LDR      r0,[r0,#0xc]          ;2806
000042  6010              STR      r0,[r2,#0]            ;2806  ; pxCurrentTCB
000044  4770              BX       lr
                  |L31.70|
000046  2050              MOVS     r0,#0x50
000048  f3808811          MSR      BASEPRI,r0
00004c  f3bf8f4f          DSB      
000050  f3bf8f6f          ISB      
                  |L31.84|
000054  e7fe              B        |L31.84|
;;;2818   /*-----------------------------------------------------------*/
                          ENDP

000056  0000              DCW      0x0000
                  |L31.88|
                          DCD      ||.data||
                  |L31.92|
                          DCD      ||.bss||

                          AREA ||i.xTaskCheckForTimeOut||, CODE, READONLY, ALIGN=2

                  xTaskCheckForTimeOut PROC
;;;3014   
;;;3015   BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;3016   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;3017   BaseType_t xReturn;
;;;3018   
;;;3019   	configASSERT( pxTimeOut );
000006  2c00              CMP      r4,#0
000008  d010              BEQ      |L32.44|
;;;3020   	configASSERT( pxTicksToWait );
00000a  b1bd              CBZ      r5,|L32.60|
;;;3021   
;;;3022   	taskENTER_CRITICAL();
00000c  f7fffffe          BL       vPortEnterCritical
;;;3023   	{
;;;3024   		/* Minor optimisation.  The tick count cannot change in this block. */
;;;3025   		const TickType_t xConstTickCount = xTickCount;
000010  4a17              LDR      r2,|L32.112|
000012  68d0              LDR      r0,[r2,#0xc]  ; xTickCount
;;;3026   
;;;3027   		#if( INCLUDE_xTaskAbortDelay == 1 )
;;;3028   			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
;;;3029   			{
;;;3030   				/* The delay was aborted, which is not the same as a time out,
;;;3031   				but has the same result. */
;;;3032   				pxCurrentTCB->ucDelayAborted = pdFALSE;
;;;3033   				xReturn = pdTRUE;
;;;3034   			}
;;;3035   			else
;;;3036   		#endif
;;;3037   
;;;3038   		#if ( INCLUDE_vTaskSuspend == 1 )
;;;3039   			if( *pxTicksToWait == portMAX_DELAY )
000014  6829              LDR      r1,[r5,#0]
000016  1c4b              ADDS     r3,r1,#1
000018  d018              BEQ      |L32.76|
;;;3040   			{
;;;3041   				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
;;;3042   				specified is the maximum block time then the task should block
;;;3043   				indefinitely, and therefore never time out. */
;;;3044   				xReturn = pdFALSE;
;;;3045   			}
;;;3046   			else
;;;3047   		#endif
;;;3048   
;;;3049   		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
00001a  6823              LDR      r3,[r4,#0]
00001c  6a12              LDR      r2,[r2,#0x20]  ; xNumOfOverflows
00001e  4293              CMP      r3,r2
000020  d016              BEQ      |L32.80|
000022  6862              LDR      r2,[r4,#4]
000024  4282              CMP      r2,r0
000026  d813              BHI      |L32.80|
;;;3050   		{
;;;3051   			/* The tick count is greater than the time at which
;;;3052   			vTaskSetTimeout() was called, but has also overflowed since
;;;3053   			vTaskSetTimeOut() was called.  It must have wrapped all the way
;;;3054   			around and gone past again. This passed since vTaskSetTimeout()
;;;3055   			was called. */
;;;3056   			xReturn = pdTRUE;
000028  2401              MOVS     r4,#1
00002a  e01d              B        |L32.104|
                  |L32.44|
00002c  2050              MOVS     r0,#0x50
00002e  f3808811          MSR      BASEPRI,r0
000032  f3bf8f4f          DSB      
000036  f3bf8f6f          ISB      
                  |L32.58|
00003a  e7fe              B        |L32.58|
                  |L32.60|
00003c  2050              MOVS     r0,#0x50              ;3019
00003e  f3808811          MSR      BASEPRI,r0            ;3019
000042  f3bf8f4f          DSB                            ;3019
000046  f3bf8f6f          ISB                            ;3019
                  |L32.74|
00004a  e7fe              B        |L32.74|
                  |L32.76|
00004c  2400              MOVS     r4,#0                 ;3044
00004e  e00b              B        |L32.104|
                  |L32.80|
;;;3057   		}
;;;3058   		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
000050  6862              LDR      r2,[r4,#4]
000052  1a80              SUBS     r0,r0,r2
000054  4288              CMP      r0,r1
000056  d206              BCS      |L32.102|
;;;3059   		{
;;;3060   			/* Not a genuine timeout. Adjust parameters for time remaining. */
;;;3061   			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
000058  1a08              SUBS     r0,r1,r0
00005a  6028              STR      r0,[r5,#0]
;;;3062   			vTaskSetTimeOutState( pxTimeOut );
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       vTaskSetTimeOutState
;;;3063   			xReturn = pdFALSE;
000062  2400              MOVS     r4,#0
000064  e000              B        |L32.104|
                  |L32.102|
;;;3064   		}
;;;3065   		else
;;;3066   		{
;;;3067   			xReturn = pdTRUE;
000066  2401              MOVS     r4,#1
                  |L32.104|
;;;3068   		}
;;;3069   	}
;;;3070   	taskEXIT_CRITICAL();
000068  f7fffffe          BL       vPortExitCritical
;;;3071   
;;;3072   	return xReturn;
00006c  4620              MOV      r0,r4
;;;3073   }
00006e  bd70              POP      {r4-r6,pc}
;;;3074   /*-----------------------------------------------------------*/
                          ENDP

                  |L32.112|
                          DCD      ||.data||

                          AREA ||i.xTaskCreate||, CODE, READONLY, ALIGN=1

                  xTaskCreate PROC
;;;675    
;;;676    	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;677    							const char * const pcName,
;;;678    							const uint16_t usStackDepth,
;;;679    							void * const pvParameters,
;;;680    							UBaseType_t uxPriority,
;;;681    							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
;;;682    	{
000004  4681              MOV      r9,r0
000006  e9dd780e          LDRD     r7,r8,[sp,#0x38]
00000a  468a              MOV      r10,r1
00000c  4616              MOV      r6,r2
00000e  469b              MOV      r11,r3
;;;683    	TCB_t *pxNewTCB;
;;;684    	BaseType_t xReturn;
;;;685    
;;;686    		/* If the stack grows down then allocate the stack then the TCB so the stack
;;;687    		does not grow into the TCB.  Likewise if the stack grows up then allocate
;;;688    		the TCB then the stack. */
;;;689    		#if( portSTACK_GROWTH > 0 )
;;;690    		{
;;;691    			/* Allocate space for the TCB.  Where the memory comes from depends on
;;;692    			the implementation of the port malloc function and whether or not static
;;;693    			allocation is being used. */
;;;694    			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
;;;695    
;;;696    			if( pxNewTCB != NULL )
;;;697    			{
;;;698    				/* Allocate space for the stack used by the task being created.
;;;699    				The base of the stack memory stored in the TCB so the task can
;;;700    				be deleted later if required. */
;;;701    				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
;;;702    
;;;703    				if( pxNewTCB->pxStack == NULL )
;;;704    				{
;;;705    					/* Could not allocate the stack.  Delete the allocated TCB. */
;;;706    					vPortFree( pxNewTCB );
;;;707    					pxNewTCB = NULL;
;;;708    				}
;;;709    			}
;;;710    		}
;;;711    		#else /* portSTACK_GROWTH */
;;;712    		{
;;;713    		StackType_t *pxStack;
;;;714    
;;;715    			/* Allocate space for the stack used by the task being created. */
;;;716    			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000010  00b0              LSLS     r0,r6,#2
000012  f7fffffe          BL       pvPortMalloc
000016  4605              MOV      r5,r0
;;;717    
;;;718    			if( pxStack != NULL )
000018  0028              MOVS     r0,r5
00001a  d00a              BEQ      |L33.50|
;;;719    			{
;;;720    				/* Allocate space for the TCB. */
;;;721    				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
00001c  2054              MOVS     r0,#0x54
00001e  f7fffffe          BL       pvPortMalloc
000022  4604              MOV      r4,r0
;;;722    
;;;723    				if( pxNewTCB != NULL )
000024  b10c              CBZ      r4,|L33.42|
;;;724    				{
;;;725    					/* Store the stack location in the TCB. */
;;;726    					pxNewTCB->pxStack = pxStack;
000026  6325              STR      r5,[r4,#0x30]
000028  e004              B        |L33.52|
                  |L33.42|
;;;727    				}
;;;728    				else
;;;729    				{
;;;730    					/* The stack cannot be used as the TCB was not created.  Free
;;;731    					it again. */
;;;732    					vPortFree( pxStack );
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       vPortFree
000030  e000              B        |L33.52|
                  |L33.50|
;;;733    				}
;;;734    			}
;;;735    			else
;;;736    			{
;;;737    				pxNewTCB = NULL;
000032  2400              MOVS     r4,#0
                  |L33.52|
;;;738    			}
;;;739    		}
;;;740    		#endif /* portSTACK_GROWTH */
;;;741    
;;;742    		if( pxNewTCB != NULL )
000034  b18c              CBZ      r4,|L33.90|
;;;743    		{
;;;744    			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
;;;745    			{
;;;746    				/* Tasks can be created statically or dynamically, so note this
;;;747    				task was created dynamically in case it is later deleted. */
;;;748    				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
;;;749    			}
;;;750    			#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;751    
;;;752    			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
000036  2000              MOVS     r0,#0
000038  e9cd4002          STRD     r4,r0,[sp,#8]
00003c  e9cd7800          STRD     r7,r8,[sp,#0]
000040  465b              MOV      r3,r11
000042  4632              MOV      r2,r6
000044  4651              MOV      r1,r10
000046  4648              MOV      r0,r9
000048  f7fffffe          BL       prvInitialiseNewTask
;;;753    			prvAddNewTaskToReadyList( pxNewTCB );
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       prvAddNewTaskToReadyList
;;;754    			xReturn = pdPASS;
000052  2001              MOVS     r0,#1
                  |L33.84|
;;;755    		}
;;;756    		else
;;;757    		{
;;;758    			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
;;;759    		}
;;;760    
;;;761    		return xReturn;
;;;762    	}
000054  b004              ADD      sp,sp,#0x10
000056  e8bd9ff0          POP      {r4-r12,pc}
                  |L33.90|
00005a  f04f30ff          MOV      r0,#0xffffffff        ;758
00005e  e7f9              B        |L33.84|
;;;763    
                          ENDP


                          AREA ||i.xTaskGenericNotify||, CODE, READONLY, ALIGN=2

                  xTaskGenericNotify PROC
;;;4342   
;;;4343   	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4344   	{
000004  460d              MOV      r5,r1
000006  4690              MOV      r8,r2
000008  461f              MOV      r7,r3
;;;4345   	TCB_t * pxTCB;
;;;4346   	BaseType_t xReturn = pdPASS;
00000a  2601              MOVS     r6,#1
;;;4347   	uint8_t ucOriginalNotifyState;
;;;4348   
;;;4349   		configASSERT( xTaskToNotify );
00000c  2800              CMP      r0,#0
00000e  d012              BEQ      |L34.54|
;;;4350   		pxTCB = ( TCB_t * ) xTaskToNotify;
000010  4604              MOV      r4,r0
;;;4351   
;;;4352   		taskENTER_CRITICAL();
000012  f7fffffe          BL       vPortEnterCritical
;;;4353   		{
;;;4354   			if( pulPreviousNotificationValue != NULL )
000016  b10f              CBZ      r7,|L34.28|
;;;4355   			{
;;;4356   				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
000018  6ce0              LDR      r0,[r4,#0x4c]
00001a  6038              STR      r0,[r7,#0]
                  |L34.28|
;;;4357   			}
;;;4358   
;;;4359   			ucOriginalNotifyState = pxTCB->ucNotifyState;
00001c  f8940050          LDRB     r0,[r4,#0x50]
;;;4360   
;;;4361   			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
000020  2102              MOVS     r1,#2
000022  f8841050          STRB     r1,[r4,#0x50]
;;;4362   
;;;4363   			switch( eAction )
000026  f1b80f05          CMP      r8,#5
00002a  d21b              BCS      |L34.100|
00002c  e8dff008          TBB      [pc,r8]
000030  1a0b0f13          DCB      0x1a,0x0b,0x0f,0x13
000034  1500              DCB      0x15,0x00
                  |L34.54|
000036  2050              MOVS     r0,#0x50
000038  f3808811          MSR      BASEPRI,r0
00003c  f3bf8f4f          DSB      
000040  f3bf8f6f          ISB      
                  |L34.68|
000044  e7fe              B        |L34.68|
;;;4364   			{
;;;4365   				case eSetBits	:
;;;4366   					pxTCB->ulNotifiedValue |= ulValue;
000046  6ce1              LDR      r1,[r4,#0x4c]
000048  4329              ORRS     r1,r1,r5
00004a  64e1              STR      r1,[r4,#0x4c]
;;;4367   					break;
00004c  e00a              B        |L34.100|
;;;4368   
;;;4369   				case eIncrement	:
;;;4370   					( pxTCB->ulNotifiedValue )++;
00004e  6ce1              LDR      r1,[r4,#0x4c]
000050  1c49              ADDS     r1,r1,#1
000052  64e1              STR      r1,[r4,#0x4c]
;;;4371   					break;
000054  e006              B        |L34.100|
;;;4372   
;;;4373   				case eSetValueWithOverwrite	:
;;;4374   					pxTCB->ulNotifiedValue = ulValue;
000056  64e5              STR      r5,[r4,#0x4c]
;;;4375   					break;
000058  e004              B        |L34.100|
;;;4376   
;;;4377   				case eSetValueWithoutOverwrite :
;;;4378   					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
00005a  2802              CMP      r0,#2
00005c  d001              BEQ      |L34.98|
;;;4379   					{
;;;4380   						pxTCB->ulNotifiedValue = ulValue;
00005e  64e5              STR      r5,[r4,#0x4c]
000060  e000              B        |L34.100|
                  |L34.98|
;;;4381   					}
;;;4382   					else
;;;4383   					{
;;;4384   						/* The value could not be written to the task. */
;;;4385   						xReturn = pdFAIL;
000062  2600              MOVS     r6,#0
                  |L34.100|
;;;4386   					}
;;;4387   					break;
;;;4388   
;;;4389   				case eNoAction:
;;;4390   					/* The task is being notified without its notify value being
;;;4391   					updated. */
;;;4392   					break;
;;;4393   			}
;;;4394   
;;;4395   			traceTASK_NOTIFY();
;;;4396   
;;;4397   			/* If the task is in the blocked state specifically to wait for a
;;;4398   			notification then unblock it now. */
;;;4399   			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
000064  2801              CMP      r0,#1
000066  d128              BNE      |L34.186|
;;;4400   			{
;;;4401   				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
000068  1d20              ADDS     r0,r4,#4
00006a  f7fffffe          BL       uxListRemove
;;;4402   				prvAddTaskToReadyList( pxTCB );
00006e  4d15              LDR      r5,|L34.196|
000070  6ae0              LDR      r0,[r4,#0x2c]
000072  2101              MOVS     r1,#1
000074  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
000076  4081              LSLS     r1,r1,r0
000078  4311              ORRS     r1,r1,r2
00007a  6129              STR      r1,[r5,#0x10]  ; uxTopReadyPriority
00007c  4912              LDR      r1,|L34.200|
00007e  eb000080          ADD      r0,r0,r0,LSL #2
000082  eb010080          ADD      r0,r1,r0,LSL #2
000086  1d21              ADDS     r1,r4,#4
000088  f7fffffe          BL       vListInsertEnd
;;;4403   
;;;4404   				/* The task should not have been on an event list. */
;;;4405   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
00008c  6aa0              LDR      r0,[r4,#0x28]
00008e  b138              CBZ      r0,|L34.160|
000090  2050              MOVS     r0,#0x50
000092  f3808811          MSR      BASEPRI,r0
000096  f3bf8f4f          DSB      
00009a  f3bf8f6f          ISB      
                  |L34.158|
00009e  e7fe              B        |L34.158|
                  |L34.160|
;;;4406   
;;;4407   				#if( configUSE_TICKLESS_IDLE != 0 )
;;;4408   				{
;;;4409   					/* If a task is blocked waiting for a notification then
;;;4410   					xNextTaskUnblockTime might be set to the blocked task's time
;;;4411   					out time.  If the task is unblocked for a reason other than
;;;4412   					a timeout xNextTaskUnblockTime is normally left unchanged,
;;;4413   					because it will automatically get reset to a new value when
;;;4414   					the tick count equals xNextTaskUnblockTime.  However if
;;;4415   					tickless idling is used it might be more important to enter
;;;4416   					sleep mode at the earliest possible time - so reset
;;;4417   					xNextTaskUnblockTime here to ensure it is updated at the
;;;4418   					earliest possible time. */
;;;4419   					prvResetNextTaskUnblockTime();
;;;4420   				}
;;;4421   				#endif
;;;4422   
;;;4423   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
0000a0  6ae0              LDR      r0,[r4,#0x2c]
0000a2  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
0000a4  6ac9              LDR      r1,[r1,#0x2c]
0000a6  4288              CMP      r0,r1
0000a8  d907              BLS      |L34.186|
;;;4424   				{
;;;4425   					/* The notified task has a priority above the currently
;;;4426   					executing task so a yield is required. */
;;;4427   					taskYIELD_IF_USING_PREEMPTION();
0000aa  4908              LDR      r1,|L34.204|
0000ac  f04f5080          MOV      r0,#0x10000000
0000b0  6008              STR      r0,[r1,#0]
0000b2  f3bf8f4f          DSB      
0000b6  f3bf8f6f          ISB      
                  |L34.186|
;;;4428   				}
;;;4429   				else
;;;4430   				{
;;;4431   					mtCOVERAGE_TEST_MARKER();
;;;4432   				}
;;;4433   			}
;;;4434   			else
;;;4435   			{
;;;4436   				mtCOVERAGE_TEST_MARKER();
;;;4437   			}
;;;4438   		}
;;;4439   		taskEXIT_CRITICAL();
0000ba  f7fffffe          BL       vPortExitCritical
;;;4440   
;;;4441   		return xReturn;
0000be  4630              MOV      r0,r6
;;;4442   	}
0000c0  e8bd81f0          POP      {r4-r8,pc}
;;;4443   
                          ENDP

                  |L34.196|
                          DCD      ||.data||
                  |L34.200|
                          DCD      ||.bss||
                  |L34.204|
                          DCD      0xe000ed04

                          AREA ||i.xTaskGenericNotifyFromISR||, CODE, READONLY, ALIGN=2

                  xTaskGenericNotifyFromISR PROC
;;;4448   
;;;4449   	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;4450   	{
000004  4604              MOV      r4,r0
000006  f8dd8020          LDR      r8,[sp,#0x20]
00000a  460d              MOV      r5,r1
00000c  4691              MOV      r9,r2
00000e  469a              MOV      r10,r3
;;;4451   	TCB_t * pxTCB;
;;;4452   	uint8_t ucOriginalNotifyState;
;;;4453   	BaseType_t xReturn = pdPASS;
000010  2701              MOVS     r7,#1
;;;4454   	UBaseType_t uxSavedInterruptStatus;
;;;4455   
;;;4456   		configASSERT( xTaskToNotify );
000012  2c00              CMP      r4,#0
000014  d01d              BEQ      |L35.82|
;;;4457   
;;;4458   		/* RTOS ports that support interrupt nesting have the concept of a
;;;4459   		maximum	system call (or maximum API call) interrupt priority.
;;;4460   		Interrupts that are	above the maximum system call priority are keep
;;;4461   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;4462   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;4463   		is defined in FreeRTOSConfig.h then
;;;4464   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;4465   		failure if a FreeRTOS API function is called from an interrupt that has
;;;4466   		been assigned a priority above the configured maximum system call
;;;4467   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;4468   		from interrupts	that have been assigned a priority at or (logically)
;;;4469   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;4470   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;4471   		simple as possible.  More information (albeit Cortex-M specific) is
;;;4472   		provided on the following link:
;;;4473   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;4474   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000016  f7fffffe          BL       vPortValidateInterruptPriority
00001a  2050              MOVS     r0,#0x50
00001c  f3ef8611          MRS      r6,BASEPRI
000020  f3808811          MSR      BASEPRI,r0
000024  f3bf8f4f          DSB      
000028  f3bf8f6f          ISB      
;;;4475   
;;;4476   		pxTCB = ( TCB_t * ) xTaskToNotify;
;;;4477   
;;;4478   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
;;;4479   		{
;;;4480   			if( pulPreviousNotificationValue != NULL )
00002c  f1ba0f00          CMP      r10,#0
000030  d002              BEQ      |L35.56|
;;;4481   			{
;;;4482   				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
000032  6ce0              LDR      r0,[r4,#0x4c]
000034  f8ca0000          STR      r0,[r10,#0]
                  |L35.56|
;;;4483   			}
;;;4484   
;;;4485   			ucOriginalNotifyState = pxTCB->ucNotifyState;
000038  f8940050          LDRB     r0,[r4,#0x50]
;;;4486   			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
00003c  2102              MOVS     r1,#2
00003e  f8841050          STRB     r1,[r4,#0x50]
;;;4487   
;;;4488   			switch( eAction )
000042  f1b90f05          CMP      r9,#5
000046  d21b              BCS      |L35.128|
000048  e8dff009          TBB      [pc,r9]
00004c  1a0b0f13          DCB      0x1a,0x0b,0x0f,0x13
000050  1500              DCB      0x15,0x00
                  |L35.82|
000052  2050              MOVS     r0,#0x50
000054  f3808811          MSR      BASEPRI,r0
000058  f3bf8f4f          DSB      
00005c  f3bf8f6f          ISB      
                  |L35.96|
000060  e7fe              B        |L35.96|
;;;4489   			{
;;;4490   				case eSetBits	:
;;;4491   					pxTCB->ulNotifiedValue |= ulValue;
000062  6ce1              LDR      r1,[r4,#0x4c]
000064  4329              ORRS     r1,r1,r5
000066  64e1              STR      r1,[r4,#0x4c]
;;;4492   					break;
000068  e00a              B        |L35.128|
;;;4493   
;;;4494   				case eIncrement	:
;;;4495   					( pxTCB->ulNotifiedValue )++;
00006a  6ce1              LDR      r1,[r4,#0x4c]
00006c  1c49              ADDS     r1,r1,#1
00006e  64e1              STR      r1,[r4,#0x4c]
;;;4496   					break;
000070  e006              B        |L35.128|
;;;4497   
;;;4498   				case eSetValueWithOverwrite	:
;;;4499   					pxTCB->ulNotifiedValue = ulValue;
000072  64e5              STR      r5,[r4,#0x4c]
;;;4500   					break;
000074  e004              B        |L35.128|
;;;4501   
;;;4502   				case eSetValueWithoutOverwrite :
;;;4503   					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
000076  2802              CMP      r0,#2
000078  d001              BEQ      |L35.126|
;;;4504   					{
;;;4505   						pxTCB->ulNotifiedValue = ulValue;
00007a  64e5              STR      r5,[r4,#0x4c]
00007c  e000              B        |L35.128|
                  |L35.126|
;;;4506   					}
;;;4507   					else
;;;4508   					{
;;;4509   						/* The value could not be written to the task. */
;;;4510   						xReturn = pdFAIL;
00007e  2700              MOVS     r7,#0
                  |L35.128|
;;;4511   					}
;;;4512   					break;
;;;4513   
;;;4514   				case eNoAction :
;;;4515   					/* The task is being notified without its notify value being
;;;4516   					updated. */
;;;4517   					break;
;;;4518   			}
;;;4519   
;;;4520   			traceTASK_NOTIFY_FROM_ISR();
;;;4521   
;;;4522   			/* If the task is in the blocked state specifically to wait for a
;;;4523   			notification then unblock it now. */
;;;4524   			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
000080  2801              CMP      r0,#1
000082  d133              BNE      |L35.236|
;;;4525   			{
;;;4526   				/* The task should not have been on an event list. */
;;;4527   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
000084  6aa0              LDR      r0,[r4,#0x28]
000086  b138              CBZ      r0,|L35.152|
000088  2050              MOVS     r0,#0x50
00008a  f3808811          MSR      BASEPRI,r0
00008e  f3bf8f4f          DSB      
000092  f3bf8f6f          ISB      
                  |L35.150|
000096  e7fe              B        |L35.150|
                  |L35.152|
;;;4528   
;;;4529   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000098  4d17              LDR      r5,|L35.248|
00009a  6b28              LDR      r0,[r5,#0x30]  ; uxSchedulerSuspended
00009c  f04f0901          MOV      r9,#1                 ;4453
0000a0  b178              CBZ      r0,|L35.194|
;;;4530   				{
;;;4531   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
;;;4532   					prvAddTaskToReadyList( pxTCB );
;;;4533   				}
;;;4534   				else
;;;4535   				{
;;;4536   					/* The delayed and ready lists cannot be accessed, so hold
;;;4537   					this task pending until the scheduler is resumed. */
;;;4538   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
0000a2  f1040118          ADD      r1,r4,#0x18
0000a6  4815              LDR      r0,|L35.252|
0000a8  f7fffffe          BL       vListInsertEnd
                  |L35.172|
;;;4539   				}
;;;4540   
;;;4541   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
0000ac  6ae0              LDR      r0,[r4,#0x2c]
0000ae  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
0000b0  6ac9              LDR      r1,[r1,#0x2c]
0000b2  4288              CMP      r0,r1
0000b4  d91a              BLS      |L35.236|
;;;4542   				{
;;;4543   					/* The notified task has a priority above the currently
;;;4544   					executing task so a yield is required. */
;;;4545   					if( pxHigherPriorityTaskWoken != NULL )
0000b6  f1b80f00          CMP      r8,#0
0000ba  d015              BEQ      |L35.232|
;;;4546   					{
;;;4547   						*pxHigherPriorityTaskWoken = pdTRUE;
0000bc  f8c89000          STR      r9,[r8,#0]
0000c0  e014              B        |L35.236|
                  |L35.194|
0000c2  1d20              ADDS     r0,r4,#4              ;4531
0000c4  f7fffffe          BL       uxListRemove
0000c8  6ae0              LDR      r0,[r4,#0x2c]         ;4532
0000ca  692a              LDR      r2,[r5,#0x10]         ;4532  ; uxTopReadyPriority
0000cc  fa09f100          LSL      r1,r9,r0              ;4532
0000d0  4311              ORRS     r1,r1,r2              ;4532
0000d2  6129              STR      r1,[r5,#0x10]         ;4532  ; uxTopReadyPriority
0000d4  4909              LDR      r1,|L35.252|
0000d6  eb000080          ADD      r0,r0,r0,LSL #2       ;4532
0000da  39b4              SUBS     r1,r1,#0xb4           ;4532
0000dc  eb010080          ADD      r0,r1,r0,LSL #2       ;4532
0000e0  1d21              ADDS     r1,r4,#4              ;4532
0000e2  f7fffffe          BL       vListInsertEnd
0000e6  e7e1              B        |L35.172|
                  |L35.232|
;;;4548   					}
;;;4549   					else
;;;4550   					{
;;;4551   						/* Mark that a yield is pending in case the user is not
;;;4552   						using the "xHigherPriorityTaskWoken" parameter to an ISR
;;;4553   						safe FreeRTOS function. */
;;;4554   						xYieldPending = pdTRUE;
0000e8  f8c5901c          STR      r9,[r5,#0x1c]  ; xYieldPending
                  |L35.236|
0000ec  f3868811          MSR      BASEPRI,r6
;;;4555   					}
;;;4556   				}
;;;4557   				else
;;;4558   				{
;;;4559   					mtCOVERAGE_TEST_MARKER();
;;;4560   				}
;;;4561   			}
;;;4562   		}
;;;4563   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;4564   
;;;4565   		return xReturn;
0000f0  4638              MOV      r0,r7
;;;4566   	}
0000f2  e8bd87f0          POP      {r4-r10,pc}
;;;4567   
                          ENDP

0000f6  0000              DCW      0x0000
                  |L35.248|
                          DCD      ||.data||
                  |L35.252|
                          DCD      ||.bss||+0xb4

                          AREA ||i.xTaskGetCurrentTaskHandle||, CODE, READONLY, ALIGN=2

                  xTaskGetCurrentTaskHandle PROC
;;;3660   
;;;3661   	TaskHandle_t xTaskGetCurrentTaskHandle( void )
000000  4801              LDR      r0,|L36.8|
;;;3662   	{
;;;3663   	TaskHandle_t xReturn;
;;;3664   
;;;3665   		/* A critical section is not required as this is not called from
;;;3666   		an interrupt and the current TCB will always be the same for any
;;;3667   		individual execution thread. */
;;;3668   		xReturn = pxCurrentTCB;
000002  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
;;;3669   
;;;3670   		return xReturn;
;;;3671   	}
000004  4770              BX       lr
;;;3672   
                          ENDP

000006  0000              DCW      0x0000
                  |L36.8|
                          DCD      ||.data||

                          AREA ||i.xTaskGetSchedulerState||, CODE, READONLY, ALIGN=2

                  xTaskGetSchedulerState PROC
;;;3677   
;;;3678   	BaseType_t xTaskGetSchedulerState( void )
000000  4805              LDR      r0,|L37.24|
;;;3679   	{
;;;3680   	BaseType_t xReturn;
;;;3681   
;;;3682   		if( xSchedulerRunning == pdFALSE )
000002  6941              LDR      r1,[r0,#0x14]  ; xSchedulerRunning
000004  2900              CMP      r1,#0
000006  d003              BEQ      |L37.16|
;;;3683   		{
;;;3684   			xReturn = taskSCHEDULER_NOT_STARTED;
;;;3685   		}
;;;3686   		else
;;;3687   		{
;;;3688   			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000008  6b00              LDR      r0,[r0,#0x30]  ; uxSchedulerSuspended
00000a  b118              CBZ      r0,|L37.20|
;;;3689   			{
;;;3690   				xReturn = taskSCHEDULER_RUNNING;
;;;3691   			}
;;;3692   			else
;;;3693   			{
;;;3694   				xReturn = taskSCHEDULER_SUSPENDED;
00000c  2000              MOVS     r0,#0
;;;3695   			}
;;;3696   		}
;;;3697   
;;;3698   		return xReturn;
;;;3699   	}
00000e  4770              BX       lr
                  |L37.16|
000010  2001              MOVS     r0,#1                 ;3684
000012  4770              BX       lr
                  |L37.20|
000014  2002              MOVS     r0,#2                 ;3690
000016  4770              BX       lr
;;;3700   
                          ENDP

                  |L37.24|
                          DCD      ||.data||

                          AREA ||i.xTaskGetTickCount||, CODE, READONLY, ALIGN=2

                  xTaskGetTickCount PROC
;;;2126   
;;;2127   TickType_t xTaskGetTickCount( void )
000000  4801              LDR      r0,|L38.8|
;;;2128   {
;;;2129   TickType_t xTicks;
;;;2130   
;;;2131   	/* Critical section required if running on a 16 bit processor. */
;;;2132   	portTICK_TYPE_ENTER_CRITICAL();
;;;2133   	{
;;;2134   		xTicks = xTickCount;
000002  68c0              LDR      r0,[r0,#0xc]  ; xTickCount
;;;2135   	}
;;;2136   	portTICK_TYPE_EXIT_CRITICAL();
;;;2137   
;;;2138   	return xTicks;
;;;2139   }
000004  4770              BX       lr
;;;2140   /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L38.8|
                          DCD      ||.data||

                          AREA ||i.xTaskGetTickCountFromISR||, CODE, READONLY, ALIGN=2

                  xTaskGetTickCountFromISR PROC
;;;2141   
;;;2142   TickType_t xTaskGetTickCountFromISR( void )
000000  b510              PUSH     {r4,lr}
;;;2143   {
;;;2144   TickType_t xReturn;
;;;2145   UBaseType_t uxSavedInterruptStatus;
;;;2146   
;;;2147   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;2148   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;2149   	above the maximum system call priority are kept permanently enabled, even
;;;2150   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;2151   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;2152   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;2153   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;2154   	assigned a priority above the configured maximum system call priority.
;;;2155   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;2156   	that have been assigned a priority at or (logically) below the maximum
;;;2157   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;2158   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;2159   	More information (albeit Cortex-M specific) is provided on the following
;;;2160   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;2161   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000002  f7fffffe          BL       vPortValidateInterruptPriority
;;;2162   
;;;2163   	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
;;;2164   	{
;;;2165   		xReturn = xTickCount;
000006  4801              LDR      r0,|L39.12|
000008  68c0              LDR      r0,[r0,#0xc]  ; xTickCount
;;;2166   	}
;;;2167   	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;2168   
;;;2169   	return xReturn;
;;;2170   }
00000a  bd10              POP      {r4,pc}
;;;2171   /*-----------------------------------------------------------*/
                          ENDP

                  |L39.12|
                          DCD      ||.data||

                          AREA ||i.xTaskIncrementTick||, CODE, READONLY, ALIGN=2

                  xTaskIncrementTick PROC
;;;2498   
;;;2499   BaseType_t xTaskIncrementTick( void )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2500   {
;;;2501   TCB_t * pxTCB;
;;;2502   TickType_t xItemValue;
;;;2503   BaseType_t xSwitchRequired = pdFALSE;
000004  2600              MOVS     r6,#0
;;;2504   
;;;2505   	/* Called by the portable layer each time a tick interrupt occurs.
;;;2506   	Increments the tick then checks to see if the new tick value will cause any
;;;2507   	tasks to be unblocked. */
;;;2508   	traceTASK_INCREMENT_TICK( xTickCount );
;;;2509   	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000006  4f2f              LDR      r7,|L40.196|
000008  6b38              LDR      r0,[r7,#0x30]  ; uxSchedulerSuspended
00000a  2800              CMP      r0,#0
00000c  d008              BEQ      |L40.32|
;;;2510   	{
;;;2511   		/* Minor optimisation.  The tick count cannot change in this
;;;2512   		block. */
;;;2513   		const TickType_t xConstTickCount = xTickCount + 1;
;;;2514   
;;;2515   		/* Increment the RTOS tick, switching the delayed and overflowed
;;;2516   		delayed lists if it wraps to 0. */
;;;2517   		xTickCount = xConstTickCount;
;;;2518   
;;;2519   		if( xConstTickCount == ( TickType_t ) 0U )
;;;2520   		{
;;;2521   			taskSWITCH_DELAYED_LISTS();
;;;2522   		}
;;;2523   		else
;;;2524   		{
;;;2525   			mtCOVERAGE_TEST_MARKER();
;;;2526   		}
;;;2527   
;;;2528   		/* See if this tick has made a timeout expire.  Tasks are stored in
;;;2529   		the	queue in the order of their wake time - meaning once one task
;;;2530   		has been found whose block time has not expired there is no need to
;;;2531   		look any further down the list. */
;;;2532   		if( xConstTickCount >= xNextTaskUnblockTime )
;;;2533   		{
;;;2534   			for( ;; )
;;;2535   			{
;;;2536   				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
;;;2537   				{
;;;2538   					/* The delayed list is empty.  Set xNextTaskUnblockTime
;;;2539   					to the maximum possible value so it is extremely
;;;2540   					unlikely that the
;;;2541   					if( xTickCount >= xNextTaskUnblockTime ) test will pass
;;;2542   					next time through. */
;;;2543   					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
;;;2544   					break;
;;;2545   				}
;;;2546   				else
;;;2547   				{
;;;2548   					/* The delayed list is not empty, get the value of the
;;;2549   					item at the head of the delayed list.  This is the time
;;;2550   					at which the task at the head of the delayed list must
;;;2551   					be removed from the Blocked state. */
;;;2552   					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
;;;2553   					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
;;;2554   
;;;2555   					if( xConstTickCount < xItemValue )
;;;2556   					{
;;;2557   						/* It is not time to unblock this item yet, but the
;;;2558   						item value is the time at which the task at the head
;;;2559   						of the blocked list must be removed from the Blocked
;;;2560   						state -	so record the item value in
;;;2561   						xNextTaskUnblockTime. */
;;;2562   						xNextTaskUnblockTime = xItemValue;
;;;2563   						break;
;;;2564   					}
;;;2565   					else
;;;2566   					{
;;;2567   						mtCOVERAGE_TEST_MARKER();
;;;2568   					}
;;;2569   
;;;2570   					/* It is time to remove the item from the Blocked state. */
;;;2571   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
;;;2572   
;;;2573   					/* Is the task waiting on an event also?  If so remove
;;;2574   					it from the event list. */
;;;2575   					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
;;;2576   					{
;;;2577   						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
;;;2578   					}
;;;2579   					else
;;;2580   					{
;;;2581   						mtCOVERAGE_TEST_MARKER();
;;;2582   					}
;;;2583   
;;;2584   					/* Place the unblocked task into the appropriate ready
;;;2585   					list. */
;;;2586   					prvAddTaskToReadyList( pxTCB );
;;;2587   
;;;2588   					/* A task being unblocked cannot cause an immediate
;;;2589   					context switch if preemption is turned off. */
;;;2590   					#if (  configUSE_PREEMPTION == 1 )
;;;2591   					{
;;;2592   						/* Preemption is on, but a context switch should
;;;2593   						only be performed if the unblocked task has a
;;;2594   						priority that is equal to or higher than the
;;;2595   						currently executing task. */
;;;2596   						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
;;;2597   						{
;;;2598   							xSwitchRequired = pdTRUE;
;;;2599   						}
;;;2600   						else
;;;2601   						{
;;;2602   							mtCOVERAGE_TEST_MARKER();
;;;2603   						}
;;;2604   					}
;;;2605   					#endif /* configUSE_PREEMPTION */
;;;2606   				}
;;;2607   			}
;;;2608   		}
;;;2609   
;;;2610   		/* Tasks of equal priority to the currently running task will share
;;;2611   		processing time (time slice) if preemption is on, and the application
;;;2612   		writer has not explicitly turned time slicing off. */
;;;2613   		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
;;;2614   		{
;;;2615   			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
;;;2616   			{
;;;2617   				xSwitchRequired = pdTRUE;
;;;2618   			}
;;;2619   			else
;;;2620   			{
;;;2621   				mtCOVERAGE_TEST_MARKER();
;;;2622   			}
;;;2623   		}
;;;2624   		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
;;;2625   
;;;2626   		#if ( configUSE_TICK_HOOK == 1 )
;;;2627   		{
;;;2628   			/* Guard against the tick hook being called when the pended tick
;;;2629   			count is being unwound (when the scheduler is being unlocked). */
;;;2630   			if( uxPendedTicks == ( UBaseType_t ) 0U )
;;;2631   			{
;;;2632   				vApplicationTickHook();
;;;2633   			}
;;;2634   			else
;;;2635   			{
;;;2636   				mtCOVERAGE_TEST_MARKER();
;;;2637   			}
;;;2638   		}
;;;2639   		#endif /* configUSE_TICK_HOOK */
;;;2640   	}
;;;2641   	else
;;;2642   	{
;;;2643   		++uxPendedTicks;
00000e  69b8              LDR      r0,[r7,#0x18]  ; uxPendedTicks
000010  1c40              ADDS     r0,r0,#1
000012  61b8              STR      r0,[r7,#0x18]  ; uxPendedTicks
                  |L40.20|
;;;2644   
;;;2645   		/* The tick hook gets called at regular intervals, even if the
;;;2646   		scheduler is locked. */
;;;2647   		#if ( configUSE_TICK_HOOK == 1 )
;;;2648   		{
;;;2649   			vApplicationTickHook();
;;;2650   		}
;;;2651   		#endif
;;;2652   	}
;;;2653   
;;;2654   	#if ( configUSE_PREEMPTION == 1 )
;;;2655   	{
;;;2656   		if( xYieldPending != pdFALSE )
000014  69f8              LDR      r0,[r7,#0x1c]  ; xYieldPending
000016  b100              CBZ      r0,|L40.26|
;;;2657   		{
;;;2658   			xSwitchRequired = pdTRUE;
000018  2601              MOVS     r6,#1
                  |L40.26|
;;;2659   		}
;;;2660   		else
;;;2661   		{
;;;2662   			mtCOVERAGE_TEST_MARKER();
;;;2663   		}
;;;2664   	}
;;;2665   	#endif /* configUSE_PREEMPTION */
;;;2666   
;;;2667   	return xSwitchRequired;
00001a  4630              MOV      r0,r6
;;;2668   }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L40.32|
000020  68fd              LDR      r5,[r7,#0xc]          ;2513  ; xTickCount
000022  1c6d              ADDS     r5,r5,#1              ;2513
000024  60fd              STR      r5,[r7,#0xc]          ;2517  ; xTickCount
000026  b99d              CBNZ     r5,|L40.80|
000028  6b78              LDR      r0,[r7,#0x34]         ;2521  ; pxDelayedTaskList
00002a  6800              LDR      r0,[r0,#0]            ;2521
00002c  b138              CBZ      r0,|L40.62|
00002e  2050              MOVS     r0,#0x50              ;2521
000030  f3808811          MSR      BASEPRI,r0            ;2521
000034  f3bf8f4f          DSB                            ;2521
000038  f3bf8f6f          ISB                            ;2521
                  |L40.60|
00003c  e7fe              B        |L40.60|
                  |L40.62|
00003e  6b78              LDR      r0,[r7,#0x34]         ;2521  ; pxDelayedTaskList
000040  6bb9              LDR      r1,[r7,#0x38]         ;2521  ; pxOverflowDelayedTaskList
000042  6379              STR      r1,[r7,#0x34]         ;2521  ; pxDelayedTaskList
000044  63b8              STR      r0,[r7,#0x38]         ;2521  ; pxOverflowDelayedTaskList
000046  6a38              LDR      r0,[r7,#0x20]         ;2521  ; xNumOfOverflows
000048  1c40              ADDS     r0,r0,#1              ;2521
00004a  6238              STR      r0,[r7,#0x20]         ;2521  ; xNumOfOverflows
00004c  f7fffffe          BL       prvResetNextTaskUnblockTime
                  |L40.80|
000050  6ab8              LDR      r0,[r7,#0x28]         ;2532  ; xNextTaskUnblockTime
000052  f8df8074          LDR      r8,|L40.200|
000056  4285              CMP      r5,r0                 ;2532
000058  d30d              BCC      |L40.118|
                  |L40.90|
00005a  6b78              LDR      r0,[r7,#0x34]         ;2536  ; pxDelayedTaskList
00005c  6800              LDR      r0,[r0,#0]            ;2536
00005e  b138              CBZ      r0,|L40.112|
000060  6b78              LDR      r0,[r7,#0x34]         ;2552  ; pxDelayedTaskList
000062  68c0              LDR      r0,[r0,#0xc]          ;2552
000064  68c4              LDR      r4,[r0,#0xc]          ;2552
000066  6860              LDR      r0,[r4,#4]            ;2553
000068  4285              CMP      r5,r0                 ;2555
00006a  d20e              BCS      |L40.138|
00006c  62b8              STR      r0,[r7,#0x28]         ;2562  ; xNextTaskUnblockTime
00006e  e002              B        |L40.118|
                  |L40.112|
000070  f04f30ff          MOV      r0,#0xffffffff        ;2543
000074  62b8              STR      r0,[r7,#0x28]         ;2543  ; xNextTaskUnblockTime
                  |L40.118|
000076  6838              LDR      r0,[r7,#0]            ;2615  ; pxCurrentTCB
000078  6ac0              LDR      r0,[r0,#0x2c]         ;2615
00007a  eb000080          ADD      r0,r0,r0,LSL #2       ;2615
00007e  f8580020          LDR      r0,[r8,r0,LSL #2]     ;2615
000082  2801              CMP      r0,#1                 ;2615
000084  d9c6              BLS      |L40.20|
000086  2601              MOVS     r6,#1                 ;2617
000088  e7c4              B        |L40.20|
                  |L40.138|
00008a  1d20              ADDS     r0,r4,#4              ;2571
00008c  f7fffffe          BL       uxListRemove
000090  6aa0              LDR      r0,[r4,#0x28]         ;2575
000092  b118              CBZ      r0,|L40.156|
000094  f1040018          ADD      r0,r4,#0x18           ;2577
000098  f7fffffe          BL       uxListRemove
                  |L40.156|
00009c  6ae0              LDR      r0,[r4,#0x2c]         ;2586
00009e  2101              MOVS     r1,#1                 ;2586
0000a0  693a              LDR      r2,[r7,#0x10]         ;2586  ; uxTopReadyPriority
0000a2  4081              LSLS     r1,r1,r0              ;2586
0000a4  4311              ORRS     r1,r1,r2              ;2586
0000a6  6139              STR      r1,[r7,#0x10]         ;2586  ; uxTopReadyPriority
0000a8  eb000080          ADD      r0,r0,r0,LSL #2       ;2586
0000ac  eb080080          ADD      r0,r8,r0,LSL #2       ;2586
0000b0  1d21              ADDS     r1,r4,#4              ;2586
0000b2  f7fffffe          BL       vListInsertEnd
0000b6  6ae0              LDR      r0,[r4,#0x2c]         ;2596
0000b8  6839              LDR      r1,[r7,#0]            ;2596  ; pxCurrentTCB
0000ba  6ac9              LDR      r1,[r1,#0x2c]         ;2596
0000bc  4288              CMP      r0,r1                 ;2596
0000be  d3cc              BCC      |L40.90|
0000c0  2601              MOVS     r6,#1                 ;2598
0000c2  e7ca              B        |L40.90|
;;;2669   /*-----------------------------------------------------------*/
                          ENDP

                  |L40.196|
                          DCD      ||.data||
                  |L40.200|
                          DCD      ||.bss||

                          AREA ||i.xTaskNotifyStateClear||, CODE, READONLY, ALIGN=2

                  xTaskNotifyStateClear PROC
;;;4661   
;;;4662   	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
000000  b510              PUSH     {r4,lr}
;;;4663   	{
;;;4664   	TCB_t *pxTCB;
;;;4665   	BaseType_t xReturn;
;;;4666   
;;;4667   		/* If null is passed in here then it is the calling task that is having
;;;4668   		its notification state cleared. */
;;;4669   		pxTCB = prvGetTCBFromHandle( xTask );
000002  2800              CMP      r0,#0
000004  d00b              BEQ      |L41.30|
000006  4604              MOV      r4,r0
                  |L41.8|
;;;4670   
;;;4671   		taskENTER_CRITICAL();
000008  f7fffffe          BL       vPortEnterCritical
;;;4672   		{
;;;4673   			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
00000c  f8940050          LDRB     r0,[r4,#0x50]
000010  2802              CMP      r0,#2
000012  d007              BEQ      |L41.36|
;;;4674   			{
;;;4675   				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
;;;4676   				xReturn = pdPASS;
;;;4677   			}
;;;4678   			else
;;;4679   			{
;;;4680   				xReturn = pdFAIL;
000014  2400              MOVS     r4,#0
                  |L41.22|
;;;4681   			}
;;;4682   		}
;;;4683   		taskEXIT_CRITICAL();
000016  f7fffffe          BL       vPortExitCritical
;;;4684   
;;;4685   		return xReturn;
00001a  4620              MOV      r0,r4
;;;4686   	}
00001c  bd10              POP      {r4,pc}
                  |L41.30|
00001e  4804              LDR      r0,|L41.48|
000020  6804              LDR      r4,[r0,#0]            ;4669  ; pxCurrentTCB
000022  e7f1              B        |L41.8|
                  |L41.36|
000024  2000              MOVS     r0,#0                 ;4675
000026  f8840050          STRB     r0,[r4,#0x50]         ;4675
00002a  2401              MOVS     r4,#1                 ;4676
00002c  e7f3              B        |L41.22|
;;;4687   
                          ENDP

00002e  0000              DCW      0x0000
                  |L41.48|
                          DCD      ||.data||

                          AREA ||i.xTaskNotifyWait||, CODE, READONLY, ALIGN=2

                  xTaskNotifyWait PROC
;;;4262   
;;;4263   	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;4264   	{
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
00000a  4698              MOV      r8,r3
;;;4265   	BaseType_t xReturn;
;;;4266   
;;;4267   		taskENTER_CRITICAL();
00000c  f7fffffe          BL       vPortEnterCritical
;;;4268   		{
;;;4269   			/* Only block if a notification is not already pending. */
;;;4270   			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
000010  4d1d              LDR      r5,|L42.136|
000012  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000014  f8900050          LDRB     r0,[r0,#0x50]
000018  2802              CMP      r0,#2
00001a  d017              BEQ      |L42.76|
;;;4271   			{
;;;4272   				/* Clear bits in the task's notification value as bits may get
;;;4273   				set	by the notifying task or interrupt.  This can be used to
;;;4274   				clear the value to zero. */
;;;4275   				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
00001c  682c              LDR      r4,[r5,#0]  ; pxCurrentTCB
00001e  6ce0              LDR      r0,[r4,#0x4c]
000020  ea200009          BIC      r0,r0,r9
000024  64e0              STR      r0,[r4,#0x4c]
;;;4276   
;;;4277   				/* Mark this task as waiting for a notification. */
;;;4278   				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
000026  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000028  2001              MOVS     r0,#1
00002a  f8810050          STRB     r0,[r1,#0x50]
;;;4279   
;;;4280   				if( xTicksToWait > ( TickType_t ) 0 )
00002e  f1b80f00          CMP      r8,#0
000032  d00b              BEQ      |L42.76|
;;;4281   				{
;;;4282   					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
000034  2101              MOVS     r1,#1
000036  4640              MOV      r0,r8
000038  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;4283   					traceTASK_NOTIFY_WAIT_BLOCK();
;;;4284   
;;;4285   					/* All ports are written to allow a yield in a critical
;;;4286   					section (some will yield immediately, others wait until the
;;;4287   					critical section exits) - but it is not something that
;;;4288   					application code should ever do. */
;;;4289   					portYIELD_WITHIN_API();
00003c  4913              LDR      r1,|L42.140|
00003e  f04f5080          MOV      r0,#0x10000000
000042  6008              STR      r0,[r1,#0]
000044  f3bf8f4f          DSB      
000048  f3bf8f6f          ISB      
                  |L42.76|
;;;4290   				}
;;;4291   				else
;;;4292   				{
;;;4293   					mtCOVERAGE_TEST_MARKER();
;;;4294   				}
;;;4295   			}
;;;4296   			else
;;;4297   			{
;;;4298   				mtCOVERAGE_TEST_MARKER();
;;;4299   			}
;;;4300   		}
;;;4301   		taskEXIT_CRITICAL();
00004c  f7fffffe          BL       vPortExitCritical
;;;4302   
;;;4303   		taskENTER_CRITICAL();
000050  f7fffffe          BL       vPortEnterCritical
;;;4304   		{
;;;4305   			traceTASK_NOTIFY_WAIT();
;;;4306   
;;;4307   			if( pulNotificationValue != NULL )
000054  b116              CBZ      r6,|L42.92|
;;;4308   			{
;;;4309   				/* Output the current notification value, which may or may not
;;;4310   				have changed. */
;;;4311   				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
000056  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000058  6cc0              LDR      r0,[r0,#0x4c]
00005a  6030              STR      r0,[r6,#0]
                  |L42.92|
;;;4312   			}
;;;4313   
;;;4314   			/* If ucNotifyValue is set then either the task never entered the
;;;4315   			blocked state (because a notification was already pending) or the
;;;4316   			task unblocked because of a notification.  Otherwise the task
;;;4317   			unblocked because of a timeout. */
;;;4318   			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
00005c  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
00005e  f8900050          LDRB     r0,[r0,#0x50]
000062  2801              CMP      r0,#1
000064  d00d              BEQ      |L42.130|
;;;4319   			{
;;;4320   				/* A notification was not received. */
;;;4321   				xReturn = pdFALSE;
;;;4322   			}
;;;4323   			else
;;;4324   			{
;;;4325   				/* A notification was already pending or a notification was
;;;4326   				received while the task was waiting. */
;;;4327   				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
000066  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000068  6cc1              LDR      r1,[r0,#0x4c]
00006a  43b9              BICS     r1,r1,r7
00006c  64c1              STR      r1,[r0,#0x4c]
;;;4328   				xReturn = pdTRUE;
00006e  2401              MOVS     r4,#1
                  |L42.112|
;;;4329   			}
;;;4330   
;;;4331   			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
000070  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000072  2000              MOVS     r0,#0
000074  f8810050          STRB     r0,[r1,#0x50]
;;;4332   		}
;;;4333   		taskEXIT_CRITICAL();
000078  f7fffffe          BL       vPortExitCritical
;;;4334   
;;;4335   		return xReturn;
00007c  4620              MOV      r0,r4
;;;4336   	}
00007e  e8bd87f0          POP      {r4-r10,pc}
                  |L42.130|
000082  2400              MOVS     r4,#0                 ;4321
000084  e7f4              B        |L42.112|
;;;4337   
                          ENDP

000086  0000              DCW      0x0000
                  |L42.136|
                          DCD      ||.data||
                  |L42.140|
                          DCD      0xe000ed04

                          AREA ||i.xTaskPriorityDisinherit||, CODE, READONLY, ALIGN=2

                  xTaskPriorityDisinherit PROC
;;;3771   
;;;3772   	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
000000  b570              PUSH     {r4-r6,lr}
;;;3773   	{
000002  4604              MOV      r4,r0
;;;3774   	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
;;;3775   	BaseType_t xReturn = pdFALSE;
000004  2000              MOVS     r0,#0
;;;3776   
;;;3777   		if( pxMutexHolder != NULL )
000006  2c00              CMP      r4,#0
000008  d041              BEQ      |L43.142|
;;;3778   		{
;;;3779   			/* A task can only have an inherited priority if it holds the mutex.
;;;3780   			If the mutex is held by a task then it cannot be given from an
;;;3781   			interrupt, and if a mutex is given by the holding task then it must
;;;3782   			be the running state task. */
;;;3783   			configASSERT( pxTCB == pxCurrentTCB );
00000a  4d21              LDR      r5,|L43.144|
00000c  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
00000e  428c              CMP      r4,r1
000010  d007              BEQ      |L43.34|
000012  2050              MOVS     r0,#0x50
000014  f3808811          MSR      BASEPRI,r0
000018  f3bf8f4f          DSB      
00001c  f3bf8f6f          ISB      
                  |L43.32|
000020  e7fe              B        |L43.32|
                  |L43.34|
;;;3784   
;;;3785   			configASSERT( pxTCB->uxMutexesHeld );
000022  6ca1              LDR      r1,[r4,#0x48]
000024  b171              CBZ      r1,|L43.68|
;;;3786   			( pxTCB->uxMutexesHeld )--;
000026  1e49              SUBS     r1,r1,#1
000028  64a1              STR      r1,[r4,#0x48]
;;;3787   
;;;3788   			/* Has the holder of the mutex inherited the priority of another
;;;3789   			task? */
;;;3790   			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
00002a  6c63              LDR      r3,[r4,#0x44]
00002c  6ae2              LDR      r2,[r4,#0x2c]
00002e  429a              CMP      r2,r3
000030  d02d              BEQ      |L43.142|
;;;3791   			{
;;;3792   				/* Only disinherit if no other mutexes are held. */
;;;3793   				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
000032  2900              CMP      r1,#0
000034  d12b              BNE      |L43.142|
;;;3794   				{
;;;3795   					/* A task can only have an inherited priority if it holds
;;;3796   					the mutex.  If the mutex is held by a task then it cannot be
;;;3797   					given from an interrupt, and if a mutex is given by the
;;;3798   					holding	task then it must be the running state task.  Remove
;;;3799   					the	holding task from the ready	list. */
;;;3800   					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
000036  1d20              ADDS     r0,r4,#4
000038  f7fffffe          BL       uxListRemove
;;;3801   					{
;;;3802   						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
00003c  4a15              LDR      r2,|L43.148|
00003e  2101              MOVS     r1,#1
000040  b140              CBZ      r0,|L43.84|
000042  e012              B        |L43.106|
                  |L43.68|
000044  2050              MOVS     r0,#0x50              ;3800
000046  f3808811          MSR      BASEPRI,r0            ;3800
00004a  f3bf8f4f          DSB                            ;3800
00004e  f3bf8f6f          ISB                            ;3800
                  |L43.82|
000052  e7fe              B        |L43.82|
                  |L43.84|
000054  6ae0              LDR      r0,[r4,#0x2c]
000056  eb000380          ADD      r3,r0,r0,LSL #2
00005a  f8523023          LDR      r3,[r2,r3,LSL #2]
00005e  b923              CBNZ     r3,|L43.106|
000060  fa01f300          LSL      r3,r1,r0
000064  6928              LDR      r0,[r5,#0x10]  ; uxTopReadyPriority
000066  4398              BICS     r0,r0,r3
000068  6128              STR      r0,[r5,#0x10]  ; uxTopReadyPriority
                  |L43.106|
;;;3803   					}
;;;3804   					else
;;;3805   					{
;;;3806   						mtCOVERAGE_TEST_MARKER();
;;;3807   					}
;;;3808   
;;;3809   					/* Disinherit the priority before adding the task into the
;;;3810   					new	ready list. */
;;;3811   					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
;;;3812   					pxTCB->uxPriority = pxTCB->uxBasePriority;
00006a  6c60              LDR      r0,[r4,#0x44]
00006c  62e0              STR      r0,[r4,#0x2c]
;;;3813   
;;;3814   					/* Reset the event list item value.  It cannot be in use for
;;;3815   					any other purpose if this task is running, and it must be
;;;3816   					running to give back the mutex. */
;;;3817   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
00006e  f1c00007          RSB      r0,r0,#7
000072  61a0              STR      r0,[r4,#0x18]
;;;3818   					prvAddTaskToReadyList( pxTCB );
000074  6ae0              LDR      r0,[r4,#0x2c]
000076  692b              LDR      r3,[r5,#0x10]  ; uxTopReadyPriority
000078  4081              LSLS     r1,r1,r0
00007a  4319              ORRS     r1,r1,r3
00007c  6129              STR      r1,[r5,#0x10]  ; uxTopReadyPriority
00007e  eb000080          ADD      r0,r0,r0,LSL #2
000082  eb020080          ADD      r0,r2,r0,LSL #2
000086  1d21              ADDS     r1,r4,#4
000088  f7fffffe          BL       vListInsertEnd
;;;3819   
;;;3820   					/* Return true to indicate that a context switch is required.
;;;3821   					This is only actually required in the corner case whereby
;;;3822   					multiple mutexes were held and the mutexes were given back
;;;3823   					in an order different to that in which they were taken.
;;;3824   					If a context switch did not occur when the first mutex was
;;;3825   					returned, even if a task was waiting on it, then a context
;;;3826   					switch should occur when the last mutex is returned whether
;;;3827   					a task is waiting on it or not. */
;;;3828   					xReturn = pdTRUE;
00008c  2001              MOVS     r0,#1
                  |L43.142|
;;;3829   				}
;;;3830   				else
;;;3831   				{
;;;3832   					mtCOVERAGE_TEST_MARKER();
;;;3833   				}
;;;3834   			}
;;;3835   			else
;;;3836   			{
;;;3837   				mtCOVERAGE_TEST_MARKER();
;;;3838   			}
;;;3839   		}
;;;3840   		else
;;;3841   		{
;;;3842   			mtCOVERAGE_TEST_MARKER();
;;;3843   		}
;;;3844   
;;;3845   		return xReturn;
;;;3846   	}
00008e  bd70              POP      {r4-r6,pc}
;;;3847   
                          ENDP

                  |L43.144|
                          DCD      ||.data||
                  |L43.148|
                          DCD      ||.bss||

                          AREA ||i.xTaskRemoveFromEventList||, CODE, READONLY, ALIGN=2

                  xTaskRemoveFromEventList PROC
;;;2893   
;;;2894   BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2895   {
;;;2896   TCB_t *pxUnblockedTCB;
;;;2897   BaseType_t xReturn;
;;;2898   
;;;2899   	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
;;;2900   	called from a critical section within an ISR. */
;;;2901   
;;;2902   	/* The event list is sorted in priority order, so the first in the list can
;;;2903   	be removed as it is known to be the highest priority.  Remove the TCB from
;;;2904   	the delayed list, and add it to the ready list.
;;;2905   
;;;2906   	If an event is for a queue that is locked then this function will never
;;;2907   	get called - the lock count on the queue will get modified instead.  This
;;;2908   	means exclusive access to the event list is guaranteed here.
;;;2909   
;;;2910   	This function assumes that a check has already been made to ensure that
;;;2911   	pxEventList is not empty. */
;;;2912   	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
000004  68c0              LDR      r0,[r0,#0xc]
000006  68c4              LDR      r4,[r0,#0xc]
;;;2913   	configASSERT( pxUnblockedTCB );
000008  2c00              CMP      r4,#0
00000a  d015              BEQ      |L44.56|
;;;2914   	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
00000c  f1040018          ADD      r0,r4,#0x18
000010  4607              MOV      r7,r0
000012  f7fffffe          BL       uxListRemove
;;;2915   
;;;2916   	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000016  4d17              LDR      r5,|L44.116|
000018  6b2a              LDR      r2,[r5,#0x30]  ; uxSchedulerSuspended
;;;2917   	{
;;;2918   		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
;;;2919   		prvAddTaskToReadyList( pxUnblockedTCB );
00001a  2601              MOVS     r6,#1
00001c  b1a2              CBZ      r2,|L44.72|
;;;2920   	}
;;;2921   	else
;;;2922   	{
;;;2923   		/* The delayed and ready lists cannot be accessed, so hold this task
;;;2924   		pending until the scheduler is resumed. */
;;;2925   		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
00001e  4639              MOV      r1,r7
000020  4815              LDR      r0,|L44.120|
000022  f7fffffe          BL       vListInsertEnd
                  |L44.38|
;;;2926   	}
;;;2927   
;;;2928   	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
000026  6ae0              LDR      r0,[r4,#0x2c]
000028  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
00002a  6ac9              LDR      r1,[r1,#0x2c]
00002c  4288              CMP      r0,r1
00002e  d91e              BLS      |L44.110|
;;;2929   	{
;;;2930   		/* Return true if the task removed from the event list has a higher
;;;2931   		priority than the calling task.  This allows the calling task to know if
;;;2932   		it should force a context switch now. */
;;;2933   		xReturn = pdTRUE;
000030  2001              MOVS     r0,#1
;;;2934   
;;;2935   		/* Mark that a yield is pending in case the user is not using the
;;;2936   		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
;;;2937   		xYieldPending = pdTRUE;
000032  61ee              STR      r6,[r5,#0x1c]  ; xYieldPending
                  |L44.52|
;;;2938   	}
;;;2939   	else
;;;2940   	{
;;;2941   		xReturn = pdFALSE;
;;;2942   	}
;;;2943   
;;;2944   	#if( configUSE_TICKLESS_IDLE != 0 )
;;;2945   	{
;;;2946   		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
;;;2947   		might be set to the blocked task's time out time.  If the task is
;;;2948   		unblocked for a reason other than a timeout xNextTaskUnblockTime is
;;;2949   		normally left unchanged, because it is automatically reset to a new
;;;2950   		value when the tick count equals xNextTaskUnblockTime.  However if
;;;2951   		tickless idling is used it might be more important to enter sleep mode
;;;2952   		at the earliest possible time - so reset xNextTaskUnblockTime here to
;;;2953   		ensure it is updated at the earliest possible time. */
;;;2954   		prvResetNextTaskUnblockTime();
;;;2955   	}
;;;2956   	#endif
;;;2957   
;;;2958   	return xReturn;
;;;2959   }
000034  e8bd81f0          POP      {r4-r8,pc}
                  |L44.56|
000038  2050              MOVS     r0,#0x50
00003a  f3808811          MSR      BASEPRI,r0
00003e  f3bf8f4f          DSB      
000042  f3bf8f6f          ISB      
                  |L44.70|
000046  e7fe              B        |L44.70|
                  |L44.72|
000048  1d20              ADDS     r0,r4,#4              ;2918
00004a  f7fffffe          BL       uxListRemove
00004e  6ae0              LDR      r0,[r4,#0x2c]         ;2919
000050  692a              LDR      r2,[r5,#0x10]         ;2919  ; uxTopReadyPriority
000052  fa06f100          LSL      r1,r6,r0              ;2919
000056  4311              ORRS     r1,r1,r2              ;2919
000058  6129              STR      r1,[r5,#0x10]         ;2919  ; uxTopReadyPriority
00005a  4907              LDR      r1,|L44.120|
00005c  eb000080          ADD      r0,r0,r0,LSL #2       ;2919
000060  39b4              SUBS     r1,r1,#0xb4           ;2919
000062  eb010080          ADD      r0,r1,r0,LSL #2       ;2919
000066  1d21              ADDS     r1,r4,#4              ;2919
000068  f7fffffe          BL       vListInsertEnd
00006c  e7db              B        |L44.38|
                  |L44.110|
00006e  2000              MOVS     r0,#0                 ;2941
000070  e7e0              B        |L44.52|
;;;2960   /*-----------------------------------------------------------*/
                          ENDP

000072  0000              DCW      0x0000
                  |L44.116|
                          DCD      ||.data||
                  |L44.120|
                          DCD      ||.bss||+0xb4

                          AREA ||i.xTaskRemoveFromUnorderedEventList||, CODE, READONLY, ALIGN=2

                  xTaskRemoveFromUnorderedEventList PROC
;;;2961   
;;;2962   BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
000000  b570              PUSH     {r4-r6,lr}
;;;2963   {
;;;2964   TCB_t *pxUnblockedTCB;
;;;2965   BaseType_t xReturn;
;;;2966   
;;;2967   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
;;;2968   	the event flags implementation. */
;;;2969   	configASSERT( uxSchedulerSuspended != pdFALSE );
000002  4d1b              LDR      r5,|L45.112|
000004  6b2a              LDR      r2,[r5,#0x30]  ; uxSchedulerSuspended
000006  2a00              CMP      r2,#0
000008  d020              BEQ      |L45.76|
;;;2970   
;;;2971   	/* Store the new item value in the event list. */
;;;2972   	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
00000a  f0414100          ORR      r1,r1,#0x80000000
00000e  6001              STR      r1,[r0,#0]
;;;2973   
;;;2974   	/* Remove the event list form the event flag.  Interrupts do not access
;;;2975   	event flags. */
;;;2976   	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
000010  68c4              LDR      r4,[r0,#0xc]
;;;2977   	configASSERT( pxUnblockedTCB );
000012  b31c              CBZ      r4,|L45.92|
;;;2978   	( void ) uxListRemove( pxEventListItem );
000014  f7fffffe          BL       uxListRemove
;;;2979   
;;;2980   	/* Remove the task from the delayed list and add it to the ready list.  The
;;;2981   	scheduler is suspended so interrupts will not be accessing the ready
;;;2982   	lists. */
;;;2983   	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
000018  1d20              ADDS     r0,r4,#4
00001a  f7fffffe          BL       uxListRemove
;;;2984   	prvAddTaskToReadyList( pxUnblockedTCB );
00001e  6ae0              LDR      r0,[r4,#0x2c]
000020  2601              MOVS     r6,#1
000022  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
000024  fa06f100          LSL      r1,r6,r0
000028  4311              ORRS     r1,r1,r2
00002a  6129              STR      r1,[r5,#0x10]  ; uxTopReadyPriority
00002c  4911              LDR      r1,|L45.116|
00002e  eb000080          ADD      r0,r0,r0,LSL #2
000032  eb010080          ADD      r0,r1,r0,LSL #2
000036  1d21              ADDS     r1,r4,#4
000038  f7fffffe          BL       vListInsertEnd
;;;2985   
;;;2986   	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
00003c  6ae0              LDR      r0,[r4,#0x2c]
00003e  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000040  6ac9              LDR      r1,[r1,#0x2c]
000042  4288              CMP      r0,r1
000044  d912              BLS      |L45.108|
;;;2987   	{
;;;2988   		/* Return true if the task removed from the event list has
;;;2989   		a higher priority than the calling task.  This allows
;;;2990   		the calling task to know if it should force a context
;;;2991   		switch now. */
;;;2992   		xReturn = pdTRUE;
000046  2001              MOVS     r0,#1
;;;2993   
;;;2994   		/* Mark that a yield is pending in case the user is not using the
;;;2995   		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
;;;2996   		xYieldPending = pdTRUE;
000048  61ee              STR      r6,[r5,#0x1c]  ; xYieldPending
;;;2997   	}
;;;2998   	else
;;;2999   	{
;;;3000   		xReturn = pdFALSE;
;;;3001   	}
;;;3002   
;;;3003   	return xReturn;
;;;3004   }
00004a  bd70              POP      {r4-r6,pc}
                  |L45.76|
00004c  2050              MOVS     r0,#0x50
00004e  f3808811          MSR      BASEPRI,r0
000052  f3bf8f4f          DSB      
000056  f3bf8f6f          ISB      
                  |L45.90|
00005a  e7fe              B        |L45.90|
                  |L45.92|
00005c  2050              MOVS     r0,#0x50              ;2969
00005e  f3808811          MSR      BASEPRI,r0            ;2969
000062  f3bf8f4f          DSB                            ;2969
000066  f3bf8f6f          ISB                            ;2969
                  |L45.106|
00006a  e7fe              B        |L45.106|
                  |L45.108|
00006c  2000              MOVS     r0,#0                 ;3000
00006e  bd70              POP      {r4-r6,pc}
;;;3005   /*-----------------------------------------------------------*/
                          ENDP

                  |L45.112|
                          DCD      ||.data||
                  |L45.116|
                          DCD      ||.bss||

                          AREA ||i.xTaskResumeAll||, CODE, READONLY, ALIGN=2

                  xTaskResumeAll PROC
;;;2016   
;;;2017   BaseType_t xTaskResumeAll( void )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2018   {
;;;2019   TCB_t *pxTCB = NULL;
000004  2400              MOVS     r4,#0
;;;2020   BaseType_t xAlreadyYielded = pdFALSE;
000006  2700              MOVS     r7,#0
;;;2021   
;;;2022   	/* If uxSchedulerSuspended is zero then this function does not match a
;;;2023   	previous call to vTaskSuspendAll(). */
;;;2024   	configASSERT( uxSchedulerSuspended );
000008  4d2d              LDR      r5,|L46.192|
00000a  6b28              LDR      r0,[r5,#0x30]  ; uxSchedulerSuspended
00000c  2800              CMP      r0,#0
00000e  d007              BEQ      |L46.32|
;;;2025   
;;;2026   	/* It is possible that an ISR caused a task to be removed from an event
;;;2027   	list while the scheduler was suspended.  If this was the case then the
;;;2028   	removed task will have been added to the xPendingReadyList.  Once the
;;;2029   	scheduler has been resumed it is safe to move all the pending ready
;;;2030   	tasks from this list into their appropriate ready list. */
;;;2031   	taskENTER_CRITICAL();
000010  f7fffffe          BL       vPortEnterCritical
;;;2032   	{
;;;2033   		--uxSchedulerSuspended;
000014  6b28              LDR      r0,[r5,#0x30]  ; uxSchedulerSuspended
000016  1e40              SUBS     r0,r0,#1
000018  6328              STR      r0,[r5,#0x30]  ; uxSchedulerSuspended
;;;2034   
;;;2035   		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
00001a  6b28              LDR      r0,[r5,#0x30]  ; uxSchedulerSuspended
00001c  b140              CBZ      r0,|L46.48|
00001e  e04a              B        |L46.182|
                  |L46.32|
000020  2050              MOVS     r0,#0x50
000022  f3808811          MSR      BASEPRI,r0
000026  f3bf8f4f          DSB      
00002a  f3bf8f6f          ISB      
                  |L46.46|
00002e  e7fe              B        |L46.46|
                  |L46.48|
;;;2036   		{
;;;2037   			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
000030  68a8              LDR      r0,[r5,#8]  ; uxCurrentNumberOfTasks
000032  b3e8              CBZ      r0,|L46.176|
;;;2038   			{
;;;2039   				/* Move any readied tasks from the pending list into the
;;;2040   				appropriate ready list. */
;;;2041   				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
;;;2042   				{
;;;2043   					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
000034  f8df808c          LDR      r8,|L46.196|
;;;2044   					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
;;;2045   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
;;;2046   					prvAddTaskToReadyList( pxTCB );
000038  2601              MOVS     r6,#1
00003a  e01e              B        |L46.122|
                  |L46.60|
00003c  f8d8000c          LDR      r0,[r8,#0xc]          ;2043  ; xPendingReadyList
000040  68c4              LDR      r4,[r0,#0xc]          ;2043
000042  f1040018          ADD      r0,r4,#0x18           ;2044
000046  f7fffffe          BL       uxListRemove
00004a  1d20              ADDS     r0,r4,#4              ;2045
00004c  f7fffffe          BL       uxListRemove
000050  6ae0              LDR      r0,[r4,#0x2c]
000052  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
000054  fa06f100          LSL      r1,r6,r0
000058  4311              ORRS     r1,r1,r2
00005a  6129              STR      r1,[r5,#0x10]  ; uxTopReadyPriority
00005c  4919              LDR      r1,|L46.196|
00005e  eb000080          ADD      r0,r0,r0,LSL #2
000062  39b4              SUBS     r1,r1,#0xb4
000064  eb010080          ADD      r0,r1,r0,LSL #2
000068  1d21              ADDS     r1,r4,#4
00006a  f7fffffe          BL       vListInsertEnd
;;;2047   
;;;2048   					/* If the moved task has a priority higher than the current
;;;2049   					task then a yield must be performed. */
;;;2050   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
00006e  6ae0              LDR      r0,[r4,#0x2c]
000070  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000072  6ac9              LDR      r1,[r1,#0x2c]
000074  4288              CMP      r0,r1
000076  d300              BCC      |L46.122|
;;;2051   					{
;;;2052   						xYieldPending = pdTRUE;
000078  61ee              STR      r6,[r5,#0x1c]  ; xYieldPending
                  |L46.122|
00007a  f8d80000          LDR      r0,[r8,#0]            ;2041  ; xPendingReadyList
00007e  2800              CMP      r0,#0                 ;2041
000080  d1dc              BNE      |L46.60|
;;;2053   					}
;;;2054   					else
;;;2055   					{
;;;2056   						mtCOVERAGE_TEST_MARKER();
;;;2057   					}
;;;2058   				}
;;;2059   
;;;2060   				if( pxTCB != NULL )
000082  b10c              CBZ      r4,|L46.136|
;;;2061   				{
;;;2062   					/* A task was unblocked while the scheduler was suspended,
;;;2063   					which may have prevented the next unblock time from being
;;;2064   					re-calculated, in which case re-calculate it now.  Mainly
;;;2065   					important for low power tickless implementations, where
;;;2066   					this can prevent an unnecessary exit from low power
;;;2067   					state. */
;;;2068   					prvResetNextTaskUnblockTime();
000084  f7fffffe          BL       prvResetNextTaskUnblockTime
                  |L46.136|
;;;2069   				}
;;;2070   
;;;2071   				/* If any ticks occurred while the scheduler was suspended then
;;;2072   				they should be processed now.  This ensures the tick count does
;;;2073   				not	slip, and that any delayed tasks are resumed at the correct
;;;2074   				time. */
;;;2075   				{
;;;2076   					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
000088  69ac              LDR      r4,[r5,#0x18]  ; uxPendedTicks
;;;2077   
;;;2078   					if( uxPendedCounts > ( UBaseType_t ) 0U )
00008a  b144              CBZ      r4,|L46.158|
                  |L46.140|
;;;2079   					{
;;;2080   						do
;;;2081   						{
;;;2082   							if( xTaskIncrementTick() != pdFALSE )
00008c  f7fffffe          BL       xTaskIncrementTick
000090  b100              CBZ      r0,|L46.148|
;;;2083   							{
;;;2084   								xYieldPending = pdTRUE;
000092  61ee              STR      r6,[r5,#0x1c]  ; xYieldPending
                  |L46.148|
;;;2085   							}
;;;2086   							else
;;;2087   							{
;;;2088   								mtCOVERAGE_TEST_MARKER();
;;;2089   							}
;;;2090   							--uxPendedCounts;
000094  1e64              SUBS     r4,r4,#1
;;;2091   						} while( uxPendedCounts > ( UBaseType_t ) 0U );
000096  2c00              CMP      r4,#0
000098  d1f8              BNE      |L46.140|
;;;2092   
;;;2093   						uxPendedTicks = 0;
00009a  2000              MOVS     r0,#0
00009c  61a8              STR      r0,[r5,#0x18]  ; uxPendedTicks
                  |L46.158|
;;;2094   					}
;;;2095   					else
;;;2096   					{
;;;2097   						mtCOVERAGE_TEST_MARKER();
;;;2098   					}
;;;2099   				}
;;;2100   
;;;2101   				if( xYieldPending != pdFALSE )
00009e  69e8              LDR      r0,[r5,#0x1c]  ; xYieldPending
0000a0  b130              CBZ      r0,|L46.176|
;;;2102   				{
;;;2103   					#if( configUSE_PREEMPTION != 0 )
;;;2104   					{
;;;2105   						xAlreadyYielded = pdTRUE;
0000a2  2701              MOVS     r7,#1
;;;2106   					}
;;;2107   					#endif
;;;2108   					taskYIELD_IF_USING_PREEMPTION();
0000a4  4908              LDR      r1,|L46.200|
0000a6  0738              LSLS     r0,r7,#28
0000a8  6008              STR      r0,[r1,#0]
0000aa  f3bf8f4f          DSB      
0000ae  e000              B        |L46.178|
                  |L46.176|
0000b0  e001              B        |L46.182|
                  |L46.178|
0000b2  f3bf8f6f          ISB      
                  |L46.182|
;;;2109   				}
;;;2110   				else
;;;2111   				{
;;;2112   					mtCOVERAGE_TEST_MARKER();
;;;2113   				}
;;;2114   			}
;;;2115   		}
;;;2116   		else
;;;2117   		{
;;;2118   			mtCOVERAGE_TEST_MARKER();
;;;2119   		}
;;;2120   	}
;;;2121   	taskEXIT_CRITICAL();
0000b6  f7fffffe          BL       vPortExitCritical
;;;2122   
;;;2123   	return xAlreadyYielded;
0000ba  4638              MOV      r0,r7
;;;2124   }
0000bc  e8bd81f0          POP      {r4-r8,pc}
;;;2125   /*-----------------------------------------------------------*/
                          ENDP

                  |L46.192|
                          DCD      ||.data||
                  |L46.196|
                          DCD      ||.bss||+0xb4
                  |L46.200|
                          DCD      0xe000ed04

                          AREA ||i.xTaskResumeFromISR||, CODE, READONLY, ALIGN=2

                  xTaskResumeFromISR PROC
;;;1755   
;;;1756   	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1757   	{
;;;1758   	BaseType_t xYieldRequired = pdFALSE;
000004  2600              MOVS     r6,#0
;;;1759   	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
000006  4604              MOV      r4,r0
;;;1760   	UBaseType_t uxSavedInterruptStatus;
;;;1761   
;;;1762   		configASSERT( xTaskToResume );
000008  2800              CMP      r0,#0
00000a  d01b              BEQ      |L47.68|
;;;1763   
;;;1764   		/* RTOS ports that support interrupt nesting have the concept of a
;;;1765   		maximum	system call (or maximum API call) interrupt priority.
;;;1766   		Interrupts that are	above the maximum system call priority are keep
;;;1767   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;1768   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;1769   		is defined in FreeRTOSConfig.h then
;;;1770   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1771   		failure if a FreeRTOS API function is called from an interrupt that has
;;;1772   		been assigned a priority above the configured maximum system call
;;;1773   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;1774   		from interrupts	that have been assigned a priority at or (logically)
;;;1775   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;1776   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;1777   		simple as possible.  More information (albeit Cortex-M specific) is
;;;1778   		provided on the following link:
;;;1779   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1780   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
00000c  f7fffffe          BL       vPortValidateInterruptPriority
000010  2050              MOVS     r0,#0x50
000012  f3ef8511          MRS      r5,BASEPRI
000016  f3808811          MSR      BASEPRI,r0
00001a  f3bf8f4f          DSB      
00001e  f3bf8f6f          ISB      
;;;1781   
;;;1782   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
;;;1783   		{
;;;1784   			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       prvTaskIsTaskSuspended
000028  b138              CBZ      r0,|L47.58|
;;;1785   			{
;;;1786   				traceTASK_RESUME_FROM_ISR( pxTCB );
;;;1787   
;;;1788   				/* Check the ready lists can be accessed. */
;;;1789   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
00002a  4f17              LDR      r7,|L47.136|
00002c  6b38              LDR      r0,[r7,#0x30]  ; uxSchedulerSuspended
00002e  b188              CBZ      r0,|L47.84|
;;;1790   				{
;;;1791   					/* Ready lists can be accessed so move the task from the
;;;1792   					suspended list to the ready list directly. */
;;;1793   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
;;;1794   					{
;;;1795   						xYieldRequired = pdTRUE;
;;;1796   					}
;;;1797   					else
;;;1798   					{
;;;1799   						mtCOVERAGE_TEST_MARKER();
;;;1800   					}
;;;1801   
;;;1802   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
;;;1803   					prvAddTaskToReadyList( pxTCB );
;;;1804   				}
;;;1805   				else
;;;1806   				{
;;;1807   					/* The delayed or ready lists cannot be accessed so the task
;;;1808   					is held in the pending ready list until the scheduler is
;;;1809   					unsuspended. */
;;;1810   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
000030  f1040118          ADD      r1,r4,#0x18
000034  4815              LDR      r0,|L47.140|
000036  f7fffffe          BL       vListInsertEnd
                  |L47.58|
00003a  f3858811          MSR      BASEPRI,r5
;;;1811   				}
;;;1812   			}
;;;1813   			else
;;;1814   			{
;;;1815   				mtCOVERAGE_TEST_MARKER();
;;;1816   			}
;;;1817   		}
;;;1818   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;1819   
;;;1820   		return xYieldRequired;
00003e  4630              MOV      r0,r6
;;;1821   	}
000040  e8bd81f0          POP      {r4-r8,pc}
                  |L47.68|
000044  2050              MOVS     r0,#0x50
000046  f3808811          MSR      BASEPRI,r0
00004a  f3bf8f4f          DSB      
00004e  f3bf8f6f          ISB      
                  |L47.82|
000052  e7fe              B        |L47.82|
                  |L47.84|
000054  6ae0              LDR      r0,[r4,#0x2c]         ;1793
000056  6839              LDR      r1,[r7,#0]            ;1793  ; pxCurrentTCB
000058  6ac9              LDR      r1,[r1,#0x2c]         ;1793
00005a  4288              CMP      r0,r1                 ;1793
00005c  d300              BCC      |L47.96|
00005e  2601              MOVS     r6,#1                 ;1795
                  |L47.96|
000060  1d20              ADDS     r0,r4,#4              ;1802
000062  f7fffffe          BL       uxListRemove
000066  6ae0              LDR      r0,[r4,#0x2c]         ;1803
000068  2101              MOVS     r1,#1                 ;1803
00006a  693a              LDR      r2,[r7,#0x10]         ;1803  ; uxTopReadyPriority
00006c  4081              LSLS     r1,r1,r0              ;1803
00006e  4311              ORRS     r1,r1,r2              ;1803
000070  6139              STR      r1,[r7,#0x10]         ;1803  ; uxTopReadyPriority
000072  4906              LDR      r1,|L47.140|
000074  eb000080          ADD      r0,r0,r0,LSL #2       ;1803
000078  39b4              SUBS     r1,r1,#0xb4           ;1803
00007a  eb010080          ADD      r0,r1,r0,LSL #2       ;1803
00007e  1d21              ADDS     r1,r4,#4              ;1803
000080  f7fffffe          BL       vListInsertEnd
000084  e7d9              B        |L47.58|
;;;1822   
                          ENDP

000086  0000              DCW      0x0000
                  |L47.136|
                          DCD      ||.data||
                  |L47.140|
                          DCD      ||.bss||+0xb4

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pxReadyTasksLists
                          %        140
                  xDelayedTaskList1
                          %        20
                  xDelayedTaskList2
                          %        20
                  xPendingReadyList
                          %        20
                  xTasksWaitingTermination
                          %        20
                  xSuspendedTaskList
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  pxCurrentTCB
                          DCD      0x00000000
                  uxDeletedTasksWaitingCleanUp
                          DCD      0x00000000
                  uxCurrentNumberOfTasks
                          DCD      0x00000000
                  xTickCount
                          DCD      0x00000000
                  uxTopReadyPriority
                          DCD      0x00000000
                  xSchedulerRunning
                          DCD      0x00000000
                  uxPendedTicks
                          DCD      0x00000000
                  xYieldPending
                          DCD      0x00000000
                  xNumOfOverflows
                          DCD      0x00000000
                  uxTaskNumber
                          DCD      0x00000000
                  xNextTaskUnblockTime
                          DCD      0x00000000
                  xIdleTaskHandle
                          DCD      0x00000000
                  uxSchedulerSuspended
                          DCD      0x00000000
                  pxDelayedTaskList
                          DCD      0x00000000
                  pxOverflowDelayedTaskList
                          DCD      0x00000000
