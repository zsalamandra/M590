; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -ogsm_stm32f103\stm32f1xx_hal_rcc.o --asm_dir=..\..\list\ --list_dir=..\..\list\ --depend=gsm_stm32f103\stm32f1xx_hal_rcc.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I..\Hardware\SSD1306 -I..\Hardware\delay -I..\Hardware\GSM_LIB\GENERAL -I..\Hardware\GSM_LIB\USART -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM3 -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS -IE:\MC\2.STM32\STMProjects\GSM\M590\Project\Keil\gsm_stm32f103\MDK-ARM\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=gsm_stm32f103\stm32f1xx_hal_rcc.crf ..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rcc.c]
                          THUMB

                          AREA ||i.HAL_RCC_CSSCallback||, CODE, READONLY, ALIGN=1

                  HAL_RCC_CSSCallback PROC
;;;1278     */
;;;1279   __weak void HAL_RCC_CSSCallback(void)
000000  4770              BX       lr
;;;1280   {
;;;1281     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1282       the HAL_RCC_CSSCallback could be implemented in the user file
;;;1283       */ 
;;;1284   }
;;;1285   
                          ENDP


                          AREA ||i.HAL_RCC_ClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_ClockConfig PROC
;;;708      */
;;;709    HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;710    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;711      uint32_t tickstart = 0U;
;;;712      
;;;713      /* Check the parameters */
;;;714      assert_param(RCC_ClkInitStruct != NULL);
;;;715      assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
;;;716      assert_param(IS_FLASH_LATENCY(FLatency));
;;;717    
;;;718      /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
;;;719      must be correctly programmed according to the frequency of the CPU clock 
;;;720        (HCLK) of the device. */
;;;721    
;;;722    #if defined(FLASH_ACR_LATENCY)
;;;723      /* Increasing the number of wait states because of higher CPU frequency */
;;;724      if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
000008  f8df8148          LDR      r8,|L2.340|
00000c  f8d80000          LDR      r0,[r8,#0]
000010  f0000007          AND      r0,r0,#7
000014  42b0              CMP      r0,r6
000016  d20f              BCS      |L2.56|
;;;725      {    
;;;726        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;727        __HAL_FLASH_SET_LATENCY(FLatency);
000018  f8d80000          LDR      r0,[r8,#0]
00001c  f0200007          BIC      r0,r0,#7
000020  4330              ORRS     r0,r0,r6
000022  f8c80000          STR      r0,[r8,#0]
;;;728        
;;;729        /* Check that the new number of wait states is taken into account to access the Flash
;;;730        memory by reading the FLASH_ACR register */
;;;731        if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
000026  f8d80000          LDR      r0,[r8,#0]
00002a  f0000007          AND      r0,r0,#7
00002e  42b0              CMP      r0,r6
000030  d002              BEQ      |L2.56|
;;;732        {
;;;733          return HAL_ERROR;
000032  2001              MOVS     r0,#1
                  |L2.52|
;;;734        }
;;;735      }
;;;736    
;;;737    #endif /* FLASH_ACR_LATENCY */
;;;738      /*-------------------------- HCLK Configuration --------------------------*/
;;;739      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
;;;740      {
;;;741        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
;;;742        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
;;;743      }
;;;744    
;;;745      /*------------------------- SYSCLK Configuration ---------------------------*/ 
;;;746      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
;;;747      {    
;;;748        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
;;;749        
;;;750        /* HSE is selected as System Clock Source */
;;;751        if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;752        {
;;;753          /* Check the HSE ready flag */  
;;;754          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;755          {
;;;756            return HAL_ERROR;
;;;757          }
;;;758        }
;;;759        /* PLL is selected as System Clock Source */
;;;760        else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
;;;761        {
;;;762          /* Check the PLL ready flag */  
;;;763          if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;764          {
;;;765            return HAL_ERROR;
;;;766          }
;;;767        }
;;;768        /* HSI is selected as System Clock Source */
;;;769        else
;;;770        {
;;;771          /* Check the HSI ready flag */  
;;;772          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;773          {
;;;774            return HAL_ERROR;
;;;775          }
;;;776        }
;;;777        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
;;;778    
;;;779        /* Get Start Tick */
;;;780        tickstart = HAL_GetTick();
;;;781        
;;;782        if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;783        {
;;;784          while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
;;;785          {
;;;786            if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;787            {
;;;788              return HAL_TIMEOUT;
;;;789            }
;;;790          }
;;;791        }
;;;792        else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
;;;793        {
;;;794          while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;795          {
;;;796            if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;797            {
;;;798              return HAL_TIMEOUT;
;;;799            }
;;;800          }
;;;801        }
;;;802        else
;;;803        {
;;;804          while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
;;;805          {
;;;806            if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;807            {
;;;808              return HAL_TIMEOUT;
;;;809            }
;;;810          }
;;;811        }      
;;;812      }    
;;;813    #if defined(FLASH_ACR_LATENCY)
;;;814      /* Decreasing the number of wait states because of lower CPU frequency */
;;;815      if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
;;;816      {    
;;;817        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;818        __HAL_FLASH_SET_LATENCY(FLatency);
;;;819        
;;;820        /* Check that the new number of wait states is taken into account to access the Flash
;;;821        memory by reading the FLASH_ACR register */
;;;822        if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
;;;823        {
;;;824          return HAL_ERROR;
;;;825        }
;;;826      }    
;;;827    #endif /* FLASH_ACR_LATENCY */
;;;828    
;;;829      /*-------------------------- PCLK1 Configuration ---------------------------*/ 
;;;830      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;831      {
;;;832        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
;;;833        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
;;;834      }
;;;835      
;;;836      /*-------------------------- PCLK2 Configuration ---------------------------*/ 
;;;837      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;838      {
;;;839        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
;;;840        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
;;;841      }
;;;842     
;;;843      /* Update the SystemCoreClock global variable */
;;;844      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
;;;845    
;;;846      /* Configure the source of time base considering new system clocks settings*/
;;;847      HAL_InitTick (TICK_INT_PRIORITY);
;;;848      
;;;849      return HAL_OK;
;;;850    }
000034  e8bd87f0          POP      {r4-r10,pc}
                  |L2.56|
000038  7820              LDRB     r0,[r4,#0]            ;739
00003a  4f47              LDR      r7,|L2.344|
00003c  0780              LSLS     r0,r0,#30             ;739
00003e  d505              BPL      |L2.76|
000040  6878              LDR      r0,[r7,#4]            ;742
000042  68a1              LDR      r1,[r4,#8]            ;742
000044  f02000f0          BIC      r0,r0,#0xf0           ;742
000048  4308              ORRS     r0,r0,r1              ;742
00004a  6078              STR      r0,[r7,#4]            ;742
                  |L2.76|
00004c  7820              LDRB     r0,[r4,#0]            ;746
00004e  07c0              LSLS     r0,r0,#31             ;746
000050  d048              BEQ      |L2.228|
000052  6860              LDR      r0,[r4,#4]            ;751
000054  2801              CMP      r0,#1                 ;751
000056  d006              BEQ      |L2.102|
000058  2802              CMP      r0,#2                 ;760
00005a  d009              BEQ      |L2.112|
00005c  6839              LDR      r1,[r7,#0]            ;772
00005e  0789              LSLS     r1,r1,#30             ;772
000060  d40b              BMI      |L2.122|
000062  2001              MOVS     r0,#1                 ;774
000064  e7e6              B        |L2.52|
                  |L2.102|
000066  6839              LDR      r1,[r7,#0]            ;754
000068  0389              LSLS     r1,r1,#14             ;754
00006a  d406              BMI      |L2.122|
00006c  2001              MOVS     r0,#1                 ;756
00006e  e7e1              B        |L2.52|
                  |L2.112|
000070  6839              LDR      r1,[r7,#0]            ;763
000072  0189              LSLS     r1,r1,#6              ;763
000074  d401              BMI      |L2.122|
000076  2001              MOVS     r0,#1                 ;765
000078  e7dc              B        |L2.52|
                  |L2.122|
00007a  6879              LDR      r1,[r7,#4]            ;777
00007c  f0210103          BIC      r1,r1,#3              ;777
000080  4301              ORRS     r1,r1,r0              ;777
000082  6079              STR      r1,[r7,#4]            ;777
000084  f7fffffe          BL       HAL_GetTick
000088  4605              MOV      r5,r0                 ;780
00008a  6860              LDR      r0,[r4,#4]            ;782
00008c  f2413988          MOV      r9,#0x1388            ;786
000090  2801              CMP      r0,#1                 ;782
000092  d009              BEQ      |L2.168|
000094  2802              CMP      r0,#2                 ;792
000096  d014              BEQ      |L2.194|
000098  e020              B        |L2.220|
                  |L2.154|
00009a  f7fffffe          BL       HAL_GetTick
00009e  1b40              SUBS     r0,r0,r5              ;786
0000a0  4548              CMP      r0,r9                 ;786
0000a2  d901              BLS      |L2.168|
0000a4  2003              MOVS     r0,#3                 ;788
0000a6  e7c5              B        |L2.52|
                  |L2.168|
0000a8  6878              LDR      r0,[r7,#4]            ;784
0000aa  f3c00081          UBFX     r0,r0,#2,#2           ;784
0000ae  2801              CMP      r0,#1                 ;784
0000b0  d1f3              BNE      |L2.154|
0000b2  e017              B        |L2.228|
                  |L2.180|
0000b4  f7fffffe          BL       HAL_GetTick
0000b8  1b40              SUBS     r0,r0,r5              ;796
0000ba  4548              CMP      r0,r9                 ;796
0000bc  d901              BLS      |L2.194|
0000be  2003              MOVS     r0,#3                 ;798
0000c0  e7b8              B        |L2.52|
                  |L2.194|
0000c2  6878              LDR      r0,[r7,#4]            ;794
0000c4  f3c00081          UBFX     r0,r0,#2,#2           ;794
0000c8  2802              CMP      r0,#2                 ;794
0000ca  d1f3              BNE      |L2.180|
0000cc  e00a              B        |L2.228|
                  |L2.206|
0000ce  f7fffffe          BL       HAL_GetTick
0000d2  1b40              SUBS     r0,r0,r5              ;806
0000d4  4548              CMP      r0,r9                 ;806
0000d6  d901              BLS      |L2.220|
0000d8  2003              MOVS     r0,#3                 ;808
0000da  e7ab              B        |L2.52|
                  |L2.220|
0000dc  6878              LDR      r0,[r7,#4]            ;804
0000de  f0100f0c          TST      r0,#0xc               ;804
0000e2  d1f4              BNE      |L2.206|
                  |L2.228|
0000e4  f8d80000          LDR      r0,[r8,#0]            ;815
0000e8  f0000007          AND      r0,r0,#7              ;815
0000ec  42b0              CMP      r0,r6                 ;815
0000ee  d90e              BLS      |L2.270|
0000f0  f8d80000          LDR      r0,[r8,#0]            ;818
0000f4  f0200007          BIC      r0,r0,#7              ;818
0000f8  4330              ORRS     r0,r0,r6              ;818
0000fa  f8c80000          STR      r0,[r8,#0]            ;818
0000fe  f8d80000          LDR      r0,[r8,#0]            ;822
000102  f0000007          AND      r0,r0,#7              ;822
000106  42b0              CMP      r0,r6                 ;822
000108  d001              BEQ      |L2.270|
00010a  2001              MOVS     r0,#1                 ;824
00010c  e792              B        |L2.52|
                  |L2.270|
00010e  7820              LDRB     r0,[r4,#0]            ;830
000110  0740              LSLS     r0,r0,#29             ;830
000112  d505              BPL      |L2.288|
000114  6878              LDR      r0,[r7,#4]            ;833
000116  68e1              LDR      r1,[r4,#0xc]          ;833
000118  f42060e0          BIC      r0,r0,#0x700          ;833
00011c  4308              ORRS     r0,r0,r1              ;833
00011e  6078              STR      r0,[r7,#4]            ;833
                  |L2.288|
000120  7820              LDRB     r0,[r4,#0]            ;837
000122  0700              LSLS     r0,r0,#28             ;837
000124  d506              BPL      |L2.308|
000126  6878              LDR      r0,[r7,#4]            ;840
000128  6921              LDR      r1,[r4,#0x10]         ;840
00012a  f4205060          BIC      r0,r0,#0x3800         ;840
00012e  ea4000c1          ORR      r0,r0,r1,LSL #3       ;840
000132  6078              STR      r0,[r7,#4]            ;840
                  |L2.308|
000134  f7fffffe          BL       HAL_RCC_GetSysClockFreq
000138  6879              LDR      r1,[r7,#4]            ;844
00013a  4a08              LDR      r2,|L2.348|
00013c  f3c11103          UBFX     r1,r1,#4,#4           ;844
000140  5c51              LDRB     r1,[r2,r1]            ;844
000142  40c8              LSRS     r0,r0,r1              ;844
000144  4906              LDR      r1,|L2.352|
000146  6008              STR      r0,[r1,#0]            ;844  ; SystemCoreClock
000148  200f              MOVS     r0,#0xf               ;847
00014a  f7fffffe          BL       HAL_InitTick
00014e  2000              MOVS     r0,#0                 ;849
000150  e770              B        |L2.52|
;;;851    
                          ENDP

000152  0000              DCW      0x0000
                  |L2.340|
                          DCD      0x40022000
                  |L2.344|
                          DCD      0x40021000
                  |L2.348|
                          DCD      AHBPrescTable
                  |L2.352|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DeInit PROC
;;;218      */
;;;219    void HAL_RCC_DeInit(void)
000000  480c              LDR      r0,|L3.52|
;;;220    {
;;;221      /* Switch SYSCLK to HSI */
;;;222      CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);
000002  6841              LDR      r1,[r0,#4]
000004  f0210103          BIC      r1,r1,#3
000008  6041              STR      r1,[r0,#4]
;;;223    
;;;224      /* Reset HSEON, CSSON, & PLLON bits */
;;;225      CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON);
00000a  6801              LDR      r1,[r0,#0]
00000c  4a0a              LDR      r2,|L3.56|
00000e  4011              ANDS     r1,r1,r2
000010  6001              STR      r1,[r0,#0]
;;;226      
;;;227      /* Reset HSEBYP bit */
;;;228      CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
000012  6801              LDR      r1,[r0,#0]
000014  f4212180          BIC      r1,r1,#0x40000
000018  6001              STR      r1,[r0,#0]
;;;229      
;;;230      /* Reset CFGR register */
;;;231      CLEAR_REG(RCC->CFGR);
00001a  2100              MOVS     r1,#0
00001c  6041              STR      r1,[r0,#4]
;;;232      
;;;233      /* Set HSITRIM bits to the reset value */
;;;234      MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
00001e  6802              LDR      r2,[r0,#0]
000020  f02202f8          BIC      r2,r2,#0xf8
000024  f0420280          ORR      r2,r2,#0x80
000028  6002              STR      r2,[r0,#0]
;;;235      
;;;236    #if defined(RCC_CFGR2_SUPPORT)
;;;237      /* Reset CFGR2 register */
;;;238      CLEAR_REG(RCC->CFGR2);
;;;239    
;;;240    #endif /* RCC_CFGR2_SUPPORT */
;;;241      /* Disable all interrupts */
;;;242      CLEAR_REG(RCC->CIR);
00002a  6081              STR      r1,[r0,#8]
;;;243    
;;;244      /* Update the SystemCoreClock global variable */
;;;245      SystemCoreClock = HSI_VALUE;
00002c  4904              LDR      r1,|L3.64|
00002e  4803              LDR      r0,|L3.60|
000030  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;246    }
000032  4770              BX       lr
;;;247    
                          ENDP

                  |L3.52|
                          DCD      0x40021000
                  |L3.56|
                          DCD      0xfef6ffff
                  |L3.60|
                          DCD      0x007a1200
                  |L3.64|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_DisableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DisableCSS PROC
;;;947      */
;;;948    void HAL_RCC_DisableCSS(void)
000000  4901              LDR      r1,|L4.8|
;;;949    {
;;;950      *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
000002  2000              MOVS     r0,#0
000004  64c8              STR      r0,[r1,#0x4c]
;;;951    }
000006  4770              BX       lr
;;;952    
                          ENDP

                  |L4.8|
                          DCD      0x42420000

                          AREA ||i.HAL_RCC_EnableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_EnableCSS PROC
;;;938      */
;;;939    void HAL_RCC_EnableCSS(void)
000000  4901              LDR      r1,|L5.8|
;;;940    {
;;;941      *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  64c8              STR      r0,[r1,#0x4c]
;;;942    }
000006  4770              BX       lr
;;;943    
                          ENDP

                  |L5.8|
                          DCD      0x42420000

                          AREA ||i.HAL_RCC_GetClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetClockConfig PROC
;;;1211     */
;;;1212   void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
000000  220f              MOVS     r2,#0xf
;;;1213   {
;;;1214     /* Check the parameters */
;;;1215     assert_param(RCC_ClkInitStruct != NULL);
;;;1216     assert_param(pFLatency != NULL);
;;;1217   
;;;1218     /* Set all possible values for the Clock type parameter --------------------*/
;;;1219     RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
000002  6002              STR      r2,[r0,#0]
;;;1220     
;;;1221     /* Get the SYSCLK configuration --------------------------------------------*/ 
;;;1222     RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
000004  4a0b              LDR      r2,|L6.52|
000006  6853              LDR      r3,[r2,#4]
000008  f0030303          AND      r3,r3,#3
00000c  6043              STR      r3,[r0,#4]
;;;1223     
;;;1224     /* Get the HCLK configuration ----------------------------------------------*/ 
;;;1225     RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
00000e  6853              LDR      r3,[r2,#4]
000010  f00303f0          AND      r3,r3,#0xf0
000014  6083              STR      r3,[r0,#8]
;;;1226     
;;;1227     /* Get the APB1 configuration ----------------------------------------------*/ 
;;;1228     RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
000016  6853              LDR      r3,[r2,#4]
000018  f40363e0          AND      r3,r3,#0x700
00001c  60c3              STR      r3,[r0,#0xc]
;;;1229     
;;;1230     /* Get the APB2 configuration ----------------------------------------------*/ 
;;;1231     RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
00001e  6852              LDR      r2,[r2,#4]
000020  f4025260          AND      r2,r2,#0x3800
000024  08d2              LSRS     r2,r2,#3
000026  6102              STR      r2,[r0,#0x10]
;;;1232     
;;;1233   #if   defined(FLASH_ACR_LATENCY)
;;;1234     /* Get the Flash Wait State (Latency) configuration ------------------------*/   
;;;1235     *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
000028  4803              LDR      r0,|L6.56|
00002a  6800              LDR      r0,[r0,#0]
00002c  f0000007          AND      r0,r0,#7
000030  6008              STR      r0,[r1,#0]
;;;1236   #else
;;;1237     /* For VALUE lines devices, only LATENCY_0 can be set*/
;;;1238     *pFLatency = (uint32_t)FLASH_LATENCY_0; 
;;;1239   #endif
;;;1240   }
000032  4770              BX       lr
;;;1241   
                          ENDP

                  |L6.52|
                          DCD      0x40021000
                  |L6.56|
                          DCD      0x40022000

                          AREA ||i.HAL_RCC_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetHCLKFreq PROC
;;;1075     */
;;;1076   uint32_t HAL_RCC_GetHCLKFreq(void)
000000  4801              LDR      r0,|L7.8|
;;;1077   {
;;;1078     return SystemCoreClock;
000002  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;1079   }
000004  4770              BX       lr
;;;1080   
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_GetOscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetOscConfig PROC
;;;1111     */
;;;1112   void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  b510              PUSH     {r4,lr}
;;;1113   {
;;;1114     /* Check the parameters */
;;;1115     assert_param(RCC_OscInitStruct != NULL);
;;;1116   
;;;1117     /* Set all possible values for the Oscillator type parameter ---------------*/
;;;1118     RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
000002  210f              MOVS     r1,#0xf
000004  6001              STR      r1,[r0,#0]
;;;1119                     | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
;;;1120   
;;;1121   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1122     /* Get the Prediv1 source --------------------------------------------------*/
;;;1123     RCC_OscInitStruct->Prediv1Source = READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC);
;;;1124   #endif /* RCC_CFGR2_PREDIV1SRC */
;;;1125   
;;;1126     /* Get the HSE configuration -----------------------------------------------*/
;;;1127     if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
000006  4b22              LDR      r3,|L8.144|
000008  6819              LDR      r1,[r3,#0]
00000a  034a              LSLS     r2,r1,#13
00000c  f04f0100          MOV      r1,#0
000010  d503              BPL      |L8.26|
;;;1128     {
;;;1129       RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
000012  f44f22a0          MOV      r2,#0x50000
000016  6042              STR      r2,[r0,#4]
000018  e007              B        |L8.42|
                  |L8.26|
;;;1130     }
;;;1131     else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
00001a  681a              LDR      r2,[r3,#0]
00001c  03d2              LSLS     r2,r2,#15
00001e  d503              BPL      |L8.40|
;;;1132     {
;;;1133       RCC_OscInitStruct->HSEState = RCC_HSE_ON;
000020  f44f3280          MOV      r2,#0x10000
000024  6042              STR      r2,[r0,#4]
000026  e000              B        |L8.42|
                  |L8.40|
;;;1134     }
;;;1135     else
;;;1136     {
;;;1137       RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
000028  6041              STR      r1,[r0,#4]
                  |L8.42|
;;;1138     }
;;;1139     RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
00002a  685a              LDR      r2,[r3,#4]
00002c  f4023200          AND      r2,r2,#0x20000
000030  6082              STR      r2,[r0,#8]
;;;1140   
;;;1141     /* Get the HSI configuration -----------------------------------------------*/
;;;1142     if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
000032  681a              LDR      r2,[r3,#0]
000034  07d4              LSLS     r4,r2,#31
;;;1143     {
;;;1144       RCC_OscInitStruct->HSIState = RCC_HSI_ON;
000036  f04f0201          MOV      r2,#1
00003a  d001              BEQ      |L8.64|
00003c  6102              STR      r2,[r0,#0x10]
00003e  e000              B        |L8.66|
                  |L8.64|
;;;1145     }
;;;1146     else
;;;1147     {
;;;1148       RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
000040  6101              STR      r1,[r0,#0x10]
                  |L8.66|
;;;1149     }
;;;1150     
;;;1151     RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
000042  681c              LDR      r4,[r3,#0]
000044  f3c404c4          UBFX     r4,r4,#3,#5
000048  6144              STR      r4,[r0,#0x14]
;;;1152     
;;;1153     /* Get the LSE configuration -----------------------------------------------*/
;;;1154     if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
00004a  6a1c              LDR      r4,[r3,#0x20]
00004c  0764              LSLS     r4,r4,#29
00004e  d502              BPL      |L8.86|
;;;1155     {
;;;1156       RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
000050  2405              MOVS     r4,#5
000052  60c4              STR      r4,[r0,#0xc]
000054  e005              B        |L8.98|
                  |L8.86|
;;;1157     }
;;;1158     else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
000056  6a1c              LDR      r4,[r3,#0x20]
000058  07e4              LSLS     r4,r4,#31
00005a  d001              BEQ      |L8.96|
;;;1159     {
;;;1160       RCC_OscInitStruct->LSEState = RCC_LSE_ON;
00005c  60c2              STR      r2,[r0,#0xc]
00005e  e000              B        |L8.98|
                  |L8.96|
;;;1161     }
;;;1162     else
;;;1163     {
;;;1164       RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
000060  60c1              STR      r1,[r0,#0xc]
                  |L8.98|
;;;1165     }
;;;1166     
;;;1167     /* Get the LSI configuration -----------------------------------------------*/
;;;1168     if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
000062  6a5c              LDR      r4,[r3,#0x24]
000064  07e4              LSLS     r4,r4,#31
000066  d001              BEQ      |L8.108|
;;;1169     {
;;;1170       RCC_OscInitStruct->LSIState = RCC_LSI_ON;
000068  6182              STR      r2,[r0,#0x18]
00006a  e000              B        |L8.110|
                  |L8.108|
;;;1171     }
;;;1172     else
;;;1173     {
;;;1174       RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
00006c  6181              STR      r1,[r0,#0x18]
                  |L8.110|
;;;1175     }
;;;1176     
;;;1177   
;;;1178     /* Get the PLL configuration -----------------------------------------------*/
;;;1179     if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
00006e  6819              LDR      r1,[r3,#0]
000070  01c9              LSLS     r1,r1,#7
000072  d502              BPL      |L8.122|
;;;1180     {
;;;1181       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
000074  2102              MOVS     r1,#2
000076  61c1              STR      r1,[r0,#0x1c]
000078  e000              B        |L8.124|
                  |L8.122|
;;;1182     }
;;;1183     else
;;;1184     {
;;;1185       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
00007a  61c2              STR      r2,[r0,#0x1c]
                  |L8.124|
;;;1186     }
;;;1187     RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
00007c  6859              LDR      r1,[r3,#4]
00007e  f4013180          AND      r1,r1,#0x10000
000082  6201              STR      r1,[r0,#0x20]
;;;1188     RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
000084  6859              LDR      r1,[r3,#4]
000086  f4011170          AND      r1,r1,#0x3c0000
00008a  6241              STR      r1,[r0,#0x24]
;;;1189   #if defined(RCC_CR_PLL2ON)
;;;1190     /* Get the PLL2 configuration -----------------------------------------------*/
;;;1191     if((RCC->CR &RCC_CR_PLL2ON) == RCC_CR_PLL2ON)
;;;1192     {
;;;1193       RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_ON;
;;;1194     }
;;;1195     else
;;;1196     {
;;;1197       RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_OFF;
;;;1198     }
;;;1199     RCC_OscInitStruct->PLL2.HSEPrediv2Value = __HAL_RCC_HSE_GET_PREDIV2();
;;;1200     RCC_OscInitStruct->PLL2.PLL2MUL = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PLL2MUL);
;;;1201   #endif /* RCC_CR_PLL2ON */
;;;1202   }
00008c  bd10              POP      {r4,pc}
;;;1203   
                          ENDP

00008e  0000              DCW      0x0000
                  |L8.144|
                          DCD      0x40021000

                          AREA ||i.HAL_RCC_GetPCLK1Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK1Freq PROC
;;;1086     */
;;;1087   uint32_t HAL_RCC_GetPCLK1Freq(void)
000000  b500              PUSH     {lr}
;;;1088   {
;;;1089     /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
;;;1090     return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4904              LDR      r1,|L9.24|
000008  6849              LDR      r1,[r1,#4]
00000a  4a04              LDR      r2,|L9.28|
00000c  f3c12102          UBFX     r1,r1,#8,#3
000010  5c51              LDRB     r1,[r2,r1]
000012  40c8              LSRS     r0,r0,r1
;;;1091   }    
000014  bd00              POP      {pc}
;;;1092   
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      0x40021000
                  |L9.28|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetPCLK2Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK2Freq PROC
;;;1098     */
;;;1099   uint32_t HAL_RCC_GetPCLK2Freq(void)
000000  b500              PUSH     {lr}
;;;1100   {
;;;1101     /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
;;;1102     return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4904              LDR      r1,|L10.24|
000008  6849              LDR      r1,[r1,#4]
00000a  4a04              LDR      r2,|L10.28|
00000c  f3c121c2          UBFX     r1,r1,#11,#3
000010  5c51              LDRB     r1,[r2,r1]
000012  40c8              LSRS     r0,r0,r1
;;;1103   } 
000014  bd00              POP      {pc}
;;;1104   
                          ENDP

000016  0000              DCW      0x0000
                  |L10.24|
                          DCD      0x40021000
                  |L10.28|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetSysClockFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetSysClockFreq PROC
;;;981      */
;;;982    uint32_t HAL_RCC_GetSysClockFreq(void)
000000  b510              PUSH     {r4,lr}
;;;983    {
000002  b085              SUB      sp,sp,#0x14
;;;984    #if defined(RCC_CFGR2_PREDIV1SRC)
;;;985      const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
;;;986      const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
;;;987    #else
;;;988      const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
000004  a013              ADR      r0,|L11.84|
000006  e9d01301          LDRD     r1,r3,[r0,#4]
00000a  6802              LDR      r2,[r0,#0]
00000c  68c0              LDR      r0,[r0,#0xc]
00000e  e9cd1302          STRD     r1,r3,[sp,#8]
000012  9201              STR      r2,[sp,#4]
000014  9004              STR      r0,[sp,#0x10]
;;;989    #if defined(RCC_CFGR2_PREDIV1)
;;;990      const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
;;;991    #else
;;;992      const uint8_t aPredivFactorTable[2] = {1, 2};
000016  a013              ADR      r0,|L11.100|
000018  6800              LDR      r0,[r0,#0]
00001a  9000              STR      r0,[sp,#0]
;;;993    #endif /*RCC_CFGR2_PREDIV1*/
;;;994    
;;;995    #endif
;;;996      uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
;;;997      uint32_t sysclockfreq = 0U;
;;;998    #if defined(RCC_CFGR2_PREDIV1SRC)
;;;999      uint32_t prediv2 = 0U, pll2mul = 0U;
;;;1000   #endif /*RCC_CFGR2_PREDIV1SRC*/
;;;1001     
;;;1002     tmpreg = RCC->CFGR;
00001c  4b12              LDR      r3,|L11.104|
00001e  6859              LDR      r1,[r3,#4]
;;;1003     
;;;1004     /* Get SYSCLK source -------------------------------------------------------*/
;;;1005     switch (tmpreg & RCC_CFGR_SWS)
;;;1006     {
;;;1007       case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
;;;1008       {
;;;1009         sysclockfreq = HSE_VALUE;
000020  4812              LDR      r0,|L11.108|
000022  f001020c          AND      r2,r1,#0xc            ;1005
000026  2a04              CMP      r2,#4                 ;1005
000028  d00f              BEQ      |L11.74|
00002a  2a08              CMP      r2,#8                 ;1005
00002c  d10d              BNE      |L11.74|
;;;1010         break;
;;;1011       }
;;;1012       case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
;;;1013       {
;;;1014         pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
00002e  aa01              ADD      r2,sp,#4
000030  f3c14483          UBFX     r4,r1,#18,#4
000034  5d12              LDRB     r2,[r2,r4]
;;;1015         if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
000036  03c9              LSLS     r1,r1,#15
000038  d509              BPL      |L11.78|
;;;1016         {
;;;1017   #if defined(RCC_CFGR2_PREDIV1)
;;;1018           prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
;;;1019   #else
;;;1020           prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
00003a  6859              LDR      r1,[r3,#4]
00003c  f3c14140          UBFX     r1,r1,#17,#1
000040  f81d1001          LDRB     r1,[sp,r1]
;;;1021   #endif /*RCC_CFGR2_PREDIV1*/
;;;1022   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1023   
;;;1024           if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
;;;1025           {
;;;1026             /* PLL2 selected as Prediv1 source */
;;;1027             /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
;;;1028             prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
;;;1029             pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
;;;1030             pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv) * pllmul);
;;;1031           }
;;;1032           else
;;;1033           {
;;;1034             /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
;;;1035             pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
;;;1036           }
;;;1037           
;;;1038           /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
;;;1039           /* In this case need to divide pllclk by 2 */
;;;1040           if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
;;;1041           {
;;;1042               pllclk = pllclk / 2;
;;;1043           }
;;;1044   #else
;;;1045           /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
;;;1046           pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
000044  fbb0f0f1          UDIV     r0,r0,r1
000048  4350              MULS     r0,r2,r0
                  |L11.74|
;;;1047   #endif /*RCC_CFGR2_PREDIV1SRC*/
;;;1048         }
;;;1049         else
;;;1050         {
;;;1051           /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
;;;1052           pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
;;;1053         }
;;;1054         sysclockfreq = pllclk;
;;;1055         break;
;;;1056       }
;;;1057       case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
;;;1058       default: /* HSI used as system clock */
;;;1059       {
;;;1060         sysclockfreq = HSI_VALUE;
;;;1061         break;
;;;1062       }
;;;1063     }
;;;1064     return sysclockfreq;
;;;1065   }
00004a  b005              ADD      sp,sp,#0x14
00004c  bd10              POP      {r4,pc}
                  |L11.78|
00004e  4808              LDR      r0,|L11.112|
000050  4350              MULS     r0,r2,r0              ;1052
000052  e7fa              B        |L11.74|
;;;1066   
                          ENDP

                  |L11.84|
000054  02030405          DCB      2,3,4,5,6,"\a\b\t\n\v\f\r",14,15,16,16
000058  06070809
00005c  0a0b0c0d
000060  0e0f1010
                  |L11.100|
000064  010200            DCB      1,2,0
000067  00                DCB      0
                  |L11.104|
                          DCD      0x40021000
                  |L11.108|
                          DCD      0x007a1200
                  |L11.112|
                          DCD      0x003d0900

                          AREA ||i.HAL_RCC_MCOConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_MCOConfig PROC
;;;901      */
;;;902    void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
000000  b530              PUSH     {r4,r5,lr}
;;;903    {
000002  b085              SUB      sp,sp,#0x14
000004  460d              MOV      r5,r1
;;;904      GPIO_InitTypeDef gpio = {0U};
000006  2000              MOVS     r0,#0
000008  9003              STR      r0,[sp,#0xc]
;;;905    
;;;906      /* Check the parameters */
;;;907      assert_param(IS_RCC_MCO(RCC_MCOx));
;;;908      assert_param(IS_RCC_MCODIV(RCC_MCODiv));
;;;909      assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
;;;910    
;;;911      /* Prevent unused argument(s) compilation warning */
;;;912      UNUSED(RCC_MCOx);
;;;913      UNUSED(RCC_MCODiv);
;;;914    
;;;915      /* Configure the MCO1 pin in alternate function mode */
;;;916      gpio.Mode      = GPIO_MODE_AF_PP;
00000a  2002              MOVS     r0,#2
00000c  9002              STR      r0,[sp,#8]
;;;917      gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
00000e  2003              MOVS     r0,#3
000010  9004              STR      r0,[sp,#0x10]
;;;918      gpio.Pull      = GPIO_NOPULL;
;;;919      gpio.Pin       = MCO1_PIN;
000012  f44f7080          MOV      r0,#0x100
000016  9001              STR      r0,[sp,#4]
;;;920    
;;;921      /* MCO1 Clock Enable */
;;;922      MCO1_CLK_ENABLE();
000018  4c09              LDR      r4,|L12.64|
00001a  69a0              LDR      r0,[r4,#0x18]
00001c  f0400004          ORR      r0,r0,#4
000020  61a0              STR      r0,[r4,#0x18]
000022  69a0              LDR      r0,[r4,#0x18]
000024  f0000004          AND      r0,r0,#4
000028  9000              STR      r0,[sp,#0]
;;;923    
;;;924      HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
00002a  a901              ADD      r1,sp,#4
00002c  4805              LDR      r0,|L12.68|
00002e  f7fffffe          BL       HAL_GPIO_Init
;;;925    
;;;926      /* Configure the MCO clock source */
;;;927      __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
000032  6860              LDR      r0,[r4,#4]
000034  f02060e0          BIC      r0,r0,#0x7000000
000038  4328              ORRS     r0,r0,r5
00003a  6060              STR      r0,[r4,#4]
;;;928    }
00003c  b005              ADD      sp,sp,#0x14
00003e  bd30              POP      {r4,r5,pc}
;;;929    
                          ENDP

                  |L12.64|
                          DCD      0x40021000
                  |L12.68|
                          DCD      0x40010800

                          AREA ||i.HAL_RCC_NMI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_RCC_NMI_IRQHandler PROC
;;;1246     */
;;;1247   void HAL_RCC_NMI_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1248   {
;;;1249     /* Check RCC CSSF flag  */
;;;1250     if(__HAL_RCC_GET_IT(RCC_IT_CSS))
000002  4c04              LDR      r4,|L13.20|
000004  68a0              LDR      r0,[r4,#8]
000006  0600              LSLS     r0,r0,#24
000008  d503              BPL      |L13.18|
;;;1251     {
;;;1252       /* RCC Clock Security System interrupt user callback */
;;;1253       HAL_RCC_CSSCallback();
00000a  f7fffffe          BL       HAL_RCC_CSSCallback
;;;1254       
;;;1255       /* Clear RCC CSS pending bit */
;;;1256       __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
00000e  2080              MOVS     r0,#0x80
000010  72a0              STRB     r0,[r4,#0xa]
                  |L13.18|
;;;1257     }
;;;1258   }
000012  bd10              POP      {r4,pc}
;;;1259   
                          ENDP

                  |L13.20|
                          DCD      0x40021000

                          AREA ||i.HAL_RCC_OscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_OscConfig PROC
;;;262      */
;;;263    HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;264    {
000004  4604              MOV      r4,r0
;;;265       uint32_t tickstart = 0U;
;;;266      
;;;267      /* Check the parameters */
;;;268      assert_param(RCC_OscInitStruct != NULL);
;;;269      assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
;;;270      
;;;271      /*------------------------------- HSE Configuration ------------------------*/ 
;;;272      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
;;;273      {
;;;274        /* Check the parameters */
;;;275        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
;;;276            
;;;277        /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
;;;278        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
000006  4dd0              LDR      r5,|L14.840|
000008  7820              LDRB     r0,[r4,#0]            ;272
00000a  07c0              LSLS     r0,r0,#31             ;272
00000c  d05b              BEQ      |L14.198|
00000e  6868              LDR      r0,[r5,#4]
000010  f3c00081          UBFX     r0,r0,#2,#2
000014  2801              CMP      r0,#1
000016  d007              BEQ      |L14.40|
;;;279           || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
000018  6868              LDR      r0,[r5,#4]
00001a  f3c00081          UBFX     r0,r0,#2,#2
00001e  2802              CMP      r0,#2
000020  d10a              BNE      |L14.56|
000022  6868              LDR      r0,[r5,#4]
000024  03c0              LSLS     r0,r0,#15
000026  d507              BPL      |L14.56|
                  |L14.40|
;;;280        {
;;;281          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
000028  6828              LDR      r0,[r5,#0]
00002a  0380              LSLS     r0,r0,#14
00002c  d54b              BPL      |L14.198|
00002e  6860              LDR      r0,[r4,#4]
000030  bb78              CBNZ     r0,|L14.146|
;;;282          {
;;;283            return HAL_ERROR;
000032  2001              MOVS     r0,#1
                  |L14.52|
;;;284          }
;;;285        }
;;;286        else
;;;287        {
;;;288          /* Set the new HSE configuration ---------------------------------------*/
;;;289          __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
;;;290          
;;;291    
;;;292           /* Check the HSE State */
;;;293          if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
;;;294          {
;;;295            /* Get Start Tick */
;;;296            tickstart = HAL_GetTick();
;;;297            
;;;298            /* Wait till HSE is ready */
;;;299            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;300            {
;;;301              if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;302              {
;;;303                return HAL_TIMEOUT;
;;;304              }
;;;305            }
;;;306          }
;;;307          else
;;;308          {
;;;309            /* Get Start Tick */
;;;310            tickstart = HAL_GetTick();
;;;311            
;;;312            /* Wait till HSE is disabled */
;;;313            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
;;;314            {
;;;315               if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;316              {
;;;317                return HAL_TIMEOUT;
;;;318              }
;;;319            }
;;;320          }
;;;321        }
;;;322      }
;;;323      /*----------------------------- HSI Configuration --------------------------*/ 
;;;324      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
;;;325      {
;;;326        /* Check the parameters */
;;;327        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
;;;328        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
;;;329        
;;;330        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
;;;331        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
;;;332           || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
;;;333        {
;;;334          /* When HSI is used as system clock it will not disabled */
;;;335          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
;;;336          {
;;;337            return HAL_ERROR;
;;;338          }
;;;339          /* Otherwise, just the calibration is allowed */
;;;340          else
;;;341          {
;;;342            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;343            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;344          }
;;;345        }
;;;346        else
;;;347        {
;;;348          /* Check the HSI State */
;;;349          if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
;;;350          {
;;;351           /* Enable the Internal High Speed oscillator (HSI). */
;;;352            __HAL_RCC_HSI_ENABLE();
;;;353            
;;;354            /* Get Start Tick */
;;;355            tickstart = HAL_GetTick();
;;;356            
;;;357            /* Wait till HSI is ready */
;;;358            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;359            {
;;;360              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;361              {
;;;362                return HAL_TIMEOUT;
;;;363              }
;;;364            }
;;;365                    
;;;366            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;367            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;368          }
;;;369          else
;;;370          {
;;;371            /* Disable the Internal High Speed oscillator (HSI). */
;;;372            __HAL_RCC_HSI_DISABLE();
;;;373            
;;;374            /* Get Start Tick */
;;;375            tickstart = HAL_GetTick();
;;;376            
;;;377            /* Wait till HSI is disabled */
;;;378            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
;;;379            {
;;;380              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;381              {
;;;382                return HAL_TIMEOUT;
;;;383              }
;;;384            }
;;;385          }
;;;386        }
;;;387      }
;;;388      /*------------------------------ LSI Configuration -------------------------*/ 
;;;389      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
;;;390      {
;;;391        /* Check the parameters */
;;;392        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
;;;393        
;;;394        /* Check the LSI State */
;;;395        if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
;;;396        {
;;;397          /* Enable the Internal Low Speed oscillator (LSI). */
;;;398          __HAL_RCC_LSI_ENABLE();
;;;399          
;;;400          /* Get Start Tick */
;;;401          tickstart = HAL_GetTick();
;;;402          
;;;403          /* Wait till LSI is ready */  
;;;404          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
;;;405          {
;;;406            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;407            {
;;;408              return HAL_TIMEOUT;
;;;409            }
;;;410          }
;;;411          /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
;;;412              should be added.*/
;;;413          RCC_Delay(1);
;;;414        }
;;;415        else
;;;416        {
;;;417          /* Disable the Internal Low Speed oscillator (LSI). */
;;;418          __HAL_RCC_LSI_DISABLE();
;;;419          
;;;420          /* Get Start Tick */
;;;421          tickstart = HAL_GetTick();
;;;422          
;;;423          /* Wait till LSI is disabled */  
;;;424          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
;;;425          {
;;;426            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;427            {
;;;428              return HAL_TIMEOUT;
;;;429            }
;;;430          }
;;;431        }
;;;432      }
;;;433      /*------------------------------ LSE Configuration -------------------------*/ 
;;;434      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
;;;435      {
;;;436        FlagStatus       pwrclkchanged = RESET;
;;;437        
;;;438        /* Check the parameters */
;;;439        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
;;;440    
;;;441        /* Update LSE configuration in Backup Domain control register    */
;;;442        /* Requires to enable write access to Backup Domain of necessary */
;;;443        if(__HAL_RCC_PWR_IS_CLK_DISABLED())
;;;444        {
;;;445          __HAL_RCC_PWR_CLK_ENABLE();
;;;446          pwrclkchanged = SET;
;;;447        }
;;;448        
;;;449        if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;450        {
;;;451          /* Enable write access to Backup domain */
;;;452          SET_BIT(PWR->CR, PWR_CR_DBP);
;;;453          
;;;454          /* Wait for Backup domain Write protection disable */
;;;455          tickstart = HAL_GetTick();
;;;456    
;;;457          while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;458          {
;;;459            if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
;;;460            {
;;;461              return HAL_TIMEOUT;
;;;462            }
;;;463          }
;;;464        }
;;;465    
;;;466        /* Set the new LSE configuration -----------------------------------------*/
;;;467        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
;;;468        /* Check the LSE State */
;;;469        if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
;;;470        {
;;;471          /* Get Start Tick */
;;;472          tickstart = HAL_GetTick();
;;;473          
;;;474          /* Wait till LSE is ready */  
;;;475          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;476          {
;;;477            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;478            {
;;;479              return HAL_TIMEOUT;
;;;480            }
;;;481          }
;;;482        }
;;;483        else
;;;484        {
;;;485          /* Get Start Tick */
;;;486          tickstart = HAL_GetTick();
;;;487          
;;;488          /* Wait till LSE is disabled */  
;;;489          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
;;;490          {
;;;491            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;492            {
;;;493              return HAL_TIMEOUT;
;;;494            }
;;;495          }
;;;496        }
;;;497    
;;;498        /* Require to disable power clock if necessary */
;;;499        if(pwrclkchanged == SET)
;;;500        {
;;;501          __HAL_RCC_PWR_CLK_DISABLE();
;;;502        }
;;;503      }
;;;504    
;;;505    #if defined(RCC_CR_PLL2ON)
;;;506      /*-------------------------------- PLL2 Configuration -----------------------*/
;;;507      /* Check the parameters */
;;;508      assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
;;;509      if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
;;;510      {
;;;511        /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
;;;512          clock (i.e. it is used as PLL clock entry that is used as system clock). */
;;;513        if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
;;;514            (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
;;;515            ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
;;;516        {
;;;517          return HAL_ERROR;
;;;518        }
;;;519        else
;;;520        {
;;;521          if((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
;;;522          {
;;;523            /* Check the parameters */
;;;524            assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
;;;525            assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));
;;;526    
;;;527            /* Prediv2 can be written only when the PLLI2S is disabled. */
;;;528            /* Return an error only if new value is different from the programmed value */
;;;529            if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
;;;530              (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
;;;531            {
;;;532              return HAL_ERROR;
;;;533            }
;;;534            
;;;535            /* Disable the main PLL2. */
;;;536            __HAL_RCC_PLL2_DISABLE();
;;;537            
;;;538            /* Get Start Tick */
;;;539            tickstart = HAL_GetTick();
;;;540            
;;;541            /* Wait till PLL2 is disabled */
;;;542            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
;;;543            {
;;;544              if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
;;;545              {
;;;546                return HAL_TIMEOUT;
;;;547              }
;;;548            }
;;;549            
;;;550            /* Configure the HSE prediv2 factor --------------------------------*/
;;;551            __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
;;;552    
;;;553            /* Configure the main PLL2 multiplication factors. */
;;;554            __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
;;;555            
;;;556            /* Enable the main PLL2. */
;;;557            __HAL_RCC_PLL2_ENABLE();
;;;558            
;;;559            /* Get Start Tick */
;;;560            tickstart = HAL_GetTick();
;;;561            
;;;562            /* Wait till PLL2 is ready */
;;;563            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
;;;564            {
;;;565              if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
;;;566              {
;;;567                return HAL_TIMEOUT;
;;;568              }
;;;569            }
;;;570          }
;;;571          else
;;;572          {
;;;573           /* Set PREDIV1 source to HSE */
;;;574            CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
;;;575    
;;;576            /* Disable the main PLL2. */
;;;577            __HAL_RCC_PLL2_DISABLE();
;;;578     
;;;579            /* Get Start Tick */
;;;580            tickstart = HAL_GetTick();
;;;581            
;;;582            /* Wait till PLL2 is disabled */  
;;;583            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
;;;584            {
;;;585              if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
;;;586              {
;;;587                return HAL_TIMEOUT;
;;;588              }
;;;589            }
;;;590          }
;;;591        }
;;;592      }
;;;593    
;;;594    #endif /* RCC_CR_PLL2ON */
;;;595      /*-------------------------------- PLL Configuration -----------------------*/
;;;596      /* Check the parameters */
;;;597      assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
;;;598      if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
;;;599      {
;;;600        /* Check if the PLL is used as system clock or not */
;;;601        if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;602        { 
;;;603          if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
;;;604          {
;;;605            /* Check the parameters */
;;;606            assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
;;;607            assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
;;;608      
;;;609            /* Disable the main PLL. */
;;;610            __HAL_RCC_PLL_DISABLE();
;;;611            
;;;612            /* Get Start Tick */
;;;613            tickstart = HAL_GetTick();
;;;614            
;;;615            /* Wait till PLL is disabled */
;;;616            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
;;;617            {
;;;618              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;619              {
;;;620                return HAL_TIMEOUT;
;;;621              }
;;;622            }
;;;623    
;;;624            /* Configure the HSE prediv factor --------------------------------*/
;;;625            /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
;;;626            if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
;;;627            {
;;;628              /* Check the parameter */
;;;629              assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
;;;630    #if defined(RCC_CFGR2_PREDIV1SRC)
;;;631              assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));
;;;632              
;;;633              /* Set PREDIV1 source */
;;;634              SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
;;;635    #endif /* RCC_CFGR2_PREDIV1SRC */
;;;636    
;;;637              /* Set PREDIV1 Value */
;;;638              __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
;;;639            }
;;;640    
;;;641            /* Configure the main PLL clock source and multiplication factors. */
;;;642            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
;;;643                                 RCC_OscInitStruct->PLL.PLLMUL);
;;;644            /* Enable the main PLL. */
;;;645            __HAL_RCC_PLL_ENABLE();
;;;646            
;;;647            /* Get Start Tick */
;;;648            tickstart = HAL_GetTick();
;;;649            
;;;650            /* Wait till PLL is ready */
;;;651            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
;;;652            {
;;;653              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;654              {
;;;655                return HAL_TIMEOUT;
;;;656              }
;;;657            }
;;;658          }
;;;659          else
;;;660          {
;;;661            /* Disable the main PLL. */
;;;662            __HAL_RCC_PLL_DISABLE();
;;;663     
;;;664            /* Get Start Tick */
;;;665            tickstart = HAL_GetTick();
;;;666            
;;;667            /* Wait till PLL is disabled */  
;;;668            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
;;;669            {
;;;670              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;671              {
;;;672                return HAL_TIMEOUT;
;;;673              }
;;;674            }
;;;675          }
;;;676        }
;;;677        else
;;;678        {
;;;679          return HAL_ERROR;
;;;680        }
;;;681      }
;;;682      
;;;683      return HAL_OK;
;;;684    }
000034  e8bd8ff8          POP      {r3-r11,pc}
                  |L14.56|
000038  6860              LDR      r0,[r4,#4]            ;289
00003a  f5b03f80          CMP      r0,#0x10000           ;289
00003e  d011              BEQ      |L14.100|
000040  b1a8              CBZ      r0,|L14.110|
000042  f5b02fa0          CMP      r0,#0x50000           ;289
000046  d01b              BEQ      |L14.128|
000048  6828              LDR      r0,[r5,#0]            ;289
00004a  f4203080          BIC      r0,r0,#0x10000        ;289
00004e  6028              STR      r0,[r5,#0]            ;289
000050  6828              LDR      r0,[r5,#0]            ;289
000052  f4202080          BIC      r0,r0,#0x40000        ;289
000056  6028              STR      r0,[r5,#0]            ;289
                  |L14.88|
000058  6860              LDR      r0,[r4,#4]            ;293
00005a  b330              CBZ      r0,|L14.170|
00005c  f7fffffe          BL       HAL_GetTick
000060  4606              MOV      r6,r0                 ;296
000062  e01e              B        |L14.162|
                  |L14.100|
000064  6828              LDR      r0,[r5,#0]            ;289
000066  f4403080          ORR      r0,r0,#0x10000        ;289
00006a  6028              STR      r0,[r5,#0]            ;289
00006c  e7f4              B        |L14.88|
                  |L14.110|
00006e  6828              LDR      r0,[r5,#0]            ;289
000070  f4203080          BIC      r0,r0,#0x10000        ;289
000074  6028              STR      r0,[r5,#0]            ;289
000076  6828              LDR      r0,[r5,#0]            ;289
000078  f4202080          BIC      r0,r0,#0x40000        ;289
00007c  6028              STR      r0,[r5,#0]            ;289
00007e  e7eb              B        |L14.88|
                  |L14.128|
000080  6828              LDR      r0,[r5,#0]            ;289
000082  f4402080          ORR      r0,r0,#0x40000        ;289
000086  6028              STR      r0,[r5,#0]            ;289
000088  6828              LDR      r0,[r5,#0]            ;289
00008a  f4403080          ORR      r0,r0,#0x10000        ;289
00008e  6028              STR      r0,[r5,#0]            ;289
000090  e7e2              B        |L14.88|
                  |L14.146|
000092  e018              B        |L14.198|
                  |L14.148|
000094  f7fffffe          BL       HAL_GetTick
000098  1b80              SUBS     r0,r0,r6              ;301
00009a  2864              CMP      r0,#0x64              ;301
00009c  d901              BLS      |L14.162|
00009e  2003              MOVS     r0,#3                 ;303
0000a0  e7c8              B        |L14.52|
                  |L14.162|
0000a2  6828              LDR      r0,[r5,#0]            ;299
0000a4  0380              LSLS     r0,r0,#14             ;299
0000a6  d5f5              BPL      |L14.148|
0000a8  e00d              B        |L14.198|
                  |L14.170|
0000aa  f7fffffe          BL       HAL_GetTick
0000ae  4606              MOV      r6,r0                 ;310
0000b0  e006              B        |L14.192|
                  |L14.178|
0000b2  f7fffffe          BL       HAL_GetTick
0000b6  1b80              SUBS     r0,r0,r6              ;315
0000b8  2864              CMP      r0,#0x64              ;315
0000ba  d901              BLS      |L14.192|
0000bc  2003              MOVS     r0,#3                 ;317
0000be  e7b9              B        |L14.52|
                  |L14.192|
0000c0  6828              LDR      r0,[r5,#0]            ;313
0000c2  0380              LSLS     r0,r0,#14             ;313
0000c4  d4f5              BMI      |L14.178|
                  |L14.198|
0000c6  7820              LDRB     r0,[r4,#0]            ;324
0000c8  f8df8280          LDR      r8,|L14.844|
0000cc  0780              LSLS     r0,r0,#30             ;324
0000ce  f04f0a01          MOV      r10,#1                ;283
0000d2  f04f0900          MOV      r9,#0                 ;283
0000d6  d545              BPL      |L14.356|
0000d8  6868              LDR      r0,[r5,#4]            ;331
0000da  f0100f0c          TST      r0,#0xc               ;331
0000de  d007              BEQ      |L14.240|
0000e0  6868              LDR      r0,[r5,#4]            ;332
0000e2  f3c00081          UBFX     r0,r0,#2,#2           ;332
0000e6  2802              CMP      r0,#2                 ;332
0000e8  d112              BNE      |L14.272|
0000ea  6868              LDR      r0,[r5,#4]            ;332
0000ec  03c0              LSLS     r0,r0,#15             ;332
0000ee  d40f              BMI      |L14.272|
                  |L14.240|
0000f0  6828              LDR      r0,[r5,#0]            ;335
0000f2  0780              LSLS     r0,r0,#30             ;335
0000f4  d504              BPL      |L14.256|
0000f6  6920              LDR      r0,[r4,#0x10]         ;335
0000f8  2801              CMP      r0,#1                 ;335
0000fa  d001              BEQ      |L14.256|
0000fc  2001              MOVS     r0,#1                 ;337
0000fe  e799              B        |L14.52|
                  |L14.256|
000100  6828              LDR      r0,[r5,#0]            ;343
000102  6961              LDR      r1,[r4,#0x14]         ;343
000104  f02000f8          BIC      r0,r0,#0xf8           ;343
000108  ea4000c1          ORR      r0,r0,r1,LSL #3       ;343
00010c  6028              STR      r0,[r5,#0]            ;343
00010e  e029              B        |L14.356|
                  |L14.272|
000110  6920              LDR      r0,[r4,#0x10]         ;349
000112  b1b8              CBZ      r0,|L14.324|
000114  f8c8a000          STR      r10,[r8,#0]           ;352
000118  f7fffffe          BL       HAL_GetTick
00011c  4606              MOV      r6,r0                 ;355
00011e  e006              B        |L14.302|
                  |L14.288|
000120  f7fffffe          BL       HAL_GetTick
000124  1b80              SUBS     r0,r0,r6              ;360
000126  2802              CMP      r0,#2                 ;360
000128  d901              BLS      |L14.302|
00012a  2003              MOVS     r0,#3                 ;362
00012c  e782              B        |L14.52|
                  |L14.302|
00012e  6828              LDR      r0,[r5,#0]            ;358
000130  0780              LSLS     r0,r0,#30             ;358
000132  d5f5              BPL      |L14.288|
000134  6828              LDR      r0,[r5,#0]            ;367
000136  6961              LDR      r1,[r4,#0x14]         ;367
000138  f02000f8          BIC      r0,r0,#0xf8           ;367
00013c  ea4000c1          ORR      r0,r0,r1,LSL #3       ;367
000140  6028              STR      r0,[r5,#0]            ;367
000142  e00f              B        |L14.356|
                  |L14.324|
000144  f8c89000          STR      r9,[r8,#0]            ;372
000148  f7fffffe          BL       HAL_GetTick
00014c  4606              MOV      r6,r0                 ;375
00014e  e006              B        |L14.350|
                  |L14.336|
000150  f7fffffe          BL       HAL_GetTick
000154  1b80              SUBS     r0,r0,r6              ;380
000156  2802              CMP      r0,#2                 ;380
000158  d901              BLS      |L14.350|
00015a  2003              MOVS     r0,#3                 ;382
00015c  e76a              B        |L14.52|
                  |L14.350|
00015e  6828              LDR      r0,[r5,#0]            ;378
000160  0780              LSLS     r0,r0,#30             ;378
000162  d4f5              BMI      |L14.336|
                  |L14.356|
000164  7820              LDRB     r0,[r4,#0]            ;389
000166  0700              LSLS     r0,r0,#28             ;389
000168  d526              BPL      |L14.440|
00016a  4879              LDR      r0,|L14.848|
00016c  69a1              LDR      r1,[r4,#0x18]         ;395
00016e  b199              CBZ      r1,|L14.408|
000170  f8c0a000          STR      r10,[r0,#0]           ;398
000174  f7fffffe          BL       HAL_GetTick
000178  4606              MOV      r6,r0                 ;401
00017a  e006              B        |L14.394|
                  |L14.380|
00017c  f7fffffe          BL       HAL_GetTick
000180  1b80              SUBS     r0,r0,r6              ;406
000182  2802              CMP      r0,#2                 ;406
000184  d901              BLS      |L14.394|
000186  2003              MOVS     r0,#3                 ;408
000188  e754              B        |L14.52|
                  |L14.394|
00018a  6a68              LDR      r0,[r5,#0x24]         ;404
00018c  0780              LSLS     r0,r0,#30             ;404
00018e  d5f5              BPL      |L14.380|
000190  2001              MOVS     r0,#1                 ;413
000192  f7fffffe          BL       RCC_Delay
000196  e00f              B        |L14.440|
                  |L14.408|
000198  f8c09000          STR      r9,[r0,#0]            ;418
00019c  f7fffffe          BL       HAL_GetTick
0001a0  4606              MOV      r6,r0                 ;421
0001a2  e006              B        |L14.434|
                  |L14.420|
0001a4  f7fffffe          BL       HAL_GetTick
0001a8  1b80              SUBS     r0,r0,r6              ;426
0001aa  2802              CMP      r0,#2                 ;426
0001ac  d901              BLS      |L14.434|
0001ae  2003              MOVS     r0,#3                 ;428
0001b0  e740              B        |L14.52|
                  |L14.434|
0001b2  6a68              LDR      r0,[r5,#0x24]         ;424
0001b4  0780              LSLS     r0,r0,#30             ;424
0001b6  d4f5              BMI      |L14.420|
                  |L14.440|
0001b8  7820              LDRB     r0,[r4,#0]            ;434
0001ba  0740              LSLS     r0,r0,#29             ;434
0001bc  d573              BPL      |L14.678|
0001be  2600              MOVS     r6,#0                 ;436
0001c0  69e8              LDR      r0,[r5,#0x1c]         ;443
0001c2  00c0              LSLS     r0,r0,#3              ;443
0001c4  d408              BMI      |L14.472|
0001c6  69e8              LDR      r0,[r5,#0x1c]         ;445
0001c8  f0405080          ORR      r0,r0,#0x10000000     ;445
0001cc  61e8              STR      r0,[r5,#0x1c]         ;445
0001ce  69e8              LDR      r0,[r5,#0x1c]         ;445
0001d0  f0005080          AND      r0,r0,#0x10000000     ;445
0001d4  9000              STR      r0,[sp,#0]            ;445
0001d6  2601              MOVS     r6,#1                 ;446
                  |L14.472|
0001d8  f8dfb178          LDR      r11,|L14.852|
0001dc  f8db0000          LDR      r0,[r11,#0]           ;449
0001e0  05c0              LSLS     r0,r0,#23             ;449
0001e2  d414              BMI      |L14.526|
0001e4  f8db0000          LDR      r0,[r11,#0]           ;452
0001e8  f4407080          ORR      r0,r0,#0x100          ;452
0001ec  f8cb0000          STR      r0,[r11,#0]           ;452
0001f0  f7fffffe          BL       HAL_GetTick
0001f4  4607              MOV      r7,r0                 ;455
0001f6  e006              B        |L14.518|
                  |L14.504|
0001f8  f7fffffe          BL       HAL_GetTick
0001fc  1bc0              SUBS     r0,r0,r7              ;459
0001fe  2864              CMP      r0,#0x64              ;459
000200  d901              BLS      |L14.518|
000202  2003              MOVS     r0,#3                 ;461
000204  e716              B        |L14.52|
                  |L14.518|
000206  f8db0000          LDR      r0,[r11,#0]           ;457
00020a  05c0              LSLS     r0,r0,#23             ;457
00020c  d5f4              BPL      |L14.504|
                  |L14.526|
00020e  68e0              LDR      r0,[r4,#0xc]          ;467
000210  2801              CMP      r0,#1                 ;467
000212  d012              BEQ      |L14.570|
000214  b1b0              CBZ      r0,|L14.580|
000216  2805              CMP      r0,#5                 ;467
000218  d01d              BEQ      |L14.598|
00021a  6a28              LDR      r0,[r5,#0x20]         ;467
00021c  f0200001          BIC      r0,r0,#1              ;467
000220  6228              STR      r0,[r5,#0x20]         ;467
000222  6a28              LDR      r0,[r5,#0x20]         ;467
000224  f0200004          BIC      r0,r0,#4              ;467
000228  6228              STR      r0,[r5,#0x20]         ;467
                  |L14.554|
00022a  68e0              LDR      r0,[r4,#0xc]          ;469
00022c  f2413b88          MOV      r11,#0x1388           ;477
000230  b328              CBZ      r0,|L14.638|
000232  f7fffffe          BL       HAL_GetTick
000236  4607              MOV      r7,r0                 ;472
000238  e01d              B        |L14.630|
                  |L14.570|
00023a  6a28              LDR      r0,[r5,#0x20]         ;467
00023c  f0400001          ORR      r0,r0,#1              ;467
000240  6228              STR      r0,[r5,#0x20]         ;467
000242  e7f2              B        |L14.554|
                  |L14.580|
000244  6a28              LDR      r0,[r5,#0x20]         ;467
000246  f0200001          BIC      r0,r0,#1              ;467
00024a  6228              STR      r0,[r5,#0x20]         ;467
00024c  6a28              LDR      r0,[r5,#0x20]         ;467
00024e  f0200004          BIC      r0,r0,#4              ;467
000252  6228              STR      r0,[r5,#0x20]         ;467
000254  e7e9              B        |L14.554|
                  |L14.598|
000256  6a28              LDR      r0,[r5,#0x20]         ;467
000258  f0400004          ORR      r0,r0,#4              ;467
00025c  6228              STR      r0,[r5,#0x20]         ;467
00025e  6a28              LDR      r0,[r5,#0x20]         ;467
000260  f0400001          ORR      r0,r0,#1              ;467
000264  6228              STR      r0,[r5,#0x20]         ;467
000266  e7e0              B        |L14.554|
                  |L14.616|
000268  f7fffffe          BL       HAL_GetTick
00026c  1bc0              SUBS     r0,r0,r7              ;477
00026e  4558              CMP      r0,r11                ;477
000270  d901              BLS      |L14.630|
000272  2003              MOVS     r0,#3                 ;479
000274  e6de              B        |L14.52|
                  |L14.630|
000276  6a28              LDR      r0,[r5,#0x20]         ;475
000278  0780              LSLS     r0,r0,#30             ;475
00027a  d5f5              BPL      |L14.616|
00027c  e00d              B        |L14.666|
                  |L14.638|
00027e  f7fffffe          BL       HAL_GetTick
000282  4607              MOV      r7,r0                 ;486
000284  e006              B        |L14.660|
                  |L14.646|
000286  f7fffffe          BL       HAL_GetTick
00028a  1bc0              SUBS     r0,r0,r7              ;491
00028c  4558              CMP      r0,r11                ;491
00028e  d901              BLS      |L14.660|
000290  2003              MOVS     r0,#3                 ;493
000292  e6cf              B        |L14.52|
                  |L14.660|
000294  6a28              LDR      r0,[r5,#0x20]         ;489
000296  0780              LSLS     r0,r0,#30             ;489
000298  d4f5              BMI      |L14.646|
                  |L14.666|
00029a  2e01              CMP      r6,#1                 ;499
00029c  d103              BNE      |L14.678|
00029e  69e8              LDR      r0,[r5,#0x1c]         ;501
0002a0  f0205080          BIC      r0,r0,#0x10000000     ;501
0002a4  61e8              STR      r0,[r5,#0x1c]         ;501
                  |L14.678|
0002a6  69e0              LDR      r0,[r4,#0x1c]         ;598
0002a8  b3a0              CBZ      r0,|L14.788|
0002aa  6869              LDR      r1,[r5,#4]            ;601
0002ac  f3c10181          UBFX     r1,r1,#2,#2           ;601
0002b0  2902              CMP      r1,#2                 ;601
0002b2  d047              BEQ      |L14.836|
0002b4  2802              CMP      r0,#2                 ;603
0002b6  d005              BEQ      |L14.708|
0002b8  f8c89060          STR      r9,[r8,#0x60]         ;662
0002bc  f7fffffe          BL       HAL_GetTick
0002c0  4604              MOV      r4,r0                 ;665
0002c2  e03a              B        |L14.826|
                  |L14.708|
0002c4  f8c89060          STR      r9,[r8,#0x60]         ;610
0002c8  f7fffffe          BL       HAL_GetTick
0002cc  4606              MOV      r6,r0                 ;613
0002ce  e006              B        |L14.734|
                  |L14.720|
0002d0  f7fffffe          BL       HAL_GetTick
0002d4  1b80              SUBS     r0,r0,r6              ;618
0002d6  2802              CMP      r0,#2                 ;618
0002d8  d901              BLS      |L14.734|
0002da  2003              MOVS     r0,#3                 ;620
0002dc  e6aa              B        |L14.52|
                  |L14.734|
0002de  6828              LDR      r0,[r5,#0]            ;616
0002e0  0180              LSLS     r0,r0,#6              ;616
0002e2  d4f5              BMI      |L14.720|
0002e4  6a20              LDR      r0,[r4,#0x20]         ;626
0002e6  f5b03f80          CMP      r0,#0x10000           ;626
0002ea  d105              BNE      |L14.760|
0002ec  6868              LDR      r0,[r5,#4]            ;638
0002ee  68a1              LDR      r1,[r4,#8]            ;638
0002f0  f4203000          BIC      r0,r0,#0x20000        ;638
0002f4  4308              ORRS     r0,r0,r1              ;638
0002f6  6068              STR      r0,[r5,#4]            ;638
                  |L14.760|
0002f8  e9d40108          LDRD     r0,r1,[r4,#0x20]      ;642
0002fc  4308              ORRS     r0,r0,r1              ;642
0002fe  6869              LDR      r1,[r5,#4]            ;642
000300  f4211174          BIC      r1,r1,#0x3d0000       ;642
000304  4308              ORRS     r0,r0,r1              ;642
000306  6068              STR      r0,[r5,#4]            ;642
000308  f8c8a060          STR      r10,[r8,#0x60]        ;645
00030c  f7fffffe          BL       HAL_GetTick
000310  4604              MOV      r4,r0                 ;648
000312  e007              B        |L14.804|
                  |L14.788|
000314  e014              B        |L14.832|
                  |L14.790|
000316  f7fffffe          BL       HAL_GetTick
00031a  1b00              SUBS     r0,r0,r4              ;653
00031c  2802              CMP      r0,#2                 ;653
00031e  d901              BLS      |L14.804|
000320  2003              MOVS     r0,#3                 ;655
000322  e687              B        |L14.52|
                  |L14.804|
000324  6828              LDR      r0,[r5,#0]            ;651
000326  0180              LSLS     r0,r0,#6              ;651
000328  d5f5              BPL      |L14.790|
00032a  e009              B        |L14.832|
                  |L14.812|
00032c  f7fffffe          BL       HAL_GetTick
000330  1b00              SUBS     r0,r0,r4              ;670
000332  2802              CMP      r0,#2                 ;670
000334  d901              BLS      |L14.826|
000336  2003              MOVS     r0,#3                 ;672
000338  e67c              B        |L14.52|
                  |L14.826|
00033a  6828              LDR      r0,[r5,#0]            ;668
00033c  0180              LSLS     r0,r0,#6              ;668
00033e  d4f5              BMI      |L14.812|
                  |L14.832|
000340  2000              MOVS     r0,#0                 ;683
000342  e677              B        |L14.52|
                  |L14.836|
000344  2001              MOVS     r0,#1                 ;679
000346  e675              B        |L14.52|
;;;685    
                          ENDP

                  |L14.840|
                          DCD      0x40021000
                  |L14.844|
                          DCD      0x42420000
                  |L14.848|
                          DCD      0x42420480
                  |L14.852|
                          DCD      0x40007000

                          AREA ||i.RCC_Delay||, CODE, READONLY, ALIGN=2

                  RCC_Delay PROC
;;;1264     */
;;;1265   static void RCC_Delay(uint32_t mdelay)
000000  b508              PUSH     {r3,lr}
;;;1266   {
;;;1267     __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
000002  4907              LDR      r1,|L15.32|
000004  f44f52fa          MOV      r2,#0x1f40
000008  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
00000a  fbb1f1f2          UDIV     r1,r1,r2
00000e  4341              MULS     r1,r0,r1
000010  9100              STR      r1,[sp,#0]
                  |L15.18|
;;;1268     do 
;;;1269     {
;;;1270       __NOP();
000012  bf00              NOP      
;;;1271     } 
;;;1272     while (Delay --);
000014  9800              LDR      r0,[sp,#0]
000016  1e41              SUBS     r1,r0,#1
000018  9100              STR      r1,[sp,#0]
00001a  d2fa              BCS      |L15.18|
;;;1273   }
00001c  bd08              POP      {r3,pc}
;;;1274   
                          ENDP

00001e  0000              DCW      0x0000
                  |L15.32|
                          DCD      SystemCoreClock

;*** Start embedded assembler ***

#line 1 "..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REVSH|
#line 402
|__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____RRX|
#line 587
|__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
